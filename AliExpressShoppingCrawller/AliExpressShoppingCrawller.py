# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
from tkinter import dialog
from typing import Text
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5 import uic
from PyQt5.QtCore import *
from PyQt5.QtCore import pyqtSlot

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
import chromedriver_autoinstaller

import time
import datetime
import os
import pandas as pd
import threading
import shutil
import subprocess
from urllib.request import Request, urlopen
import requests
import re
import tkinter
import googletrans as google
import pyautogui

# QT designer ui 파일 로드
form_class = uic.loadUiType("./driver/main_ui.ui")[0]

# UI 텍스트 출력 클래스
class TextBrowser(QThread):
    # signal을 MyWindow에 전달할 수 있게 하는 인자
    finished = pyqtSignal(str)
    now_date = ''

    @pyqtSlot(str)
    def run(self, print_str):
        self.make_log(print_str)

    @pyqtSlot(str)
    def make_log(self, print_str):
        self.now_time = datetime.datetime.now()
        self.now_date = self.now_time.strftime('[%Y-%m-%d %H:%M:%S]  ') + print_str
        self.finished.emit(self.now_date)   # signal MyWindow에 전달

    def GetTime(self):
        self.now_time = datetime.datetime.now()
        return self.now_time

# UI 구성 클래스
class MyWindow(QMainWindow, form_class):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.cnt = 0
        self.setWindowIcon(QIcon('./driver/AliImage.png'))    # UI에 Naver icon 설정
        self.run_btn.clicked.connect(self.Run)  # 검색 버튼 누르면 self.Run 함수 실행
        self.process_delay = 1.5
        self.text = TextBrowser()               # UI에 text 출력 위한 객체
        self.restart = False
        self.skip_option = False
        self.i = 0
        self.idx = 0
        self.search_url = ""
        self.no_crawl = False
        self.final_cnt = 0
        self.sku_id = []
        self.translate = False
        self.arrange = 0
        self.translator = google.Translator()

        self.text.finished.connect(self.ConnectTextBrowser) # TextBrowser한테서 signal 받으면 ConnectTextBrowser 함수 실행
        self.exit_btn.clicked.connect(self.QuitProgram) # 종료 버튼 클릭하면 프로그램 종료되게끔 설정 & thread 종료
        self.order_btn.clicked.connect(self.SetArrange)
        self.accuracy_btn.clicked.connect(self.SetArrange)
        self.no_option.clicked.connect(self.SetOptionCollect)
        self.auto_translate_btn.clicked.connect(self.SetAutoTranslate)

    # UI 창닫기 버튼 클릭하면 종료 의사 묻는 팝업창 띄우기
    def closeEvent(self, QCloseEvent): 
        ans = QMessageBox.question(self, "종료 확인", "종료하시겠습니까?",
                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)
        if ans == QMessageBox.Yes:
            QCloseEvent.accept()
            self.KillThread()
        else:
            QCloseEvent.ignore()
    
    def SetOptionCollect(self):
        skip_option_collect = self.no_option.isChecked()
        if skip_option_collect == True:
            self.skip_option = True
        elif skip_option_collect == False:
            self.skip_option = False
    
    def SetArrange(self):
        if self.order_btn.isChecked():
            self.arrange = 0
        elif self.accuracy_btn.isChecked():
            self.arrange = 1

    # 종료 버튼 누르면 실행되는 함수
    def QuitProgram(self):
        QCoreApplication.instance().quit
        self.KillThread()

    # 검색 버튼 누르면 실행되는 Run 함수
    def Run(self):
        self.th = threading.Thread(target=self.StartCrawl)
        self.th.daemon = True
        self.th.start()
    
    def Retry(self):
        self.Restart()
        self.restart = True
        ret = self.CrawlDataWithItemName()

        return ret

    def SetAutoTranslate(self):
        if self.auto_translate_btn.isChecked():
            self.translate = True
        else:
            self.translate = False

    # 징동닷컴 크롤링 함수
    def StartCrawl(self):
        self.text.run('--Start work--')
        self.text.run('PGM ver : 22081103')
        self.start_time = self.text.GetTime()
        root = tkinter.Tk()
        root.withdraw()
        self.windows_user_name = os.path.expanduser('~')
        self.sku_id = []

        if self.page_cnt.text() != "":
            self.cnt_page = int(self.page_cnt.text())
        else:
            self.cnt_page = 1
        self.tb = pd.read_excel('./driver/sheet_reference.xlsx')
        self.columns = list(self.tb.columns)
        self.tb_temp = [[""] * 22 for i in range(self.cnt_page * 60)]
        self.tb_temp = pd.DataFrame(self.tb_temp)
        self.tb_temp.columns = self.columns

        self.OpenUrl()
        ret = self.CrawlDataWithItemName()
        
        if ret == 0:
            while True:
                ret = self.Retry()
                if ret == 1:
                    break

    # 징동닷컴 URL 오픈
    @pyqtSlot()
    def OpenUrl(self):
        try:
            shutil.rmtree(r"c:\chrometemp")  #쿠키 / 캐쉬파일 삭제
        except FileNotFoundError:
            pass
        
        try:
            subprocess.Popen(r'C:\Program Files\Google\Chrome\Application\chrome.exe --remote-debugging-port=9222 --user-data-dir="C:\chrometemp"') # 디버거 크롬 구동
        except:
            subprocess.Popen(r'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe --remote-debugging-port=9222 --user-data-dir="C:\chrometemp"') # 디버거 크롬 구동

        self.options = Options()
        self.options.add_experimental_option("debuggerAddress", "127.0.0.1:9222")
        
        # 크롬 버전을 확인하여 버전이 안맞으면 자동으로 업데이트 하여 설치해주는 옵션       
        chrome_ver = chromedriver_autoinstaller.get_chrome_version().split('.')[0]
        try:
            self.driver = webdriver.Chrome(f'./{chrome_ver}/chromedriver.exe', options=self.options)
        except:
            chromedriver_autoinstaller.install(True)
            self.driver = webdriver.Chrome(f'./{chrome_ver}/chromedriver.exe', options=self.options)
        self.driver.implicitly_wait(10)
        
        # 속도 향상을 위한 옵션 해제
        self.options.add_argument("disable-gpu") 
        self.options.add_argument("disable-infobars")
        self.options.add_argument("--disable-extensions")
        prefs = {'profile.default_content_setting_values': {'cookies' : 2, 'images': 2, 'plugins' : 2, 'popups': 2, 'geolocation': 2, 'notifications' : 2, 'auto_select_certificate': 2, 'fullscreen' : 2, 'mouselock' : 2, 'mixed_script': 2, 'media_stream' : 2, 'media_stream_mic' : 2, 'media_stream_camera': 2, 'protocol_handlers' : 2, 'ppapi_broker' : 2, 'automatic_downloads': 2, 'midi_sysex' : 2, 'push_messaging' : 2, 'ssl_cert_decisions': 2, 'metro_switch_to_desktop' : 2, 'protected_media_identifier': 2, 'app_banner': 2, 'site_engagement' : 2, 'durable_storage' : 2}}   
        self.options.add_experimental_option('prefs', prefs)
        # 크롬 브라우저와 셀레니움을 사용하면서 발생되는 '시스템에 부착된 장치가 작동하지 않습니다.' 라는 크롬 브라우저의 버그를 조치하기 위한 코드. 
        self.options.add_experimental_option("excludeSwitches", ["enable-logging"])

        # 윈도우 사이즈 맥스로 키우기
        self.driver.maximize_window()
        self.driver.get('https://ko.aliexpress.com/')
        self.text.run('알리익스프레스 URL open 완료')

        time.sleep(self.process_delay)

    def CrawlDataWithItemName(self):
        self.ac = ActionChains(self.driver)  # 셀레니움 동작을 바인딩 하여 동작 할 수 있게 하는 모듈
        time.sleep(2)
        coupon_close = False

        # 웹 오픈 확인
        try:
            WebDriverWait(self.driver, 3).until(EC.element_to_be_clickable((By.CSS_SELECTOR, 'img.btn-close'))).click()
            coupon_close = True
        except:
            pass

        pyautogui.press('f12')
        time.sleep(2)
        pyautogui.press('f12')
        # 배대지 : 홍콩차이나
        # 통화 : 달러로 변경
        try:
            change_dollor = WebDriverWait(self.driver, 3).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#switcher-info > span.currency')))
            time.sleep(1)
            self.ac.move_to_element(change_dollor).pause(1).click().perform()
            time.sleep(3)
            # 배대지
            WebDriverWait(self.driver, 3).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#nav-global > div.ng-item-wrap.ng-item.ng-switcher.active > div > div > div > div.switcher-shipto.item.util-clearfix > div > a:nth-child(1)'))).click()
            time.sleep(1)
            search_delivery = WebDriverWait(self.driver, 3).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#nav-global > div.ng-item-wrap.ng-item.ng-switcher.active > div > div > div > div.switcher-shipto.item.util-clearfix > div > div:nth-child(4) > div > input'))).click()
            time.sleep(1)
            search_hongkong = WebDriverWait(self.driver, 3).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#nav-global > div.ng-item-wrap.ng-item.ng-switcher.active > div > div > div > div.switcher-shipto.item.util-clearfix > div > div:nth-child(4) > div > input')))
            hongkong = 'hong kong,china'
            self.ac.send_keys_to_element(search_hongkong, hongkong).pause(1).send_keys(Keys.ENTER).perform()
            time.sleep(1)
            try:
                WebDriverWait(self.driver, 3).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#nav-global > div.ng-item-wrap.ng-item.ng-switcher.active > div > div > div > div.switcher-shipto.item.util-clearfix > div > div:nth-child(4) > ul > li:nth-child(94)'))).click()
            except:
                WebDriverWait(self.driver, 3).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#nav-global > div.ng-item-wrap.ng-item.ng-switcher.active > div > div > div > div.switcher-shipto.item.util-clearfix > div > div:nth-child(4) > ul > li:nth-child(95)'))).click()
            time.sleep(1)
            
            # 한국어
            WebDriverWait(self.driver, 3).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#nav-global > div.ng-item-wrap.ng-item.ng-switcher.active > div > div > div > div.switcher-language.item.util-clearfix > div > span'))).click()
            time.sleep(1)
            korean = '한국어'
            search_korean = WebDriverWait(self.driver, 3).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#nav-global > div.ng-item-wrap.ng-item.ng-switcher.active > div > div > div > div.switcher-language.item.util-clearfix > div > div > input')))
            time.sleep(1)
            self.ac.send_keys_to_element(search_korean, korean).pause(1).send_keys(Keys.ENTER).perform()
            WebDriverWait(self.driver, 3).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#nav-global > div.ng-item-wrap.ng-item.ng-switcher.active > div > div > div > div.switcher-language.item.util-clearfix > div > ul > li:nth-child(11) > a'))).click()
            time.sleep(1)

            # 달러
            WebDriverWait(self.driver, 3).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#nav-global > div.ng-item-wrap.ng-item.ng-switcher.active > div > div > div > div.switcher-currency.item.util-clearfix > div > span'))).click()
            time.sleep(1)
            search_dollor = WebDriverWait(self.driver, 3).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#nav-global > div.ng-item-wrap.ng-item.ng-switcher.active > div > div > div > div.switcher-currency.item.util-clearfix > div > div > input'))).click()
            time.sleep(1)
            search = WebDriverWait(self.driver, 3).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#nav-global > div.ng-item-wrap.ng-item.ng-switcher.active > div > div > div > div.switcher-currency.item.util-clearfix > div > div > input')))
            dollor_text = 'usd'
            self.ac.send_keys_to_element(search, dollor_text).pause(1).send_keys(Keys.ENTER).perform()
            dollor = WebDriverWait(self.driver, 3).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#nav-global > div.ng-item-wrap.ng-item.ng-switcher.active > div > div > div > div.switcher-currency.item.util-clearfix > div > ul > li:nth-child(5) > a'))).click()
            time.sleep(1)
            save_btn = WebDriverWait(self.driver, 3).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#nav-global > div.ng-item-wrap.ng-item.ng-switcher.active > div > div > div > div.switcher-btn.item.util-clearfix > button'))).click()
        except:
            pass
        
        WebDriverWait(self.driver, 50).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#header > div')))
        time.sleep(5)
        if coupon_close == True:
            # 웹 오픈 확인
            try:
                WebDriverWait(self.driver, 3).until(EC.element_to_be_clickable((By.CSS_SELECTOR, 'img.btn-close'))).click()
            except:
                pass

        if self.restart == True and self.search_url != '':
            self.driver.get(self.search_url)
            time.sleep(self.process_delay)
        else:
            self.item_text = self.item_name.text()
            self.ClickSearchButton()
            self.j = 0
            self.final_cnt = 0
        
        self.search_url = self.driver.current_url
        self.translated_name = self.TranslateGoogle(self.item_name.text(), 'zh-cn')
        
        time.sleep(1)
        # 별 4개 이상 버튼 클릭
        try:
            WebDriverWait(self.driver, 2).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#root > div > div.page-content > div.main-content > div.right-menu > div > div.top-container > div.top-refine > div.first > span.feature-wrap > span:nth-child(3) > label > span.next-checkbox'))).click()
            star_text = self.driver.find_element(By.CSS_SELECTOR, '#root > div > div.page-content > div.main-content > div.right-menu > div > div.top-container > div.top-refine > div.first > span.feature-wrap > span:nth-child(3)').get_attribute('innerHTML').split('이상')[0]
            if '무료 배송' in star_text:
                WebDriverWait(self.driver, 2).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#root > div > div.page-content > div.main-content > div.right-menu > div > div.top-container > div.top-refine > div.first > span.feature-wrap > span:nth-child(4) > label > span.next-checkbox'))).click()
            time.sleep(2)
        except:
            WebDriverWait(self.driver, 2).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#root > div > div.page-content > div.main-content > div.right-menu > div > div.top-container > div.top-refine > div.first > span.feature-wrap > span:nth-child(4) > label > span.next-checkbox'))).click()

        # 상품 정렬
        try:
            if self.arrange == 0:
                WebDriverWait(self.driver, 2).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#root > div > div.page-content > div.main-content > div.right-menu > div > div.top-container > div.top-refine > div.sort > div.refine-item.refine-sortby > span.sort-by-wrapper > span:nth-child(2)'))).click()
            elif self.arrange == 1:
                WebDriverWait(self.driver, 2).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#root > div > div.page-content > div.main-content > div.right-menu > div > div.top-container > div.top-refine > div.sort > div.refine-item.refine-sortby > span.sort-by-wrapper > span:nth-child(1)'))).click()
            time.sleep(5)
        except:
            pass

        # 바둑판 배열로 정렬
        try:
            WebDriverWait(self.driver, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR, '#root > div > div.page-content > div.main-content > div.right-menu > div > div.top-container > div.top-refine > div.sort > div.none-rtl.display-mode > svg:nth-child(2)'))).click()
        except:
            self.text.run('바둑판 배열 클릭에 실패했습니다.')
            if len(self.driver.window_handles) != 1:
                for n in range(len(self.driver.window_handles) - 1):
                    last_tab = self.driver.window_handles[-1]
                    self.driver.switch_to.window(window_name=last_tab)
                    self.driver.close()
                first_tab = self.driver.window_handles[0]
                self.driver.switch_to.window(window_name=first_tab)
                time.sleep(self.process_delay)
            return 0

        # 메인화면인지 확인
        try:
            WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, '#root > div.glosearch-wrap > div > div.main-content > div.right-menu > div')))        
        except:
            self.text.run('바둑판 배열 클릭에 실패했습니다.')
            if len(self.driver.window_handles) != 1:
                for n in range(len(self.driver.window_handles) - 1):
                    last_tab = self.driver.window_handles[-1]
                    self.driver.switch_to.window(window_name=last_tab)
                    self.driver.close()
                first_tab = self.driver.window_handles[0]
                self.driver.switch_to.window(window_name=first_tab)
                time.sleep(self.process_delay)
            return 0

        time.sleep(3)

        # 페이지 스크롤 최대치로 내리기            
        before_h = self.driver.execute_script('return window.scrollY')
        while(True):
            self.driver.find_element_by_css_selector('body').send_keys(Keys.END)
            time.sleep(1)
            after_h = self.driver.execute_script('return window.scrollY') 

            if after_h == before_h:
                break
            else:
                before_h = after_h
        
        before_h = 0
        after_h = 0
        
        #while self.i < self.cnt_page:
        #while True:
        while self.j < 60:
            self.no_crawl = False
            try:
                temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="root"]/div/div[1]/div[2]/div[2]/div/div[2]/div[{}]'.format(str(self.j + 1)))))[0]
                self.ac.move_to_element(temp).pause(0.5).click().perform()
                time.sleep(1)
            except:
                self.text.run('이미지 클릭에 실패했습니다.')
                if len(self.driver.window_handles) != 1:
                    for n in range(len(self.driver.window_handles) - 1):
                        last_tab = self.driver.window_handles[-1]
                        self.driver.switch_to.window(window_name=last_tab)
                        self.driver.close()
                    first_tab = self.driver.window_handles[0]
                    self.driver.switch_to.window(window_name=first_tab)
                    time.sleep(self.process_delay)
                return 0

            # 알리익스프레스 검색 선택링크주소
            last_tab = self.driver.window_handles[-1]
            self.driver.switch_to.window(window_name=last_tab)
            try:
                select_url = self.driver.current_url
            except:
                self.driver.refresh()

            try:
                WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))
                self.product_main = WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')
            except:
                self.text.run('이미지 클릭에 실패했습니다.')
                if len(self.driver.window_handles) != 1:
                    for n in range(len(self.driver.window_handles) - 1):
                        last_tab = self.driver.window_handles[-1]
                        self.driver.switch_to.window(window_name=last_tab)
                        self.driver.close()
                    first_tab = self.driver.window_handles[0]
                    self.driver.switch_to.window(window_name=first_tab)
                    time.sleep(self.process_delay)
                return 0
                    
            # 페이지 스크롤 최대치로 내리기
            before_h = self.driver.execute_script('return window.scrollY')
            while(True):
                self.driver.find_element_by_css_selector('body').send_keys(Keys.END)
                time.sleep(1)
                after_h = self.driver.execute_script('return window.scrollY') 

                if after_h == before_h:
                    break
                else:
                    before_h = after_h
            
            # 선택제품가격
            self.price = self.GetPrice()

            # 상품제목
            self.title = self.GetTitle()

            # 대표이미지
            self.img_url = self.GetRepresentImage()

            self.windows_user_name = os.path.expanduser('~')

            # 상세 페이지
            self.detail_imgs = self.GetDetailImages()
            self.detail_imgs = '\n'.join(self.detail_imgs)
            
            option1_list = []
            option1_total = []
            option2_list = []
            prices = []

            # 옵션1
            option1_total, option1_list, option2_list, prices = self.GetOption1()
            if self.no_crawl == True:
                if len(self.driver.window_handles) != 1:
                    for n in range(len(self.driver.window_handles) - 1):
                        last_tab = self.driver.window_handles[-1]
                        self.driver.switch_to.window(window_name=last_tab)
                        self.driver.close()
                    first_tab = self.driver.window_handles[0]
                    self.driver.switch_to.window(window_name=first_tab)
                    time.sleep(self.process_delay)
                if self.j == 59:
                    self.driver.find_element_by_xpath('//*[@id="root"]/div/div/div[2]/div[2]/div/div[3]/div/div[1]/div/button[2]').click()
                    self.j = 0
                    self.i += 1
                    time.sleep(self.process_delay)
                else:
                    self.j += 1
                    self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                continue

            option1_list = '\n'.join(option1_list)
            option1_total = '\n'.join(option1_total)
            self.tb_temp[self.columns[17]][self.idx] = option1_list
            if len(option2_list) > 0:
                option2_list = '\n'.join(option2_list)
                self.tb_temp[self.columns[18]][self.idx] = option2_list
            self.tb_temp[self.columns[19]][self.idx] = option1_total

            self.tb_temp[self.columns[12]][self.idx] = self.search_url
            self.tb_temp[self.columns[13]][self.idx] = select_url
            if self.price == "暂无报价":
                self.tb_temp[self.columns[14]][self.idx] = "暂无报价"
            elif len(prices) > 1:
                self.tb_temp[self.columns[14]][self.idx] = '{}-{}'.format(min(prices), max(prices))
            else:
                self.tb_temp[self.columns[14]][self.idx] = self.price
            self.tb_temp[self.columns[15]][self.idx] = self.title + '({})'.format(self.item_text)
            self.tb_temp[self.columns[16]][self.idx] = self.img_url
            self.tb_temp[self.columns[20]][self.idx] = self.detail_imgs
            self.tb_temp[self.columns[0]][self.idx] = self.item_text
            
            if len(self.driver.window_handles) != 1:
                for n in range(len(self.driver.window_handles) - 1):
                    last_tab = self.driver.window_handles[-1]
                    self.driver.switch_to.window(window_name=last_tab)
                    self.driver.close()
                    time.sleep(1)

                first_tab = self.driver.window_handles[0]
                self.driver.switch_to.window(window_name=first_tab)
                time.sleep(self.process_delay)

            if self.final_cnt == (self.cnt_page * 60) - 1:
                self.final_cnt += 1
                self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                self.text.run('마지막 아이템입니다.')
                self.text.run('크롤링이 완료되었습니다.')
                self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                # 크롬드라이버 종료
                self.end_time = self.text.GetTime()
                diff_time = self.end_time - self.start_time
                self.text.run('--End work--')
                self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                self.restart = True
                self.driver.close()
                
                file_folder = '{}\\Desktop\\알리익스프레스_결과물'.format(self.windows_user_name)
                filename = '{}\\{}'.format(file_folder, self.item_name.text() + '_AliExpress_ItemName_results.xlsx')
                try:
                    if not os.path.isdir(file_folder):
                        os.mkdir(file_folder)
                except OSError:
                    self.text.run('파일 폴더를 생성하는데 실패했습니다.')
                    print(self.windows_user_name)
                    break
                self.tb_temp.to_excel(filename, index=False)
                return 1
            else:
                self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                if self.j == 59:
                    try:
                        self.driver.find_element_by_xpath('//*[@id="root"]/div/div/div[2]/div[2]/div/div[3]/div/div[1]/div/button[2]').click()
                    except:
                        self.text.run('{}페이지가 마지막 페이지입니다.'.format(self.i + 1))
                        self.text.run('크롤링이 완료되었습니다.')
                        self.j = 0
                        self.final_cnt += 1
                        self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                        # 크롬드라이버 종료
                        self.end_time = self.text.GetTime()
                        diff_time = self.end_time - self.start_time
                        self.text.run('--End work--')
                        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                        self.restart = True
                        self.driver.close()
                        
                        file_folder = '{}\\Desktop\\알리익스프레스_결과물'.format(self.windows_user_name)
                        filename = '{}\\{}'.format(file_folder, self.item_name.text() + '_AliExpress_ItemName_results.xlsx')
                        try:
                            if not os.path.isdir(file_folder):
                                os.mkdir(file_folder)
                        except OSError:
                            self.text.run('파일 폴더를 생성하는데 실패했습니다.')
                            print(self.windows_user_name)
                            break
                        self.tb_temp.to_excel(filename, index=False)
                        return 1

                    self.j = 0
                    self.i += 1
                    self.final_cnt += 1
                    self.idx += 1
                    time.sleep(self.process_delay)
                    self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                    continue

            self.final_cnt += 1
            self.idx += 1
            self.j += 1
            self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
    
    def GetPrice(self):
        try:
            price = self.product_main.split('product-price-original')[1].split('US $')[1].split('</')[0].replace('"', '').replace(',','').split(' /')[0]
        except:
            try:
                price = self.product_main.split('uniform-banner-box-discounts')[1].split('US $')[1].split('</')[0].replace('"', '').replace(',','').split(' /')[0]
            except:
                price = self.product_main.split('product-price-value')[1].split('US $')[1].split('</')[0].replace('"', '').replace(',','').split(' /')[0]

        if '-' in price:
            return float(price.split(' -')[0])
        else:
            return float(price)

    def GetTitle(self):
        title = self.product_main.split('img alt=')[1].split('" ')[0].replace('"', '')
        return title

    def GetRepresentImage(self):
        #img_url = WebDriverWait(self.driver, 1).until(EC.presence_of_element_located((By.CSS_SELECTOR,'#poster'))).get_attribute('src').split('_.webp')[0]
        img_url = self.product_main.split('src=')[2].split('_.webp')[0].split('.jpg')[0].replace('_50x50.jpg','').replace('"', '') + '.jpg'
        if '.png' in img_url:
            img_url = img_url.split('_.webp')[0].replace('"','').replace('_50x50.png','').replace('.png', '') + '.png'
            
        return img_url

    def GetOption1(self):
        option1_total = []
        option1_list = []
        option2_list = []
        prices = []
        max_price = 0
        temp = []
        prop_count = 0

        prop_temp = self.product_main.split('sku-title')[1:]
        if len(prop_temp) == 2:
            prop_count = 1
        elif len(prop_temp) > 2:
            prop_count = 2
        if prop_count == 2:
            tt = prop_temp[-1].split('sku-property-text"><span>')[1:]
            for i in range(len(tt)):
                option2_list.append(tt[i].split('</')[0] + ';')
        
        sku = self.product_main.split('ae_object_value')[1].split('" st_')[0].replace('="','')
        if sku in self.sku_id:
            self.text.run('{}페이지 {}번째 아이템은 이미 수집된 상품입니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))

            self.no_crawl = True
            option1_total = []
            option1_list = []
            prices = []

            return option1_total, option1_list, option2_list, prices
        else:
            self.sku_id.append(sku)

        temp1 = self.product_main.split('title=')[1:]
        for i in range(len(temp1)):
            if 'img src=' in temp1[i] or 'class="product-quantity' in temp1[i]:
                temp.append(temp1[i])

        if len(temp) > 30:
            self.text.run('{}페이지 {}번째 아이템의 옵션 갯수를 30개로 한정합니다.'.format(self.i + 1, self.j + 1))
            option1_total = []
            option1_list = []
            prices = []
            self.no_crawl = True

            return option1_total, option1_list, option2_list, prices

        if self.skip_option == True:
            if len(temp) > 1:
                self.text.run('{}페이지 {}번째 아이템은 옵션이 있는 상품입니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
                self.no_crawl = True
                return option1_total, option1_list, option2_list, prices
        
        imgs = self.product_main.split('sku-property-image')[1:]
        for i in range(len(temp)):        
            if self.translate == True:
                translated_text = self.TranslateGoogle(temp[i].split('" alt')[0].replace('"',''), 'ko')
            else:
                translated_text = temp[i].split('" alt')[0].replace('"','')
            option1_list.append(translated_text + ';' + imgs[i].split('img src=')[1].split('_.webp')[0].replace('"','').replace('_50x50.jpg','').replace('https:', '').replace('http:',''))
            
            if '.png' in option1_list[i]:
                option1_list[i] = option1_list[i].split('_.webp')[0].replace('"','').replace('_50x50.png','').replace('https:', '').replace('http:','').replace('.png', '') + '.png'
            option1_total.append(translated_text)

        sold_out_idx = 0
        for i in range(len(temp)):
            try:
                self.driver.find_element(By.CSS_SELECTOR, '#root > div > div.product-main > div > div.product-info > div.product-sku > div > div > ul > li:nth-child({})'.format(i+1)).click()
                time.sleep(0.2)
                product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')
                try:
                    price = product_main.split('product-price-original')[1].split('US $')[1].split('</span>')[0]
                except:
                    try:
                        price = product_main.split('uniform-banner-box-discounts')[1].split('US $')[1].split('</span>')[0]
                    except:
                        price = product_main.split('product-price-value')[1].split('US $')[1].split('</span>')[0]

                prices.append(float(price.replace(',','')))
                option1_total[i - sold_out_idx] += '/' + price
            except:
                del option1_total[i - sold_out_idx]
                del option1_list[i - sold_out_idx]
                self.text.run('{}페이지 {}-{}이 품절되었습니다.'.format(self.i + 1, self.j + 1, i + 1))
                sold_out_idx += 1
                pass

        if len(prices) != 0 and len(prices) > 1:
            max_price = abs(max(prices) - min(prices)) / min(prices) * 100                
            if max_price >= 300.0:
                self.text.run('{}페이지 {}번째 아이템의 옵션가격이 본품 금액의 300% 이상입니다. 다음 아이템으로 넘어갑니다'.format(self.i + 1, self.j + 1))
                option1_list = []
                option1_total = []
                prices = []
                self.no_crawl = True

            elif min(prices) <= self.price / 2:
                self.text.run('{}페이지 {}번째 아이템의 옵션가격이 본품 금액의 -50% 이하입니다. 다음 아이템으로 넘어갑니다'.format(self.i + 1, self.j + 1))
                option1_list = []
                option1_total = []
                prices = []
                self.no_crawl = True
            
        return option1_total, option1_list, option2_list, prices
    
    def GetDetailImages(self):
        detail_imgs = []
        try:
            img_temp = self.driver.find_element(By.CSS_SELECTOR, '#product-description').get_attribute('innerHTML').split('src=')[1:]
        except:
            return detail_imgs
    
        for i in range(len(img_temp)):
            if '.jpg' in img_temp[i]:
                if 'https://' not in img_temp[i] and 'http://' not in img_temp[i]:
                    detail_imgs.append('https://' + img_temp[i].split('" ')[0].replace('"', '').split('jpg')[0].replace('//ae', 'ae') + 'jpg')
                else:
                    detail_imgs.append(img_temp[i].split('" ')[0].replace('"', '').split('jpg')[0] + 'jpg')
            elif '.png' in img_temp[i]:
                if 'https://' not in img_temp[i] and 'http://' not in img_temp[i]:
                    detail_imgs.append('https://' + img_temp[i].split('" ')[0].replace('"', '').split('png')[0].replace('//ae', 'ae') + 'png')
                else:
                    detail_imgs.append(img_temp[i].split('" ')[0].replace('"', '').split('png')[0] + 'png')

        return detail_imgs

    def ClickSearchButton(self):
        try:
            self.driver.get('https://ko.aliexpress.com/w/wholesale-{}.html'.format(self.item_text))
        except:
            self.text.run('검색버튼 클릭에 실패했습니다.')
            self.restart = True
            return 0

        time.sleep(self.process_delay)

    def CleanText(self, inputString):
        text_rmv = re.sub('[-=+,#/\?:^.@*\"※~ㆍ!』‘|\(\)\[\]`\'…》\”\“\’·]', ' ', inputString)
        return text_rmv

    # 크롤링 재시작
    def Restart(self):
        self.driver.get('https://ko.aliexpress.com/')
        self.text.run('알리익스프레스 URL re-open 완료')
        time.sleep(self.process_delay)
    
    def TranslateGoogle(self, text, option):
        return self.translator.translate(text, dest=option).text

    def TranslateChinese(self, text):
        client_id = "Uvq1xEXtYvQQs5zR00p2"
        client_pw = "0j597g2wUR"

        headers = {
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
            'X-Naver-Client-Id': 'Uvq1xEXtYvQQs5zR00p2',
            'X-Naver-Client-Secret': '0j597g2wUR',
        }

        data = {
            'text' : text,
            'source' : 'ko',
            'target' : 'zh-CN'
        }

        response = requests.post('https://openapi.naver.com/v1/papago/n2mt', headers=headers, data=data)
        rescode = response.status_code

        if(rescode==200):
            send_data = response.json()
            trans_data = (send_data['message']['result']['translatedText'])
            return trans_data
        else:
            self.text.run("Papago API 사용량이 모두 소진되었습니다.(하루 최대 10,000개)")

    # 쓰레드 종료
    def KillThread(self):
        pid = os.getpid()
        os.kill(pid, 2)

    # UI에 텍스트 출력
    @pyqtSlot(str)
    def ConnectTextBrowser(self, print_str):
        self.textBrowser.append(print_str)
        self.textBrowser.repaint()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MyWindow()
    window.show()
    app.exec_()
