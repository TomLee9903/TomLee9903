# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from itertools import product
import sys
from tkinter import dialog
from tkinter import filedialog
from typing import Text
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5 import uic
from PyQt5.QtCore import *
from PyQt5.QtCore import pyqtSlot

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
import chromedriver_autoinstaller
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager

import time
import datetime
import os
import pandas as pd
import threading
import shutil
import subprocess
from urllib.request import Request, urlopen
import requests
import re
import tkinter
import googletrans as google
import pyautogui
import openpyxl
from urllib import parse
import numpy as np
import urllib.request
import cv2
import pyautogui as pag
import random
import copy
from enum import Enum

class Result(Enum):
    FAIL = 0
    PASS = 1
    UNKNOWN = 2
    RETRY = 3
    PAGE_MISMATCH = 4

# QT designer ui 파일 로드
form_class = uic.loadUiType("./driver/main_ui.ui")[0]
PAUSE = False

# UI 텍스트 출력 클래스
class TextBrowser(QThread):
    # signal을 MyWindow에 전달할 수 있게 하는 인자
    finished = pyqtSignal(str)
    now_date = ''

    @pyqtSlot(str)
    def run(self, print_str):
        self.make_log(print_str)

    @pyqtSlot(str)
    def make_log(self, print_str):
        self.now_time = datetime.datetime.now()
        self.now_date = self.now_time.strftime('[%Y-%m-%d %H:%M:%S]  ') + print_str
        self.finished.emit(self.now_date)   # signal MyWindow에 전달

    def GetTime(self):
        self.now_time = datetime.datetime.now()
        return self.now_time

# UI 구성 클래스
class MyWindow(QMainWindow, form_class):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.cnt = 0
        self.setWindowIcon(QIcon('./driver/AliImage.png'))    # UI에 Naver icon 설정
        self.run_btn.clicked.connect(self.Run)  # 검색 버튼 누르면 self.Run 함수 실행
        self.process_delay = 1.5
        self.text = TextBrowser()               # UI에 text 출력 위한 객체
        self.translator = google.Translator()
        #self.asking_source = AskingPopUp(self)
        self.extra = False
        self.skip_option = False
        self.translate_item_name = False
        self.translate = False
        self.discount_flag = True
        self.link_parse = False
        self.detail_db = []
        self.item_text = ''
        self.enable_option2 = False
        self.dc_per = 100.0
        self.enable_crawl_price_only = False
        self.enable_continuous_crawl = False
        self.search_item_list = pd.DataFrame()
        self.debug_mode = False
        self.new_format = False
        self.product_main_css = ''
        self.restart = False
        #self.silent_mode = True
		
        self.text.finished.connect(self.ConnectTextBrowser) # TextBrowser한테서 signal 받으면 ConnectTextBrowser 함수 실행
        #self.asking_source.ret.connect(self.ConnectMessageBox)
        self.exit_btn.clicked.connect(self.QuitProgram) # 종료 버튼 클릭하면 프로그램 종료되게끔 설정 & thread 종료
        # self.order_btn.clicked.connect(self.SetArrange)
        # self.accuracy_btn.clicked.connect(self.SetArrange)
        self.no_option.clicked.connect(self.SetOptionCollect)
        self.auto_translate_btn.clicked.connect(self.SetAutoTranslate)
        self.url_btn.clicked.connect(self.OpenUrl)
        self.search_btn.clicked.connect(self.SearchItem)
        self.item_name_radio.clicked.connect(self.SetExtraDataCollection)
        self.category_radio.clicked.connect(self.SetExtraDataCollection)
        self.super_deal_radio.clicked.connect(self.SetExtraDataCollection)
        self.coupon_radio.clicked.connect(self.SetExtraDataCollection)
        self.free_radio.clicked.connect(self.SetExtraDataCollection)
        self.quick_delivery_radio.clicked.connect(self.SetExtraDataCollection)
        self.recom_radio.clicked.connect(self.SetExtraDataCollection)
        self.enable_translate_itemname.clicked.connect(self.SetTranslateItemName)
        self.enable_discount.clicked.connect(self.SetPriceType)
        self.enable_link_sourcing.clicked.connect(self.SetLinkSourcing)
        self.enable_option2_btn.clicked.connect(self.SetEnableOption2)
        self.enable_crawl_price_only_btn.clicked.connect(self.SetEnableCrawlPriceOnly)
        self.enable_continuous_btn.clicked.connect(self.SetEnableContinuousCrawl)
        #self.silent_mode_btn.clicked.connect(self.SetSilentMode)
		
    # UI 창닫기 버튼 클릭하면 종료 의사 묻는 팝업창 띄우기
    def closeEvent(self, QCloseEvent): 
        ans = QMessageBox.question(self, "종료 확인", "종료하시겠습니까?",
                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)
        if ans == QMessageBox.Yes:
            QCloseEvent.accept()
            self.KillThread()
        else:
            QCloseEvent.ignore()
    
    def SetOptionCollect(self):
        skip_option_collect = self.no_option.isChecked()
        if skip_option_collect == True:
            self.skip_option = True
        elif skip_option_collect == False:
            self.skip_option = False
    
    def SetArrange(self):
        if self.order_btn.isChecked():
            self.arrange = 0
        elif self.accuracy_btn.isChecked():
            self.arrange = 1

    def SetSilentMode(self):
        silent = self.silent_mode_btn.isChecked()
        if silent == True:
            self.silent_mode = True
        elif silent == False:
            self.silent_mode = False

    # 종료 버튼 누르면 실행되는 함수
    def QuitProgram(self):
        QCoreApplication.instance().quit
        self.KillThread()

    # 검색 버튼 누르면 실행되는 Run 함수
    def Run(self):
        self.th = threading.Thread(target=self.StartCrawl)
        self.th.daemon = True
        self.th.setDaemon(True)
        self.th.start()
    
    def Retry(self, search_item):
        self.restart = True
        ret = self.CrawlDataWithItemName(search_item)

        return ret

    def SetAutoTranslate(self):
        if self.auto_translate_btn.isChecked():
            self.translate = True
        else:
            self.translate = False
    
    def SetTranslateItemName(self):
        if self.enable_translate_itemname.isChecked():
            self.translate_item_name = True
        else:
            self.translate_item_name = False

    def SetPriceType(self):
        if self.enable_discount.isChecked():
            self.discount_flag = True
        else:
            self.discount_flag = False

    def SetExtraDataCollection(self):
        if self.item_name_radio.isChecked():
            self.extra = 0
        elif self.category_radio.isChecked():
            self.extra = 1
        elif self.super_deal_radio.isChecked():
            self.extra = 2
        elif self.coupon_radio.isChecked():
            self.extra = 3
        elif self.free_radio.isChecked():
            self.extra = 4
        elif self.quick_delivery_radio.isChecked():
            self.extra = 5
        elif self.recom_radio.isChecked():
            self.extra = 6

    def SetLinkSourcing(self):
        if self.enable_link_sourcing.isChecked():
            self.link_parse = True
            self.enable_crawl_price_only_btn.setEnabled(True)
            self.text.run('링크 소싱이 설정되었습니다.')
        else:
            self.link_parse = False
            self.enable_crawl_price_only_btn.setEnabled(False)
            self.text.run('링크 소싱이 해제되었습니다.')

    def SetEnableOption2(self):
        if self.enable_option2_btn.isChecked():
            self.enable_option2 = True
        else:
            self.enable_option2 = False

    def SetEnableCrawlPriceOnly(self):
        if self.enable_crawl_price_only_btn.isChecked():
            self.enable_crawl_price_only = True
        else:
            self.enable_crawl_price_only = False

    def SetEnableContinuousCrawl(self):
        if self.enable_continuous_btn.isChecked():
            self.enable_continuous_crawl = True
        else:
            self.enable_continuous_crawl = False

    def GetSearchCrawlList(self):
        self.search_item_list = pd.read_excel('./driver/SearchList.xlsx')

    def GetDb(self):
        filename = filedialog.askopenfilename()
        db = pd.read_excel(filename)
        self.item_text = filename.split('/')[-1].split('_')[0]
        self.text.run('파일 이름 : {}'.format(filename.split('/')[-1]))

        return db

    # 알리 크롤링 함수
    def StartCrawl(self):
        self.text.run('--Start work--')
        self.text.run('PGM ver : 24010708')
        self.start_time = self.text.GetTime()
        root = tkinter.Tk()
        root.withdraw()
        self.windows_user_name = os.path.expanduser('~')
        self.sku_id = []
        self.final_cnt = 0
        self.idx = 0
        self.search_url = ""
        self.no_crawl = False
        self.cnt = 0
        self.sku_id = []
        self.arrange = 0
        self.product_main_css = ''
        self.new_format = False

        if self.discount_per_limit.text() != "":
            try:
                self.dc_per = float(self.discount_per_limit.text())
            except:
                self.text.run('할인율을 정확히 입력해주세요. 소싱이 종료됩니다.')
                return Result.PASS
        else:
            self.dc_per = 100.0

        if self.page_min.text() != "" and self.page_max.text() != "":
            self.page_min_num = int(self.page_min.text())
            self.page_max_num = int(self.page_max.text())
            self.i = self.page_min_num - 1
            self.cnt_page = (self.page_max_num - self.page_min_num) + 1
        else:
            self.page_min_num = 1
            self.page_max_num = 1
            self.i = 0
            self.cnt_page = 1

        self.tb = pd.read_excel('./driver/sheet_reference.xlsx')
        self.columns = list(self.tb.columns)
        self.wb = openpyxl.Workbook()
        self.sheet = self.wb.active
        self.sheet.append(self.columns)

        if self.enable_continuous_crawl == True:
            self.GetSearchCrawlList()
            try:
                loop_cnt = len(self.search_item_list)
            except:
                loop_cnt = 0
                self.text.run('연속데이터 수집엑셀의 검색어가 들어가있는지 확인바랍니다.')
                return
        else:
            loop_cnt = 1

        for i in range(loop_cnt):
            if self.enable_continuous_crawl == True:
                search_item = self.search_item_list.iloc[i][0]
                self.SearchItem(search_item)
            else:
                search_item = ''
            ret = self.CrawlDataWithItemName(search_item)
            if ret == Result.FAIL:
                while True:
                    ret = self.Retry(search_item)
                    if ret == Result.PASS:
                        break
        
        self.detail_db = []

    # 알리 URL 오픈
    @pyqtSlot()
    def OpenUrl(self):
        # try:
        #     shutil.rmtree(r"c:\chrometemp")  #쿠키 / 캐쉬파일 삭제
        # except FileNotFoundError:
        #     pass

        try:
            subprocess.Popen(r'C:\Program Files\Google\Chrome\Application\chrome.exe --remote-debugging-port=9225 --user-data-dir="C:\chrometemp"') # 디버거 크롬 구동
        except:
            subprocess.Popen(r'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe --remote-debugging-port=9225 --user-data-dir="C:\chrometemp"') # 디버거 크롬 구동
        
        self.options = webdriver.ChromeOptions()
        user_agent = "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.83 Safari/537.36"
        self.options.add_argument('user-agent=' + user_agent)
        self.options.add_experimental_option("debuggerAddress", "127.0.0.1:9225")

        # 크롬 버전을 확인하여 버전이 안맞으면 자동으로 업데이트 하여 설치해주는 옵션       
        self.driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=self.options)
        self.driver.implicitly_wait(10)
        
        # 속도 향상을 위한 옵션 해제
        self.options.add_argument("disable-gpu") 
        self.options.add_argument("disable-infobars")
        self.options.add_argument("--disable-extensions")
        prefs = {'profile.default_content_setting_values': {'cookies' : 2, 'images': 2, 'plugins' : 2, 'popups': 2, 'geolocation': 2, 'notifications' : 2, 'auto_select_certificate': 2, 'fullscreen' : 2, 'mouselock' : 2, 'mixed_script': 2, 'media_stream' : 2, 'media_stream_mic' : 2, 'media_stream_camera': 2, 'protocol_handlers' : 2, 'ppapi_broker' : 2, 'automatic_downloads': 2, 'midi_sysex' : 2, 'push_messaging' : 2, 'ssl_cert_decisions': 2, 'metro_switch_to_desktop' : 2, 'protected_media_identifier': 2, 'app_banner': 2, 'site_engagement' : 2, 'durable_storage' : 2}}   
        #self.options.add_experimental_option('prefs', prefs)
        # 크롬 브라우저와 셀레니움을 사용하면서 발생되는 '시스템에 부착된 장치가 작동하지 않습니다.' 라는 크롬 브라우저의 버그를 조치하기 위한 코드. 
        self.options.add_experimental_option("excludeSwitches", ["enable-logging"])

        # 윈도우 사이즈 맥스로 키우기
        self.driver.maximize_window()
        self.driver.get('https://ko.aliexpress.com/')
        time.sleep(1)
        pyautogui.press('f12')
        time.sleep(2)
        pyautogui.press('f12')

        self.text.run('알리익스프레스 URL open 완료')
        self.ac = ActionChains(self.driver)  # 셀레니움 동작을 바인딩 하여 동작 할 수 있게 하는 모듈                    

        time.sleep(self.process_delay)

    def SearchItem(self, search_item=''):
        if search_item == '' or search_item == False:
            self.item_text = self.item_name.text()
        else:
            self.item_text = search_item

        self.ClickSearchButton()

    def CrawlDataWithItemName(self, search_item):
        last_tab = self.driver.window_handles[-1]
        self.driver.switch_to.window(window_name=last_tab)
        time.sleep(self.process_delay)

        if self.restart == False:
            self.j = 0
            self.final_cnt = 0
        else:
            #self.driver.get(self.search_url)
            self.driver.refresh()
            time.sleep(self.process_delay)
        
        if self.link_parse == True:
            self.detail_db = self.GetDb()
            max_cnt = len(self.detail_db.iloc[:, 13])
            idx = 0
            for url in self.detail_db.iloc[:, 13]:
                self.driver.get(url)
                self.search_url = url
                self.CrawlDataFromFile(max_cnt, idx + 1)
                idx += 1
            return Result.PASS

        if self.restart == False:
            WebDriverWait(self.driver, 50).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#root')))
        
        if search_item == '':
            self.GetItemName()
        else:
            self.item_text = search_item

        if self.enable_continuous_crawl == True:
            free_deliever = '무료 배송'
            click_category = WebDriverWait(self.driver, 2).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#root > div.root--container--2gVZ5S0.root--newRoot--2-6FirH.search-root-cls > div > div.refine2023--refine--3SE-006'))).text.split('\n')
            try:
                correct_idx = [i for i in range(len(click_category)) if free_deliever in click_category[i]][0]
            except:
                self.text.run('{}을 클릭하지 못했습니다.'.format(free_deliever))
                pass
            
            # 무료 배송
            try:
                WebDriverWait(self.driver, 2).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#root > div.root--container--2gVZ5S0.root--newRoot--2-6FirH.search-root-cls > div > div.refine2023--refine--3SE-006 > div:nth-child(1) > div.collSelect--content--35jau6_ > span > span:nth-child({})'.format(correct_idx)))).click()
                time.sleep(5)
            except:
                self.text.run('{}을 클릭하지 못했습니다.'.format(free_deliever))
                pass
            # 별점 네개 이상
            try:
                WebDriverWait(self.driver, 2).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#root > div.root--container--2gVZ5S0.root--newRoot--2-6FirH.search-root-cls > div > div.refine2023--refine--3SE-006 > div:nth-child(5) > div.collSelect--content--35jau6_ > span > span'))).click()
                time.sleep(5)
            except:
                self.text.run('별점 네개 이상을 클릭하지 못했습니다.')
                pass

        ret = self.InitializeSettingOnPage()
        if ret == Result.FAIL:
            ret = self.InitializeSettingOnPage()
        elif ret == Result.PAGE_MISMATCH:
            self.final_cnt = 0
            self.idx = 0
            self.j = 0
            self.i = 0
            self.sheet = []
            self.wb = openpyxl.Workbook()
            self.sheet = self.wb.active
            self.sheet.append(self.columns)

            return Result.PASS
        
        while True:
            ret = self.CrawlData()
            if ret == Result.PASS:
                break
        
        self.final_cnt = 0
        self.idx = 0
        self.j = 0
        self.i = 0
        self.sheet = []
        self.wb = openpyxl.Workbook()
        self.sheet = self.wb.active
        self.sheet.append(self.columns)
        
        return Result.PASS

    def CrawlDetailSourcing(self, url):
        if self.restart == False:
            WebDriverWait(self.driver, 50).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#header > div')))
        
        try:
            link_name = url.split('wholesale-')[1].split('.html')[0]
        except:
            try:
                link_name = url.split('SearchText=')[1]
                if '&ltype=wholesale' in link_name:
                    link_name = link_name.split('&ltype=wholesale')[0]
            except:
                try:
                    link_name = url.split('.html')[0].split('/')[-1]
                except:
                    link_name = ''
        self.item_text = parse.unquote(link_name)
        self.SearchItem()
        ret = self.InitializeSettingOnPage()
        if ret != Result.PASS:
            for i in range(2):
                self.driver.refresh()
                time.sleep(5)
                ret = self.InitializeSettingOnPage()
                if ret == Result.PASS:
                    break
            if ret != Result.FAIL:
                self.text.run('페이지 세팅 초기화에 실패했습니다. 프로그램 종료 후 재시도 바랍니다.')
                return Result.FAIL
            
        while True:
            ret = self.CrawlData()
            if ret == Result.PASS:
                break

        self.final_cnt = 0
        self.idx = 0
        self.j = 0
        self.i = 0
        self.sheet = []
        self.wb = openpyxl.Workbook()
        self.sheet = self.wb.active
        self.sheet.append(self.columns)

        return Result.PASS

    def InitializeSettingOnPage(self):
        self.close_page_num = 1
        if self.extra == 0 or self.extra == 1:
            time.sleep(2)
            # 바둑판 배열로 정렬
            if self.restart == False:
                try:
                    #WebDriverWait(self.driver, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR, '#root > div > div.page-content > div.main-content > div.right-menu > div > div.top-container > div.top-refine > div.sort > div.none-rtl.display-mode > svg:nth-child(2)'))).click()
                    WebDriverWait(self.driver, 5).until(EC.presence_of_element_located((By.XPATH, '//*[@id="root"]/div[1]/div/div[2]/div[1]/div/div/div[2]/div/div[1]/span[2]'))).click()
                except:
                    self.text.run('바둑판 배열 클릭에 실패했습니다.')
                    self.CloseItemPage()
                    return Result.FAIL

                # 메인화면인지 확인
                try:
                    WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="root"]/div[1]/div/div[2]')))        
                except:
                    self.text.run('바둑판 배열 클릭에 실패했습니다.')
                    self.CloseItemPage()
                    return Result.FAIL

        if self.extra == 6:
            last_tab = self.driver.window_handles[-1]
            self.driver.switch_to.window(window_name=last_tab)
            time.sleep(self.process_delay)
            self.close_page_num = 2

        # 페이지 스크롤 최대치로 내리기
        cnt = 0
        while cnt < 10:
            ret = self.ScrollPageDown(True)
            ret = self.SlideNetworkCheck()
            if ret == Result.FAIL:
                self.text.run('슬라이드바 체크에 실패했습니다.')
                self.CloseItemPage()
                self.cnt += 1
                return Result.FAIL
            elif ret == Result.RETRY:
                self.driver.refresh()
                time.sleep(3)
                cnt += 1
            else:
                break
        
        if cnt == 10:
            self.text.run('슬라이드바 체크에 실패했습니다.')
            self.CloseItemPage()
            self.cnt += 1
            return Result.FAIL

        try:
            self.max_page = int(WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div.root--container--2gVZ5S0.root--newRoot--2-6FirH.search-root-cls > div > div.rightContent2023--rightContainer--2abV4r5 > div.cards2023--pagination--1-0Grbh > ul > li.comet-pagination-options > div')))[0].text.split('/')[1].split('확인하다')[0])
            if self.max_page < self.page_min_num:
                self.i = self.max_page - 1

            page_input = WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div.root--container--2gVZ5S0.root--newRoot--2-6FirH.search-root-cls > div > div.rightContent2023--rightContainer--2abV4r5 > div.cards2023--pagination--1-0Grbh > ul > li.comet-pagination-options > div > input[type=text]')))[0]
            goto_page = WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div.root--container--2gVZ5S0.root--newRoot--2-6FirH.search-root-cls > div > div.rightContent2023--rightContainer--2abV4r5 > div.cards2023--pagination--1-0Grbh > ul > li.comet-pagination-options > div > button')))[0]
            self.ac.move_to_element(page_input).send_keys_to_element(page_input, self.page_min_num).pause(2).perform()
            goto_page.click()
            time.sleep(5)
            
            ret = self.ScrollPageDown(True)
        except:
            self.text.run('검색한 상품의 총 페이지수가 설정한 페이지 범위와 맞지 않습니다. 다시 설정 후 시도해주세요.')
            return Result.PAGE_MISMATCH
        
        self.num_temp = 0
        self.sub_idx = 0
        self.id_list = []
        if self.extra == 0 or self.extra == 1:
            try:
                #temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="root"]/div/div/div[2]/div/div[2]/div[3]/a[1]/div[1]/img')))[0]
                self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#card-list > div:nth-child(1)')))[0]
            except:
                try:
                    self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div > div.main-content > div.right-menu > div > div.JIIxO > a:nth-child(1)')))[0]
                    self.sub_idx = 1
                except:
                    self.id_list = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="recyclerview"]')))[0].get_attribute('innerHTML').split('div id="')[1:]
                    for i in range(len(self.id_list)):
                        self.id_list[i] = self.id_list[i].split('" data-spm')[0]
                    num_list = 1
                    row_num = 2
                    self.sub_idx = 2
                self.num_temp = 1
        elif self.extra == 2:
            # 슈퍼딜
            try:
                self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="recyclerview"]/div/div[5]/div/div[1]/div/div[1]/img')))[0]
                self.num_temp = 2
                self.item_text = '슈퍼딜'
            except:
                self.text.run('슈퍼딜 상품이 매진되었습니다.')
                return Result.PASS
        elif self.extra == 3:
            # 신규 쿠폰
            text = self.driver.find_element(By.CSS_SELECTOR, '#root > div > div > div:nth-child(2)').get_attribute('innerHTML').split('cursor: pointer;">')
            for i in range(len(text)):
                text[i] = text[i].split('</')[0]
                if '<div' in text[i] or '' == text[i]:
                    continue
                else:
                    self.item_text = text[i]
                    break
            self.num_temp = 3
        elif self.extra == 4:
            # 꽁돈대첩
            try:
                self.id_list = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="recyclerview"]')))[0].get_attribute('innerHTML').split('div id="')[1:]
                for i in range(len(self.id_list)):
                    self.id_list[i] = self.id_list[i].split('" data-spm')[0]
                self.num_temp = 4
                num_list = 1
                row_num = 2
                self.item_text = '꽁돈대첩'
            except:
                self.text.run('지원하지 않는 페이지입니다.')
                return Result.PASS
        elif self.extra == 5:
            # 신규 쿠폰
            try:
                self.id_list = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="recyclerview"]')))[0].get_attribute('innerHTML').split('div id="')[1:]
                for i in range(len(self.id_list)):
                    self.id_list[i] = self.id_list[i].split('" data-spm')[0]
                self.num_temp = 5
                num_list = 1
                row_num = 2
                self.item_text = '깜짝배송'
            except:
                self.text.run('지원하지 않는 페이지입니다.')
                return Result.PASS
        
        elif self.extra == 6:
            # 추천 수집
            try:
                self.id_list = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div > div.cateWaterFall--popularContent--suhru1n > div.cateWaterFall--categoryFallContainer--6lamXph > div > div:nth-child(1)')))[0]
                self.num_temp = 6
                self.item_text = '추천상품'
            except:
                self.text.run('지원하지 않는 페이지입니다.')
                return Result.PASS
            
        return Result.PASS

    def CrawlData(self):
        if self.cnt == 5:
            self.text.run('{}페이지 {}번째가 마지막 상품입니다.'.format(self.i + 1, self.j + 1))
            self.text.run('크롤링이 완료되었습니다.')
            self.j = 0
            self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
            # 크롬드라이버 종료
            self.end_time = self.text.GetTime()
            diff_time = self.end_time - self.start_time
            self.text.run('--End work--')
            self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
            self.restart = True

            return Result.PASS
        
        self.no_crawl = False
        self.other_page = False
        try:
            self.search_url = self.driver.current_url
        except:
            self.text.run('웹페이지를 새로고침 합니다1.')
            try:
                self.driver.refresh()
                time.sleep(5)
                self.driver.execute_script("window.scrollTo(0, 0)")
                time.sleep(2)
            except:
                self.text.run('{}페이지 {}번째 상품을 재클릭합니다'.format(self.i + 1, self.j + 1))
                last_tab = self.driver.window_handles[-1]
                self.driver.switch_to.window(window_name=last_tab)
                time.sleep(self.process_delay)
        try:
            #temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="root"]/div/div[1]/div[2]/div[2]/div/div[2]/div[{}]'.format(str(self.j + 1)))))[0]
            if self.num_temp == 0:
                if self.sub_idx == 0:
                    #temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="root"]/div/div/div[2]/div/div[2]/div[3]/a[{}]/div[1]/img'.format(self.j+1))))[0]
                    self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#card-list > div:nth-child({})'.format(self.j+1))))[0]
                elif self.sub_idx == 1:
                    self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div > div.main-content > div.right-menu > div > div.JIIxO > a:nth-child({})'.format(self.j+1))))[0]
                elif self.sub_idx == 2:
                    if len(self.id_list) > 0:
                        self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="{}"]/div[{}]/div/div[{}]/a'.format(self.id_list[-1], row_num, num_list))))[0]
                        num_list += 1
                        if num_list == 6:
                            row_num += 1
                            num_list = 1
            elif self.num_temp == 1:
                if len(self.id_list) > 0:
                    self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="{}"]/div[{}]/div/div[{}]/a'.format(self.id_list[-1], row_num, num_list))))[0]
                    num_list += 1
                    if num_list == 6:
                        row_num += 1
                        num_list = 1
                else:
                    self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div > div.main-content > div.right-menu > div > div.JIIxO > a:nth-child({})'.format(self.j+1))))[0]
                    
            elif self.num_temp == 2:
                try:
                    self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="recyclerview"]/div/div[5]/div/div[{}]/div/div[1]/img'.format(self.j+1))))[0]
                except:
                    self.driver.find_element(By.CSS_SELECTOR, 'body').send_keys(Keys.END)
                    time.sleep(1)
                    self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="recyclerview"]/div/div[5]/div/div[{}]/div/div[1]/img'.format(self.j+1))))[0]
            elif self.num_temp == 3:
                if self.item_text == 'US $0.01':
                    try:
                        self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="root"]/div/div/div[3]/div[2]/a[{}]'.format(self.j+1))))[0]
                    except:
                        self.driver.find_element(By.CSS_SELECTOR, 'body').send_keys(Keys.END)
                        time.sleep(1)
                        self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="root"]/div/div/div[3]/div[2]/a[{}]'.format(self.j+1))))[0]
                elif self.item_text == 'Coupon':
                    try:
                        self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="root"]/div/div/div[4]/div[4]/div/a[{}]'.format(self.j+1))))[0]
                    except:
                        self.driver.find_element(By.CSS_SELECTOR, 'body').send_keys(Keys.END)
                        time.sleep(1)
                        self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="root"]/div/div/div[4]/div[4]/div/a[{}]'.format(self.j+1))))[0]
                elif self.item_text == '단독 특별가':
                    try:
                        self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="root"]/div/div/div[3]/div[4]/div/a[{}]'.format(self.j+1))))[0]
                    except:
                        self.driver.find_element(By.CSS_SELECTOR, 'body').send_keys(Keys.END)
                        time.sleep(1)
                        self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="root"]/div/div/div[3]/div[4]/div/a[{}]'.format(self.j+1))))[0]
            elif self.num_temp == 4:
                try:
                    self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="{}"]/div[{}]/div/div[{}]/a'.format(self.id_list[-1], row_num, num_list))))[0]
                except:
                    self.driver.find_element(By.CSS_SELECTOR, 'body').send_keys(Keys.END)
                    time.sleep(1)
                    self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="{}"]/div[{}]/div/div[{}]/a'.format(self.id_list[-1], row_num, num_list))))[0]
                num_list += 1
                if num_list == 6:
                    row_num += 1
                    num_list = 1
            elif self.num_temp == 5:
                try:
                    self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="{}"]/div[{}]/div/div[{}]/a'.format(self.id_list[-1], row_num, num_list))))[0]
                except:
                    self.driver.find_element(By.CSS_SELECTOR, 'body').send_keys(Keys.END)
                    time.sleep(1)
                    self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="{}"]/div[{}]/div/div[{}]/a'.format(self.id_list[-1], row_num, num_list))))[0]
                num_list += 1
                if num_list == 6:
                    row_num += 1
                    num_list = 1
            elif self.num_temp == 6:
                try:
                    if self.j == 0:
                        self.driver.execute_script("window.scrollTo(0, 0)")
                        time.sleep(2)
                    self.temp = self.driver.find_element(By.CSS_SELECTOR, '#root > div > div > div.cateWaterFall--popularContent--suhru1n > div.cateWaterFall--categoryFallContainer--6lamXph > div > div:nth-child({}) > div > a'.format(self.j + 1))
                    self.ac.move_to_element(self.temp).pause(0.5).perform()
                    href = self.temp.get_attribute('href')
                    self.driver.execute_script(f"window.open('{href}');")
                    time.sleep(2)
                    last_tab = self.driver.window_handles[-1]
                    self.driver.switch_to.window(window_name=last_tab)
                    time.sleep(1)
                except:
                    self.driver.find_element(By.CSS_SELECTOR, 'body').send_keys(Keys.END)
                    time.sleep(1)
                    self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div > div.cateWaterFall--popularContent--suhru1n > div.cateWaterFall--categoryFallContainer--6lamXph > div > div:nth-child({})'.format(self.i + 1))))[0]
            
            if self.num_temp != 6:
                self.ac.move_to_element(self.temp).pause(0.5).click().perform()
                time.sleep(1)
        except:
            if self.extra == 0 or self.extra == 1:
                try:
                    if self.i == (self.max_page - 1):
                        self.text.run('{}페이지 {}번째가 마지막 상품입니다.'.format(self.i + 1, self.j + 1))
                        self.text.run('크롤링이 완료되었습니다.')
                        self.j = 0
                        self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                        # 크롬드라이버 종료
                        self.end_time = self.text.GetTime()
                        diff_time = self.end_time - self.start_time
                        self.text.run('--End work--')
                        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                        self.restart = True

                        return Result.PASS
                    else:
                        self.text.run('상품명 검색을 재시도 합니다.')
                        self.CloseItemPage()
                        first_tab = self.driver.window_handles[self.close_page_num - 1]
                        self.driver.switch_to.window(window_name=first_tab)
                        self.ClickSearchButton()
                        time.sleep(2)
                        ret = self.ScrollPageDown()
                        if ret == Result.FAIL:
                            self.text.run('웹페이지 로딩에 실패했습니다.')
                            self.CloseItemPage()
                            self.cnt += 1
                            return Result.PASS

                        page_input = WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div.root--container--2gVZ5S0.root--newRoot--2-6FirH.search-root-cls > div > div.rightContent2023--rightContainer--2abV4r5 > div.cards2023--pagination--1-0Grbh > ul > li.comet-pagination-options > div > input[type=text]')))[0]
                        goto_page = WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div.root--container--2gVZ5S0.root--newRoot--2-6FirH.search-root-cls > div > div.rightContent2023--rightContainer--2abV4r5 > div.cards2023--pagination--1-0Grbh > ul > li.comet-pagination-options > div > button')))[0]
                        self.ac.move_to_element(page_input).send_keys_to_element(page_input, self.i+1).pause(2).perform()
                        goto_page.click()
                        time.sleep(5)
                        self.driver.execute_script("window.scrollTo(0, 0)")
                        time.sleep(2)
                        self.cnt += 1

                        # 페이지 스크롤 최대치로 내리기
                        cnt = 0
                        while cnt < 10:
                            ret = self.ScrollPageDown(True)
                            ret = self.SlideNetworkCheck()
                            if ret == Result.FAIL:
                                self.text.run('슬라이드바 체크에 실패했습니다.')
                                self.CloseItemPage()
                                self.cnt += 1
                                return Result.FAIL
                            elif ret == Result.RETRY:
                                self.driver.refresh()
                                time.sleep(3)
                                cnt += 1
                            else:
                                break
                        
                        if cnt == 10:
                            self.text.run('슬라이드바 체크에 실패했습니다.')
                            self.CloseItemPage()
                            self.cnt += 1
                            return Result.FAIL
                        
                        try:
                            if self.num_temp == 0:
                                if self.sub_idx == 0:
                                    self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="card-list"]/div[{}]'.format(self.j+1))))[0]       
                                elif self.sub_idx == 1:
                                    self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div > div.main-content > div.right-menu > div > div.JIIxO > a:nth-child({})'.format(self.j+1))))[0]
                                elif self.sub_idx == 2:
                                    if len(self.id_list) > 0:
                                        self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="{}"]/div[{}]/div/div[{}]/a'.format(self.id_list[-1], row_num, num_list))))[0]
                                        num_list += 1
                                        if num_list == 6:
                                            row_num += 1
                                            num_list = 1
                            elif self.num_temp == 1:
                                if len(self.id_list) > 0:
                                    self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="{}"]/div[{}]/div/div[{}]/a'.format(self.id_list[-1], row_num, num_list))))[0]
                                    num_list += 1
                                    if num_list == 6:
                                        row_num += 1
                                        num_list = 1
                                else:
                                    self.temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div > div.main-content > div.right-menu > div > div.JIIxO > a:nth-child({})'.format(self.j+1))))[0]
                                    
                            self.ac.move_to_element(self.temp).pause(0.5).click().perform()
                            time.sleep(1)
                        except:
                            self.cnt += 1
                except:
                    self.text.run('{}페이지 {}번째가 마지막 상품입니다.'.format(self.i + 1, self.j + 1))
                    self.text.run('크롤링이 완료되었습니다.')
                    self.j = 0
                    self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                    # 크롬드라이버 종료
                    self.end_time = self.text.GetTime()
                    diff_time = self.end_time - self.start_time
                    self.text.run('--End work--')
                    self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                    self.restart = True

                    return Result.PASS
            else:
                self.text.run('{}번째가 마지막 상품입니다.'.format(self.final_cnt))
                self.text.run('크롤링이 완료되었습니다.')
                self.j = 0
                self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                # 크롬드라이버 종료
                self.end_time = self.text.GetTime()
                diff_time = self.end_time - self.start_time
                self.text.run('--End work--')
                self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                self.restart = True

                return Result.PASS
        
        # 알리익스프레스 검색 선택링크주소
        select_url = ''
        while_cnt = 0
        while True:
            last_tab = self.driver.window_handles[-1]
            self.driver.switch_to.window(window_name=last_tab)
            try:
                select_url = self.driver.current_url
            except:
                self.driver.refresh()
                time.sleep(5)
                self.cnt += 1
            if select_url != '':
                break
            elif while_cnt > 5:
                self.text.run('{}페이지 {}번째 아이템의 링크를 가져오는데 실패했습니다.'.format(self.i + 1, self.j + 1))
                self.cnt += 1
                self.CloseItemPage()
                return Result.FAIL
            else:
                while_cnt += 1

        # check if its old format or new format
        if self.new_format == False:
            try:
                WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))
                self.product_main_css = '#root > div > div.product-main'
            except:
                WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root')))
                self.product_main_css = '#root'
                self.new_format = True

        try:
            self.product_main = WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, self.product_main_css)))[0].get_attribute('innerHTML')
        except:
            if (self.extra == 0 or self.extra == 1):
                try:
                    verify_age = WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.pages--title--1LAhwQy')))[0].text
                    if '연령인증' in verify_age:
                        self.text.run('{}페이지 {}번째 상품은 연령인증이 필요한 상품입니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
                        self.CloseItemPage()
                        if self.j == 59 and (self.extra == 0 or self.extra == 1):
                            if (self.i + 1) == self.page_max_num:
                                self.final_cnt += 1
                                if (self.extra == 0 or self.extra == 1):
                                    self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                                self.text.run('마지막 아이템입니다.')
                                self.text.run('크롤링이 완료되었습니다.')
                                self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                                # 크롬드라이버 종료
                                self.end_time = self.text.GetTime()
                                diff_time = self.end_time - self.start_time
                                self.text.run('--End work--')
                                self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                                self.restart = True

                                return Result.PASS
                            elif (self.i + 1) == self.max_page:
                                self.final_cnt += 1
                                if (self.extra == 0 or self.extra == 1):
                                    self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                                self.text.run('마지막 아이템입니다.')
                                self.text.run('크롤링이 완료되었습니다.')
                                self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                                # 크롬드라이버 종료
                                self.end_time = self.text.GetTime()
                                diff_time = self.end_time - self.start_time
                                self.text.run('--End work--')
                                self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                                self.restart = True

                                return Result.PASS
                            else:
                                self.ClickNextPage()

                                self.j = 0
                                self.i += 1
                                time.sleep(self.process_delay)
                        else:
                            self.j += 1
                            self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))

                        return Result.FAIL
                except:
                    try:
                        #self.product_main = WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.mainWrap--mainWrap--3boV-yO')))[0].get_attribute('innerHTML')
                        #self.other_page = True
                        self.text.run('{}페이지 {}번째 상품은 다른 포맷의 상품입니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
                        self.CloseItemPage()
                        if self.j == 59 and (self.extra == 0 or self.extra == 1):
                            if (self.i + 1) == self.page_max_num:
                                self.final_cnt += 1
                                if (self.extra == 0 or self.extra == 1):
                                    self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                                self.text.run('마지막 아이템입니다.')
                                self.text.run('크롤링이 완료되었습니다.')
                                self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                                # 크롬드라이버 종료
                                self.end_time = self.text.GetTime()
                                diff_time = self.end_time - self.start_time
                                self.text.run('--End work--')
                                self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                                self.restart = True

                                return Result.PASS
                            elif (self.i + 1) == self.max_page:
                                self.final_cnt += 1
                                if (self.extra == 0 or self.extra == 1):
                                    self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                                self.text.run('마지막 아이템입니다.')
                                self.text.run('크롤링이 완료되었습니다.')
                                self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                                # 크롬드라이버 종료
                                self.end_time = self.text.GetTime()
                                diff_time = self.end_time - self.start_time
                                self.text.run('--End work--')
                                self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                                self.restart = True

                                return Result.PASS
                            else:
                                self.ClickNextPage()

                                self.j = 0
                                self.i += 1
                                time.sleep(self.process_delay)
                        else:
                            self.j += 1
                            self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                        
                        return Result.FAIL
                    except:
                        self.text.run('이미지 클릭에 실패했습니다.')
                        self.cnt += 1
                        self.CloseItemPage()
                        return Result.FAIL
            else:
                self.driver.find_element(By.CSS_SELECTOR, 'body').send_keys(Keys.END)
                time.sleep(1)
                return Result.PASS
            
        # check if its not sale
        try:
            is_sale = self.product_main.split('message--wrap--TCbfZuF')[1].split('</div')[0].replace('>', '').replace('"','')
            if '더 이상 사용할 수 없습니다' in is_sale:
                self.text.run('{}페이지 {}번째 상품은 현재 판매되지 않는 상품입니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
                self.CloseItemPage()
                if self.j == 59 and (self.extra == 0 or self.extra == 1):
                    if (self.i + 1) == self.page_max_num:
                        self.final_cnt += 1
                        if (self.extra == 0 or self.extra == 1):
                            self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                        self.text.run('마지막 아이템입니다.')
                        self.text.run('크롤링이 완료되었습니다.')
                        self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                        # 크롬드라이버 종료
                        self.end_time = self.text.GetTime()
                        diff_time = self.end_time - self.start_time
                        self.text.run('--End work--')
                        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                        self.restart = True

                        return Result.PASS
                    elif (self.i + 1) == self.max_page:
                        self.final_cnt += 1
                        if (self.extra == 0 or self.extra == 1):
                            self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                        self.text.run('마지막 아이템입니다.')
                        self.text.run('크롤링이 완료되었습니다.')
                        self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                        # 크롬드라이버 종료
                        self.end_time = self.text.GetTime()
                        diff_time = self.end_time - self.start_time
                        self.text.run('--End work--')
                        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                        self.restart = True

                        return Result.PASS
                    else:
                        self.ClickNextPage()

                        self.j = 0
                        self.i += 1
                        time.sleep(self.process_delay)
                else:
                    self.j += 1
                    self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                
                return Result.FAIL
        except:
            pass
        
        # Check if it could not delivery to Korea
        try:
            is_delivery = self.product_main.find('이 상품은 고객님의 배송지로 배송이 불가능합니다.')
            if is_delivery != -1:
                self.text.run('{}페이지 {}번째 상품은 현재 판매되지 않는 상품입니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
                self.CloseItemPage()
                if self.j == 59 and (self.extra == 0 or self.extra == 1):
                    if (self.i + 1) == self.page_max_num:
                        self.final_cnt += 1
                        if (self.extra == 0 or self.extra == 1):
                            self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                        self.text.run('마지막 아이템입니다.')
                        self.text.run('크롤링이 완료되었습니다.')
                        self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                        # 크롬드라이버 종료
                        self.end_time = self.text.GetTime()
                        diff_time = self.end_time - self.start_time
                        self.text.run('--End work--')
                        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                        self.restart = True

                        return Result.PASS
                    elif (self.i + 1) == self.max_page:
                        self.final_cnt += 1
                        if (self.extra == 0 or self.extra == 1):
                            self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                        self.text.run('마지막 아이템입니다.')
                        self.text.run('크롤링이 완료되었습니다.')
                        self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                        # 크롬드라이버 종료
                        self.end_time = self.text.GetTime()
                        diff_time = self.end_time - self.start_time
                        self.text.run('--End work--')
                        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                        self.restart = True

                        return Result.PASS
                    else:
                        self.ClickNextPage()

                        self.j = 0
                        self.i += 1
                        time.sleep(self.process_delay)
                else:
                    self.j += 1
                    self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                
                return Result.FAIL
        except:
            pass

        temp = []
        if self.new_format == True:
            temp1 = self.product_main.split('sku-item--image--mXsHo3h')[1:]
            for i in range(len(temp1)):
                if 'img src=' in temp1[i] or 'class="product-quantity' in temp1[i]:
                    temp.append(temp1[i])
        else:
            temp1 = self.product_main.split('title=')[1:]
            for i in range(len(temp1)):
                if 'img src=' in temp1[i] or 'class="product-quantity' in temp1[i]:
                    temp.append(temp1[i])

        if self.skip_option == True:
            if len(temp) > 1:
                self.text.run('{}페이지 {}번째 아이템은 옵션이 있는 상품입니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
                self.CloseItemPage()
                if self.j == 59 and (self.extra == 0 or self.extra == 1):
                    if (self.i + 1) == self.page_max_num:
                        self.final_cnt += 1
                        if (self.extra == 0 or self.extra == 1):
                            self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                        self.text.run('마지막 아이템입니다.')
                        self.text.run('크롤링이 완료되었습니다.')
                        self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                        # 크롬드라이버 종료
                        self.end_time = self.text.GetTime()
                        diff_time = self.end_time - self.start_time
                        self.text.run('--End work--')
                        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                        self.restart = True

                        return Result.PASS
                    elif (self.i + 1) == self.max_page:
                        self.final_cnt += 1
                        if (self.extra == 0 or self.extra == 1):
                            self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                        self.text.run('마지막 아이템입니다.')
                        self.text.run('크롤링이 완료되었습니다.')
                        self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                        # 크롬드라이버 종료
                        self.end_time = self.text.GetTime()
                        diff_time = self.end_time - self.start_time
                        self.text.run('--End work--')
                        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                        self.restart = True

                        return Result.PASS
                    else:
                        self.ClickNextPage()
                        self.j = 0
                        self.i += 1
                        time.sleep(self.process_delay)
                else:
                    self.j += 1
                    self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))

                return Result.FAIL
            
        time.sleep(1)
        
        # 페이지 스크롤 최대치로 내리기
        cnt = 0
        while cnt < 10:
            ret = self.ScrollPageDown(True)
            ret = self.SlideNetworkCheck()
            if ret == Result.FAIL:
                self.text.run('슬라이드바 체크에 실패했습니다.')
                self.CloseItemPage()
                self.cnt += 1
                return Result.FAIL
            elif ret == Result.RETRY:
                self.driver.refresh()
                time.sleep(3)
                cnt += 1
            else:
                break
        
        if cnt == 10:
            self.text.run('슬라이드바 체크에 실패했습니다.')
            self.CloseItemPage()
            self.cnt += 1
            return Result.FAIL
        
        if self.new_format == True:
            self.driver.execute_script("window.scrollTo(0, 0)")
            time.sleep(0.5)
            try:
                WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#nav-description > div:nth-child(2) > button')))[0].click()
            except:
                pass
            time.sleep(0.5)
            ret = self.ScrollPageDown()

        # 선택제품가격
        ret, self.price, self.price_ori = self.GetPrice()
        if ret != Result.PASS:
            if self.no_crawl == True:
                try:
                    verify_age = WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.pages--title--1LAhwQy')))[0].text
                    if '연령인증' in verify_age:
                        self.text.run('{}페이지 {}번째 상품은 연령인증이 필요한 상품입니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
                        self.CloseItemPage()
                        if self.j == 59 and (self.extra == 0 or self.extra == 1):
                            if (self.i + 1) == self.page_max_num:
                                self.final_cnt += 1
                                if (self.extra == 0 or self.extra == 1):
                                    self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                                self.text.run('마지막 아이템입니다.')
                                self.text.run('크롤링이 완료되었습니다.')
                                self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                                # 크롬드라이버 종료
                                self.end_time = self.text.GetTime()
                                diff_time = self.end_time - self.start_time
                                self.text.run('--End work--')
                                self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                                self.restart = True

                                return Result.PASS
                            elif (self.i + 1) == self.max_page:
                                self.final_cnt += 1
                                if (self.extra == 0 or self.extra == 1):
                                    self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                                self.text.run('마지막 아이템입니다.')
                                self.text.run('크롤링이 완료되었습니다.')
                                self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                                # 크롬드라이버 종료
                                self.end_time = self.text.GetTime()
                                diff_time = self.end_time - self.start_time
                                self.text.run('--End work--')
                                self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                                self.restart = True

                                return Result.PASS
                            else:
                                self.ClickNextPage()

                                self.j = 0
                                self.i += 1
                                time.sleep(self.process_delay)
                        else:
                            self.j += 1
                            self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))

                        return Result.FAIL
                except:
                    self.text.run('{}페이지 {}번째 아이템의 가격 수집에 실패했습니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
            else:
                self.text.run('{}페이지 {}번째 아이템은 할인율이 {}%를 초과합니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1, int(self.dc_per)))

            self.CloseItemPage()
            if self.j == 59 and (self.extra == 0 or self.extra == 1):
                if (self.i + 1) == self.page_max_num:
                    self.final_cnt += 1
                    if (self.extra == 0 or self.extra == 1):
                        self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                    self.text.run('마지막 아이템입니다.')
                    self.text.run('크롤링이 완료되었습니다.')
                    self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                    # 크롬드라이버 종료
                    self.end_time = self.text.GetTime()
                    diff_time = self.end_time - self.start_time
                    self.text.run('--End work--')
                    self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                    self.restart = True

                    return Result.PASS
                elif (self.i + 1) == self.max_page:
                    self.final_cnt += 1
                    if (self.extra == 0 or self.extra == 1):
                        self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                    self.text.run('마지막 아이템입니다.')
                    self.text.run('크롤링이 완료되었습니다.')
                    self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                    # 크롬드라이버 종료
                    self.end_time = self.text.GetTime()
                    diff_time = self.end_time - self.start_time
                    self.text.run('--End work--')
                    self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                    self.restart = True

                    return Result.PASS
                else:
                    self.ClickNextPage()
                    self.j = 0
                    self.i += 1
                    time.sleep(self.process_delay)
            else:
                self.j += 1
                self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))

            return Result.FAIL
        
        self.windows_user_name = os.path.expanduser('~')

        # 리뷰 수
        self.review = self.GetReview()

        # 판매 개수
        self.sold_cnt = self.GetSoldCount()

        # 상품제목
        self.title = self.GetTitle()

        # 대표이미지
        self.img_url = self.GetRepresentImage(self.other_page)

        # 동영상 링크
        self.video_link = self.GetVideoLink()

        # 배송비/배송방법
        ret, self.delivery_for, self.delivery_fee = self.GetDeliveryInfo()
        if ret == Result.FAIL:
            self.text.run('{}페이지 {}번째 아이템의 배송정보 획득에 실패했습니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
            self.CloseItemPage()
            if self.j == 59 and (self.extra == 0 or self.extra == 1):
                if (self.i + 1) == self.page_max_num:
                    self.final_cnt += 1
                    if (self.extra == 0 or self.extra == 1):
                        self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                    self.text.run('마지막 아이템입니다.')
                    self.text.run('크롤링이 완료되었습니다.')
                    self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                    # 크롬드라이버 종료
                    self.end_time = self.text.GetTime()
                    diff_time = self.end_time - self.start_time
                    self.text.run('--End work--')
                    self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                    self.restart = True

                    return Result.PASS
                elif (self.i + 1) == self.max_page:
                    self.final_cnt += 1
                    if (self.extra == 0 or self.extra == 1):
                        self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                    self.text.run('마지막 아이템입니다.')
                    self.text.run('크롤링이 완료되었습니다.')
                    self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                    # 크롬드라이버 종료
                    self.end_time = self.text.GetTime()
                    diff_time = self.end_time - self.start_time
                    self.text.run('--End work--')
                    self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                    self.restart = True

                    return Result.PASS
                else:
                    self.ClickNextPage()
                    self.j = 0
                    self.i += 1
                    time.sleep(self.process_delay)
            else:
                self.j += 1
                self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))

            return Result.FAIL

        # 판매자상품코드
        self.sku = self.GetSkuId()
        if self.no_crawl == True:
            self.CloseItemPage()
            if self.j == 59 and (self.extra == 0 or self.extra == 1):
                if (self.i + 1) == self.page_max_num:
                    self.final_cnt += 1
                    if (self.extra == 0 or self.extra == 1):
                        self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                    self.text.run('마지막 아이템입니다.')
                    self.text.run('크롤링이 완료되었습니다.')
                    self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                    # 크롬드라이버 종료
                    self.end_time = self.text.GetTime()
                    diff_time = self.end_time - self.start_time
                    self.text.run('--End work--')
                    self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                    self.restart = True

                    return Result.PASS
                elif (self.i + 1) == self.max_page:
                    self.final_cnt += 1
                    if (self.extra == 0 or self.extra == 1):
                        self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                    self.text.run('마지막 아이템입니다.')
                    self.text.run('크롤링이 완료되었습니다.')
                    self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                    # 크롬드라이버 종료
                    self.end_time = self.text.GetTime()
                    diff_time = self.end_time - self.start_time
                    self.text.run('--End work--')
                    self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                    self.restart = True

                    return Result.PASS
                else:
                    self.ClickNextPage()
                    self.j = 0
                    self.i += 1
                    time.sleep(self.process_delay)
            else:
                self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                self.j += 1
            return Result.FAIL

        # 상세 페이지
        self.detail_imgs = self.GetDetailImages()
        self.detail_imgs = '\n'.join(self.detail_imgs)
        
        option1_list = []
        option1_total = []
        option2_list = []
        prices = []

        # 옵션1
        if self.new_format == True:
            option1_total, option1_list, option2_list, prices = self.GetOption1NewFormat()
        else:
            option1_total, option1_list, option2_list, prices = self.GetOption1()
        if self.no_crawl == True:
            self.CloseItemPage()
            if self.j == 59 and (self.extra == 0 or self.extra == 1):
                if (self.i + 1) == self.page_max_num:
                    self.final_cnt += 1
                    if (self.extra == 0 or self.extra == 1):
                        self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                    self.text.run('마지막 아이템입니다.')
                    self.text.run('크롤링이 완료되었습니다.')
                    self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                    # 크롬드라이버 종료
                    self.end_time = self.text.GetTime()
                    diff_time = self.end_time - self.start_time
                    self.text.run('--End work--')
                    self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                    self.restart = True

                    return Result.PASS
                elif (self.i + 1) == self.max_page:
                    self.final_cnt += 1
                    if (self.extra == 0 or self.extra == 1):
                        self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                    self.text.run('마지막 아이템입니다.')
                    self.text.run('크롤링이 완료되었습니다.')
                    self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                    # 크롬드라이버 종료
                    self.end_time = self.text.GetTime()
                    diff_time = self.end_time - self.start_time
                    self.text.run('--End work--')
                    self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                    self.restart = True

                    return Result.PASS
                else:
                    self.ClickNextPage()
                    self.j = 0
                    self.i += 1
                    time.sleep(self.process_delay)
            else:
                self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                self.j += 1
            return Result.FAIL

        option1_list = '\n'.join(option1_list)
        option1_total = '\n'.join(option1_total)
        if len(option2_list) > 0:
            option2_list = '\n'.join(option2_list)
        else:
            option2_list = ''
        if self.price == "暂无报价":
            price_final = "暂无报价"
        elif len(prices) > 1:
            price_final = '{}-{}'.format(min(prices), max(prices))
        else:
            price_final = self.price
        self.sheet.append([self.item_text, self.price_ori, self.price, self.review, self.sold_cnt, '','','','', self.video_link, self.delivery_for, self.delivery_fee, self.search_url, 
                           select_url, price_final, self.title, self.img_url, option1_list, option2_list, option1_total, self.detail_imgs, self.sku])
        self.SaveFile()
        self.CloseItemPage()

        if (self.extra == 0 or self.extra == 1):
            self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
        if self.j == 59 and (self.extra == 0 or self.extra == 1):
            if (self.i + 1) == self.page_max_num:
                self.final_cnt += 1
                if (self.extra == 0 or self.extra == 1):
                    self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                self.text.run('마지막 아이템입니다.')
                self.text.run('크롤링이 완료되었습니다.')
                self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                # 크롬드라이버 종료
                self.end_time = self.text.GetTime()
                diff_time = self.end_time - self.start_time
                self.text.run('--End work--')
                self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                self.restart = True

                return Result.PASS
            elif (self.i + 1) == self.max_page:
                self.final_cnt += 1
                if (self.extra == 0 or self.extra == 1):
                    self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                self.text.run('마지막 아이템입니다.')
                self.text.run('크롤링이 완료되었습니다.')
                self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                # 크롬드라이버 종료
                self.end_time = self.text.GetTime()
                diff_time = self.end_time - self.start_time
                self.text.run('--End work--')
                self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                self.restart = True

                return Result.PASS
            else:
                ret = self.ClickNextPage()
                if ret == Result.PASS:
                    self.text.run('{}페이지가 마지막 페이지입니다.'.format(self.i + 1))
                    self.text.run('크롤링이 완료되었습니다.')
                    self.j = 0
                    self.final_cnt += 1
                    self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                    # 크롬드라이버 종료
                    self.end_time = self.text.GetTime()
                    diff_time = self.end_time - self.start_time
                    self.text.run('--End work--')
                    self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                    self.restart = True

                    return Result.PASS
                else:
                    self.j = 0
                    self.i += 1
                    self.final_cnt += 1
                    self.idx += 1
                    time.sleep(self.process_delay)
                    self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                    return Result.FAIL 

        self.final_cnt += 1
        self.idx += 1
        self.j += 1
        self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))

    def GetPrice(self):
        ret = Result.PASS
        price = ''
        price_ori = ''

        # check if its not for sale
        try:
            is_sale = self.product_main.split('item-not-found-rcmd-title')[1].split('.</span')[0].split('">')[1]
            if '죄송합니다. 찾으시는 페이지가 없습니다' in is_sale:
                self.no_crawl = True
                ret = -1
                return ret, price, price_ori
            else:
                pass
        except:
            pass

        if self.new_format == True:            
            self.price_tag = 'price--current--H7sGzqb product-price-current'
            self.price_tag_ori = 'price--originalText--Zsc6sMv'
            try:
                price_temp1 = self.product_main.split(self.price_tag)[1].split('US $')[1].split('--VKKip5c')[1:]
                price_temp2 = self.product_main.split(self.price_tag)[1].split('US $')[1].split('--Vcv75ku')[1:]
            except:
                price_temp1 = self.product_main.split('--VKKip5c')[1:]
                price_temp2 = self.product_main.split('--Vcv75ku')[2:]
            
            for i in range(len(price_temp1)):
                price += price_temp1[i].split('">')[1].split('</')[0]
            for i in range(len(price_temp2)):
                price += price_temp2[i].split('">')[1].split('</')[0]
            price = price.split('<span')[0].split('<div ')[0].split('</div')[0].replace(',', '')
            try:
                price_ori = self.product_main.split(self.price_tag_ori)[1].split('US $')[1].split('</span')[0].replace(',', '')
            except:
                pass
        else:
            try:
                if self.discount_flag == True:
                    self.price_tag = 'product-price-current'
                    self.price_tag_ori = 'product-price-original'
                else:
                    self.price_tag = 'product-price-original'
                    self.price_tag_ori = 'product-price-current'
                price = self.product_main.split(self.price_tag)[1].split('US $')[1].split('</')[0].replace('"', '').replace(',','').split(' /')[0]
                try:
                    price_ori = self.product_main.split(self.price_tag_ori)[1].split('US $')[1].split('</')[0].replace('"', '').replace(',','').split(' /')[0]
                except:
                    pass
            except:
                try:
                    if self.discount_flag == True:
                        self.price_tag = 'uniform-banner-box-price'
                        self.price_tag_ori = 'uniform-banner-box-discounts'
                    else:
                        self.price_tag = 'uniform-banner-box-discounts'
                        self.price_tag_ori = 'uniform-banner-box-price'
                    price = self.product_main.split(self.price_tag)[1].split('US $')[1].split('</')[0].replace('"', '').replace(',','').split(' /')[0]
                    try:
                        price_ori = self.product_main.split(self.price_tag_ori)[1].split('US $')[1].split('</')[0].replace('"', '').replace(',','').split(' /')[0]
                    except:
                        pass
                except:
                    try:
                        price = self.product_main.split('product-price-value')[1].split('US $')[1].split('</')[0].replace('"', '').replace(',','').split(' /')[0]
                        try:
                            price_ori = self.product_main.split(self.price_tag_ori)[1].split('US $')[1].split('</')[0].replace('"', '').replace(',','').split(' /')[0]
                        except:
                            pass
                    except:
                        self.no_crawl = True
                        ret = Result.FAIL

        if self.no_crawl == False:
            if '-' in price:
                price = float(price.split(' -')[0])
            else:
                try:
                    price = float(price)
                except:
                    try:
                        price_temp = ''
                        temp = self.product_main.split('wJAFI')[1:]
                        for n in range(len(temp)):
                            price_temp += temp[n].split('">')[1].split('<')[0]
                        temp2 = temp[-1].split('"RqgnK">')[1:]
                        for n in range(len(temp2)):
                            price_temp += temp2[n].split("<")[0].replace("'",'')
                        price = float(price_temp)
                    except:
                        self.no_crawl = True
                        ret = Result.FAIL

                        return ret, price, price_ori
        else:
            return ret, price, price_ori

        if price_ori != '':
            if '-' in price_ori:
                price_ori = float(price_ori.split(' -')[0])
            else:
                price_ori = float(price_ori)
        else:
            price_ori = price

        if self.discount_flag == True:
            discounted_price = price
            original_price = price_ori
        else:
            discounted_price = price_ori
            original_price = price

        discount_per = round(100 - (100 * (discounted_price / original_price)))
        if discount_per > int(self.dc_per):
            discounted_price = ''
            original_price = ''
            ret = Result.FAIL

        return ret, discounted_price, original_price
    
    def GetTitle(self):
        try:
            title = self.product_main.split('img alt=')[1].split('" ')[0].replace('"', '')
        except:
            title = self.product_main.split('product-title')[1].split('">')[1].split('<')[0].replace('"', '')

        return title

    def GetRepresentImage(self, flag=False):
        if flag == True:
            img_url = self.product_main.split('--1_7el3W"><img src="')[-1].split('_.webp')[0].split('.jpg_')[0].replace('"','') + '.jpg'
            if '.png' in img_url:
                img_url = img_url.split('_.webp')[0].replace('"','').replace('_50x50.png','').replace('.png', '') + '.png'
            elif '.jpeg' in img_url:
                img_url = img_url.split('_.webp')[0].replace('"','').split('.jpeg')[0].replace('.jpeg', '') + '.jpeg'
        else:
            if self.new_format == True:
                try:
                    img_url = self.product_main.split('pdp-main-image-wrap')[1].split(" src=")[2].split('.jpg')[0].replace('"','') + '.jpg'
                except:
                    img_url = self.product_main.split('image-view--previewWrap--kSHfegR')[1].split(" src=")[2].split('.jpg')[0].replace('"','') + '.jpg'
            else:
                img_url = self.product_main.split('src=')[2].split('_.webp')[0].split('.jpg')[0].replace('_50x50.jpg','').replace('"', '') + '.jpg'
            if '.png' in img_url:
                img_url = img_url.split('_.webp')[0].replace('"','').split('.png')[0].replace('.png', '') + '.png'
            elif '.jpeg' in img_url:
                img_url = img_url.split('_.webp')[0].replace('"','').split('.jpeg')[0].replace('.jpeg', '') + '.jpeg'
            
        return img_url
    
    def GetVideoLink(self):
        try:
            video_temp = self.product_main.split('https://video')[1].split('.mp4')[0]
            if video_temp != '':
                video_link = 'https://video' + video_temp + '.mp4'
        except:
                video_link = ''

        return video_link

    def GetDeliveryInfo(self):
        ret = Result.PASS
        try:
            delivery_temp = self.driver.find_element(By.CSS_SELECTOR, '#root > div > div.pdp-body.pdp-wrap > div > div.pdp-body-top-right > div > div > div.shipping--wrap--Dhb61O7 > div > div.shipping--content--xEqXBXk > div').text
            if '무료 배송' not in delivery_temp:
                delivery_for = '선불'
                delivery_fee = float(delivery_temp.split('$')[1].split('\n')[0].split(' ')[0].replace(' ', ''))
            else:
                delivery_for = '무료'
                delivery_fee = 0
        except:
            return Result.FAIL, '', ''

        return ret, delivery_for, delivery_fee

    def GetReview(self):
        review = ''
        try:
            review = int(self.product_main.split('product-reviewer-reviews black-link')[1].split(' 리뷰')[0].split('">')[1].replace(',', ''))
        except:
            try:
                review = int(self.product_main.split('#nav-review')[1].split(' 리뷰')[0].split('">')[1].split(';')[-1].replace(',', ''))
            except:
                review = ''

        return review

    def GetSoldCount(self):
        sold_cnt = ''
        try:
            sold_cnt = self.product_main.split('product-reviewer-sold')[1].split(' Sold')[0].split('">')[1].replace(',', '').split(' 누적 판매')[0]
        except:
            if len(self.product_main.split(' 누적 판매')) == 1:
                pass
            else:
                try:
                    sold_cnt = self.product_main.split('reviewer--wrap--sPGWrNq')[1].split('" data-pl="product-reviewer"><span>')[1].split('<')[0].split(' 누적 판매')[0]
                except:
                    try:
                        sold_cnt = self.driver.find_element(By.CSS_SELECTOR, '#root > div > div.pdp-body.pdp-wrap > div > div.pdp-body-top-left > div.pdp-info > div.pdp-info-right > div.reviewer--wrap--sPGWrNq > span:nth-child(5)').text.split(' 누적')[0]
                    except:
                        sold_cnt = ''

        if '+' in sold_cnt:
            sold_cnt = sold_cnt.split('+')[0]

        if sold_cnt != '':
            try:
                sold_cnt = int(sold_cnt)
            except:
                if '만' in sold_cnt:
                    sold_cnt = int(sold_cnt.split('만')[0]) * 10000

        return sold_cnt

    def GetSkuId(self):
        sku = self.driver.current_url.split('.html')[0].split('/')[-1]
        if sku in self.sku_id:
            self.text.run('{}페이지 {}번째 아이템은 이미 수집된 상품입니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
            self.no_crawl = True

            return sku
        else:
            self.sku_id.append(sku)
        
        return sku

    def GetOption1(self):
        option1_total = []
        option1_list = []
        option2_list = []
        option3_list = []
        options = [[], [], []]
        prices = []
        max_price = 0
        temp = []
        tt = ['']

        if self.new_format == True:
            prop_temp = self.product_main.split('sku-item--title--gcxMSdg')[1:]
        else:
            prop_temp = self.product_main.split('sku-title')[1:]
        
        if self.new_format == True:
            len_prop_temp = len(prop_temp)
        else:
            len_prop_temp = int(len(prop_temp) / 2)
        if len_prop_temp > 2:
            self.text.run('이 상품은 옵션 타입이 2개 초과인 상품입니다. 다음 아이템으로 넘어갑니다.')
            self.no_crawl = True
            option1_total = []
            option1_list = []
            option2_list = []
            prices = []

            return option1_total, option1_list, option2_list, prices

        if len(prop_temp) > 0:
            for i in range(len_prop_temp):
                tt = list(prop_temp[i*2+1].split(' title="')[1:])
                if len(tt) != 0 and ('sku-property-text"><span>' in prop_temp[i*2+1] and 'sku-property-image' in prop_temp[i*2+1]):
                    self.text.run('{}페이지 {}번째 아이템은 이미지가 있는 옵션/없는 옵션이 섞인 상품입니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
                    self.no_crawl = True
                    option1_total = []
                    option1_list = []
                    option2_list = []
                    prices = []

                    return option1_total, option1_list, option2_list, prices

                if len(tt) == 0 or (len(tt) != 0 and '" type="button" class=' in tt[0]):
                    tt = list(prop_temp[i*2+1].split('sku-property-text"><span>')[1:])
                    if len(tt) == 0 and self.other_page == True:
                        tt.append(prop_temp[i*2+1].split('-name">')[1].split(':</')[0])
                    elif len(tt) == 0 and self.other_page == False:
                        tt.append(prop_temp[i*2+1].split('</span>')[0].split('-value">')[1])

                for j in range(len(tt)):
                    options[i].append(tt[j].split('</')[0].split('">')[0] + ';')

        if len(options) >= 2 and len(options[1]) != 0:
            option2_list = copy.deepcopy(options[1])

        if len(option2_list) != 0 and self.enable_option2 == False:
            self.text.run('{}페이지 {}번째 아이템은 옵션2가 존재합니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
            
            self.no_crawl = True
            option1_total = []
            option1_list = []
            option2_list = []
            prices = []

            return option1_total, option1_list, option2_list, prices

        
        #sku = self.product_main.split('ae_object_value')[1].split('" st_')[0].replace('="','')
        sku = self.driver.current_url.split('.html')[0].split('/')[-1]

        if sku in self.sku_id:
            self.text.run('{}페이지 {}번째 아이템은 이미 수집된 상품입니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))

            self.no_crawl = True
            option1_total = []
            option1_list = []
            option2_list = []
            prices = []

            return option1_total, option1_list, option2_list, prices
        else:
            self.sku_id.append(sku)

        if len(options[0]) > 30:
            self.text.run('{}페이지 {}번째 아이템의 옵션 갯수를 30개로 한정합니다.'.format(self.i + 1, self.j + 1))
            option1_total = []
            option1_list = []
            option2_list = []
            prices = []
            self.no_crawl = True

            return option1_total, option1_list, option2_list, prices

        del_idx = 0
        for i in range(len(options[0])):
            if '" type="button"' in options[0][i - del_idx]:
                del options[0][i - del_idx]
                del_idx += 1
        
        del_idx = 0
        if len(options[1]) != 0:
            for i in range(len(options[1])):
                if '" type="button"' in options[1][i - del_idx]:
                    del options[1][i - del_idx]
                    del_idx += 1
                options[1][i - del_idx] = options[1][i - del_idx].split('" alt=')[0].split(';')[0] + ';'

        if self.skip_option == True:
            if len(options[0]) > 1:
                self.text.run('{}페이지 {}번째 아이템은 옵션이 있는 상품입니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
                self.no_crawl = True
                return option1_total, option1_list, option2_list, prices
                
        imgs = self.product_main.split('sku-property-image')[1:]
        for i in range(len(options[0])):
            if len(imgs) != 0 and len(imgs) == len(options[0]):
                temp_split = options[0][i].split('" alt')[0].split('"></span')[0].replace('"','')
                img_split = imgs[i].split('img src=')[1].split('_.webp')[0].replace('"','').replace('_50x50.jpg','')
            else:
                temp_split = options[0][i]
                img_split = self.img_url
            if self.translate == True:
                translated_text = self.TranslateGoogle(temp_split, 'ko')
            else:
                translated_text = temp_split

            option1_list.append(translated_text.split(';')[0] + ';' + img_split.replace('https://', '').replace('http://',''))
        
            if '.png' in option1_list[i]:
                option1_list[i] = option1_list[i].split('_.webp')[0].replace('"','').replace('_50x50.png','').replace('https://', '').replace('http://','').replace('.png', '') + '.png'

        pre_product_main = ''
        pre_price = ''
        del_idx_opt1 = 0
        del_idx_opt2 = 0
        soldout_cnt = 0        
        loop_len_opt1 = len(options[0])
        loop_len_opt2 = 0
        for i in range(loop_len_opt1):
            try:
                if self.other_page == True:
                    self.driver.find_element(By.CSS_SELECTOR, '#root > div > div.mainWrap--mainWrap--3boV-yO > div.infoWrap--infoWrap--C-bozkx > div:nth-child(4) > div > div:nth-child(2) > div:nth-child(2) > img'.format())
                else:
                    self.driver.find_element(By.CSS_SELECTOR, '#root > div > div.product-main > div > div.product-info > div.product-sku > div > div > ul > li:nth-child({})'.format(i+1)).click()
                    time.sleep(0.5)
                if len(option2_list) != 0:
                    del_idx_opt2 = 0
                    option2_list = copy.deepcopy(options[1])
                    loop_len_opt2 = len(option2_list)
                    for j in range(loop_len_opt2):
                        try:
                            self.driver.find_element(By.CSS_SELECTOR, '#root > div > div.product-main > div > div.product-info > div.product-sku > div > div:nth-child(2) > ul > li:nth-child({}) > div'.format(j+1)).click()
                            time.sleep(0.5)
                        except:
                            self.text.run('{}페이지 {}-{}이 품절되었습니다.'.format(self.i + 1, self.j + 1, j + 1))
                            soldout_cnt += 1
                            continue
                        
                        product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')
                        if pre_product_main == product_main:
                            time.sleep(0.5)
                            product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')
                        
                        try:
                            limit = product_main.split('product-quantity-tip')[1].split('"limit">')[1].split(' <')[0]
                        except:
                            try:
                                limit = product_main.split('product-quantity-tip')[1].split('"">')[1].split(' <')[0]
                            except:
                                limit = product_main.split('product-quantity-tip')[1].split('span>')[1].split('<')[0]
                        if '0개' in limit:
                            self.text.run('{}페이지 {}-{}-{}이 품절되었습니다.'.format(self.i + 1, self.j + 1, i + 1, j + 1))
                            del option2_list[j - del_idx_opt2]
                            del_idx_opt2 += 1
                            soldout_cnt += 1
                            continue

                        try:
                            price = product_main.split(self.price_tag)[1].split('US $')[1].split('</span>')[0]
                        except:
                            if self.discount_flag == True:
                                self.price_tag = 'uniform-banner-box-price'
                            else:
                                self.price_tag = 'uniform-banner-box-discounts'
                            try:
                                price = product_main.split(self.price_tag)[1].split('US $')[1].split('</span>')[0]
                            except:
                                price = product_main.split('product-price-value')[1].split('US $')[1].split('</span>')[0]
                        if ' - ' in price:
                            try:
                                self.driver.find_element(By.CSS_SELECTOR, '#root > div > div.product-main > div > div.product-info > div.product-sku > div > div > ul > li:nth-child({})'.format(j+1)).click()
                                time.sleep(0.5)
                            except:
                                self.text.run('{}페이지 {}-{}이 품절되었습니다.'.format(self.i + 1, self.j + 1, j + 1))
                                soldout_cnt += 1
                                continue
                            try:
                                product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')
                            except:
                                product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')

                            if pre_product_main == product_main:
                                time.sleep(0.5)
                                product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')
                            
                            price = product_main.split(self.price_tag)[1].split('US $')[1].split('</span>')[0]
                            # try:
                            #     price = product_main.split(self.price_tag)[1].split('US $')[1].split('</span>')[0]
                            # except:
                            #     try:
                            #         price = product_main.split(self.price_tag)[1].split('US $')[1].split('</span>')[0]
                            #     except:
                            #         price = product_main.split('product-price-value')[1].split('US $')[1].split('</span>')[0]
                        try:
                            prices.append(float(price.replace(',','')))
                        except:
                            try:
                                price_temp = ''
                                temp = self.product_main.split('wJAFI')[1:]
                                for n in range(len(temp)):
                                    price_temp += temp[n].split('">')[1].split('<')[0]
                                temp2 = temp[-1].split('"RqgnK">')[1:]
                                for n in range(len(temp2)):
                                    price_temp += temp2[n].split("<")[0].replace("'",'')
                                price = price_temp
                                prices.append(float(price.replace(',','')))
                            except:
                                self.no_crawl = True
                                option1_total = []
                                option1_list = []
                                option2_list = []
                                prices = []

                                return option1_total, option1_list, option2_list, prices
                        
                        option1_total.append(option1_list[i - del_idx_opt1].split(';')[0] + ' + ' + option2_list[j - del_idx_opt2].split(';')[0] + '/' + price)
                        if j != 0 and pre_price != price and pre_price != '':
                            self.text.run('옵션2에 따라 가격 변동이 있는 상품입니다. 다음 아이템으로 넘어갑니다.')
                            self.no_crawl = True
                            option1_total = []
                            option1_list = []
                            option2_list = []
                            prices = []

                            return option1_total, option1_list, option2_list, prices
                                         
                        pre_product_main = product_main
                        pre_price = price
                else:
                    product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')
                    if pre_product_main == product_main:
                        time.sleep(0.5)
                        product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')
                    
                    try:
                        limit = product_main.split('product-quantity-tip')[1].split('"limit">')[1].split(' <')[0]
                    except:
                        try:
                            limit = product_main.split('product-quantity-tip')[1].split('"">')[1].split(' <')[0]
                        except:
                            limit = product_main.split('product-quantity-tip')[1].split('span>')[1].split('</')[0]
                    if '0개' in limit:
                        self.text.run('{}페이지 {}-{}이 품절되었습니다.'.format(self.i + 1, self.j + 1, i + 1))
                        del option1_list[i - del_idx_opt1]
                        del_idx_opt1 += 1
                        soldout_cnt += 1
                        continue

                    try:
                        price = product_main.split(self.price_tag)[1].split('US $')[1].split('</span>')[0]
                    except:
                        try:
                            if self.discount_flag == True:
                                self.price_tag = 'uniform-banner-box-price'
                            else:
                                self.price_tag = 'uniform-banner-box-discounts'
                            price = product_main.split(self.price_tag)[1].split('US $')[1].split('</span>')[0]
                        except:
                            price = product_main.split('product-price-value')[1].split('US $')[1].split('</span>')[0]
                    if ' - ' in price:
                        try:
                            if len(option2_list) != 0:
                                for dd in range(len(option2_list)):
                                    try:
                                        self.driver.find_element(By.CSS_SELECTOR, '#root > div > div.product-main > div > div.product-info > div.product-sku > div > div:nth-child(2) > ul > li:nth-child({}) > div'.format(dd+1)).click()
                                        time.sleep(0.5)
                                        break
                                    except:
                                        self.text.run('{}페이지 {}-{}이 품절되었습니다.'.format(self.i + 1, self.j + 1, i + 1))
                                        soldout_cnt += 1
                                        continue                            
                        except:
                            self.text.run('{}페이지 {}-{}이 품절되었습니다.'.format(self.i + 1, self.j + 1, i + 1))
                            soldout_cnt += 1
                            continue
                        
                        product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')
                        if pre_product_main == product_main:
                            time.sleep(0.5)
                            product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')
                        price = product_main.split(self.price_tag)[1].split('US $')[1].split('</span>')[0]
                        
                        # try:
                        #     price = product_main.split(self.price_tag)[1].split('US $')[1].split('</span>')[0]
                        # except:
                        #     try:
                        #         price = product_main.split('uniform-banner-box-discounts')[1].split('US $')[1].split('</span>')[0]
                        #     except:
                        #         price = product_main.split('product-price-value')[1].split('US $')[1].split('</span>')[0]
                        cnt_temp = 0
                        while cnt_temp < 5:
                            if ' - ' in price:                                
                                self.driver.find_element(By.CSS_SELECTOR, '#root > div > div.product-main > div > div.product-info > div.product-sku > div > div > ul > li:nth-child({})'.format(i+1)).click()
                                time.sleep(0.5)
                                product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')
                                if pre_product_main == product_main:
                                    time.sleep(0.2)
                                    product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')
                                price = product_main.split(self.price_tag)[1].split('US $')[1].split('</span>')[0]
                                # try:
                                #     price = product_main.split('product-price-original')[1].split('US $')[1].split('</span>')[0]
                                # except:
                                #     try:
                                #         price = product_main.split('uniform-banner-box-discounts')[1].split('US $')[1].split('</span>')[0]
                                #     except:
                                #         price = product_main.split('product-price-value')[1].split('US $')[1].split('</span>')[0]
                                if ' - ' not in price:
                                    break
                                else:
                                    try:
                                        self.driver.find_element(By.CSS_SELECTOR, '#root > div > div.product-main > div > div.product-info > div.product-sku > div > div:nth-child({}) > ul > li'.format(i+2)).click()
                                    except:
                                        continue
                                cnt_temp += 1
                            else:
                                break
                    try:
                        prices.append(float(price.replace(',','')))
                    except:
                        try:
                            price_temp = ''
                            temp = product_main.split('wJAFI')[1:]
                            for n in range(len(temp)):
                                price_temp += temp[n].split('">')[1].split('<')[0]
                            temp2 = temp[-1].split('"RqgnK">')[1:]
                            for n in range(len(temp2)):
                                price_temp += temp2[n].split("<")[0].replace("'",'')
                            price = price_temp
                            prices.append(float(price.replace(',','')))
                        except:
                            self.no_crawl = True
                            option1_total = []
                            option1_list = []
                            option2_list = []
                            prices = []

                            return option1_total, option1_list, option2_list, prices
                        
                    option1_total.append(option1_list[i - del_idx_opt1].split(';')[0] + '/' + price)
            except:
                self.text.run('{}페이지 {}-{}이 품절되었습니다.'.format(self.i + 1, self.j + 1, i + 1))
                del option1_list[i - del_idx_opt1]
                del_idx_opt1 += 1
                soldout_cnt += 1
                continue

        if len(prices) != 0 and len(prices) > 1:
            max_price = abs(max(prices) - min(prices)) / min(prices) * 100                
            if max_price >= 300.0:
                self.text.run('{}페이지 {}번째 아이템의 옵션가격이 본품 금액의 300% 이상입니다. 다음 아이템으로 넘어갑니다'.format(self.i + 1, self.j + 1))
                option1_list = []
                option1_total = []
                prices = []
                self.no_crawl = True

            elif min(prices) <= self.price / 2:
                self.text.run('{}페이지 {}번째 아이템의 옵션가격이 본품 금액의 -50% 이하입니다. 다음 아이템으로 넘어갑니다'.format(self.i + 1, self.j + 1))
                option1_list = []
                option1_total = []
                prices = []
                self.no_crawl = True
        
        if loop_len_opt1 != 0 and loop_len_opt2 != 0 and (soldout_cnt == loop_len_opt1 * loop_len_opt2):
            self.no_crawl = True
            option1_list = []
            option1_total = []
            option2_list = []
            prices = []

        return option1_total, option1_list, option2_list, prices
    
    def GetOption1NewFormat(self):
        option1_total = []
        option1_list = []
        option2_list = []
        option3_list = []
        options = [[], [], []]
        prices = []
        max_price = 0
        temp = []
        tt = ['']
        img_list = []
        try:
            more_info = self.product_main.split('comet-btn comet-btn-text sku--imageViewMore--sFqXzWN comet-btn-important')[1].split('</span')[0].split('"><span>')[1]
            WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div.pdp-wrap.pdp-body > div.pdp-body-left > div.pdp-info > div.pdp-info-right > div.sku--wrap--o7E5T0f > div > div > div.sku-item--box--6Mh3HRv > div > button')))[0].click()
            time.sleep(1)
            self.product_main = WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, self.product_main_css)))[0].get_attribute('innerHTML')
        except:
            pass
        prop_temp = self.product_main.split('sku-item--title--gcxMSdg')[1:]
        len_prop_temp = len(prop_temp)
        if len_prop_temp > 2:
            self.text.run('이 상품은 옵션 타입이 2개 초과인 상품입니다. 다음 아이템으로 넘어갑니다.')
            self.no_crawl = True
            option1_total = []
            option1_list = []
            option2_list = []
            prices = []
           
            return option1_total, option1_list, option2_list, prices

        if len(prop_temp) > 0:
            for i in range(len_prop_temp):
                tt = list(prop_temp[i].split('sku-item--text--s0fbnzX')[1:])
                if len(tt) != 0:
                    for j in range(len(tt)):
                        tt[j] = tt[j].split('" title=')[1].split('">')[0].replace('"', '')
                else:
                    tt = list(prop_temp[i].split('sku-item--image--mXsHo3h')[1:])
                    if len(tt) != 0:
                        for j in range(len(tt)):
                            tt[j] = tt[j].split('" alt=')[1].split('">')[0].replace('"', '')
                    else:
                        tt = ['']
                        tt[0] = prop_temp[i].split(' <span>')[1].split('</span>')[0]

                for j in range(len(tt)):
                    temp_split = tt[j].split('</')[0].split('">')[0]
                    if self.translate == True:
                        translated_text = self.TranslateGoogle(temp_split, 'ko')
                    else:
                        translated_text = temp_split
                    options[i].append(translated_text + ';')

                if len(tt) != 0 and ('sku-property-text"><span>' in prop_temp[i] and 'sku-item--image--mXsHo3h' in prop_temp[i]):
                    self.text.run('{}페이지 {}번째 아이템은 이미지가 있는 옵션/없는 옵션이 섞인 상품입니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
                    self.no_crawl = True
                    option1_total = []
                    option1_list = []
                    option2_list = []
                    prices = []
        
        if len(options) >= 2 and len(options[1]) != 0:
            option2_list = copy.deepcopy(options[1])

        if len(option2_list) != 0 and self.enable_option2 == False:
            self.text.run('{}페이지 {}번째 아이템은 옵션2가 존재합니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
            
            self.no_crawl = True
            option1_total = []
            option1_list = []
            option2_list = []
            prices = []

            return option1_total, option1_list, option2_list, prices

        if len(options[0]) > 30:
            self.text.run('{}페이지 {}번째 아이템의 옵션 갯수를 30개로 한정합니다.'.format(self.i + 1, self.j + 1))
            option1_total = []
            option1_list = []
            option2_list = []
            prices = []
            self.no_crawl = True

            return option1_total, option1_list, option2_list, prices

        del_idx = 0
        for i in range(len(options[0])):
            if '" type="button"' in options[0][i - del_idx]:
                del options[0][i - del_idx]
                del_idx += 1
        
        del_idx = 0
        if len(options[1]) != 0:
            for i in range(len(options[1])):
                if '" type="button"' in options[1][i - del_idx]:
                    del options[1][i - del_idx]
                    del_idx += 1
                options[1][i - del_idx] = options[1][i - del_idx].split('" alt=')[0].split(';')[0] + ';'

        if self.skip_option == True:
            if len(options[0]) > 1:
                self.text.run('{}페이지 {}번째 아이템은 옵션이 있는 상품입니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
                self.no_crawl = True
                return option1_total, option1_list, option2_list, prices
        
        try:
            img_list = prop_temp[0].split('sku-item--image--mXsHo3h')[1:]
        except:
            img_list = []
        
        if len(img_list) != 0 and len(img_list) != len(options[0]):
            self.text.run('{}페이지 {}번째 아이템은 이미지가 있는 옵션/없는 옵션이 섞인 상품입니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
            self.no_crawl = True
            option1_total = []
            option1_list = []
            option2_list = []
            prices = []
           
            return option1_total, option1_list, option2_list, prices
        elif len(img_list) != 0 and len(img_list) == len(options[0]):
            for i in range(len(options[0])):
                img_url = img_list[i].split('img src="')[1].split('.jpg')[0].split('://')[1] + '.jpg'
                option1_list.append(options[0][i] + img_url)
                if '.png' in option1_list[i]:
                    option1_list[i] = option1_list[i].split('_.webp')[0].replace('"','').split('.png')[0].replace('.png', '') + '.png'
                elif '.jpeg' in option1_list[i]:
                    option1_list[i] = option1_list[i].split('_.webp')[0].replace('"','').split('.jpeg')[0].replace('.jpeg', '') + '.jpeg'
        else:
            for i in range(len(options[0])):
                option1_list.append(options[0][i])
            
        pre_product_main = ''
        pre_price = ''
        del_idx_opt1 = 0
        del_idx_opt2 = 0
        soldout_cnt = 0        
        loop_len_opt1 = len(options[0])
        loop_len_opt2 = 0
        for i in range(loop_len_opt1):
            self.driver.execute_script("window.scrollTo(0, 0)")
            try:
                try:
                    if len(img_list) == 0:
                        elem_css = '#root > div > div.pdp-body.pdp-wrap > div > div.pdp-body-top-left > div.pdp-info > div.pdp-info-right > div.sku--wrap--o7E5T0f > div > div:nth-child(1) > div.sku-item--box--6Mh3HRv > div > div:nth-child({})'.format(i+1)
                    else:
                        elem_css = '#root > div > div.pdp-body.pdp-wrap > div > div.pdp-body-top-left > div.pdp-info > div.pdp-info-right > div.sku--wrap--o7E5T0f > div > div > div.sku-item--box--6Mh3HRv > div > div:nth-child({})'.format(i+1)
                    self.driver.find_element(By.CSS_SELECTOR, elem_css).click()
                except:
                    if len(img_list) == 0:
                        elem_css = '#root > div > div.pdp-body.pdp-wrap > div > div.pdp-body-top-left > div.pdp-info > div.pdp-info-right > div.sku--wrap--o7E5T0f > div > div:nth-child(1) > div.sku-item--box--6Mh3HRv > div > div:nth-child({})'.format(i+1)
                    else:
                        elem_css = '#root > div > div.pdp-body.pdp-wrap > div > div.pdp-body-top-left > div.pdp-info > div.pdp-info-right > div.sku--wrap--o7E5T0f > div > div > div.sku-item--box--6Mh3HRv > div > div.sku-item--selected--RWc6VW_.sku-item--image--mXsHo3h'
                    self.driver.find_element(By.CSS_SELECTOR, elem_css).click()

                time.sleep(0.5)
                loop_len_opt2 = len(option2_list)

                if loop_len_opt2 != 0:
                    del_idx_opt2 = 0
                    option2_list = copy.deepcopy(options[1])
                    for j in range(loop_len_opt2):
                        try:
                            if len(img_list) == 0:
                                elem_css = '#root > div > div.pdp-body.pdp-wrap > div > div.pdp-body-top-left > div.pdp-info > div.pdp-info-right > div.sku--wrap--o7E5T0f > div > div:nth-child(2) > div.sku-item--box--6Mh3HRv > div > div:nth-child({})'.format(j+1)
                            else:
                                elem_css = '#root > div > div.pdp-body.pdp-wrap > div > div.pdp-body-top-left > div.pdp-info > div.pdp-info-right > div.sku--wrap--o7E5T0f > div > div:nth-child(2) > div.sku-item--box--6Mh3HRv > div > div:nth-child({})'.format(j+1)
                            self.driver.find_element(By.CSS_SELECTOR, elem_css).click()
                            time.sleep(0.5)            
                        except:
                            self.text.run('{}페이지 {}-{}이 품절되었습니다.'.format(self.i + 1, self.j + 1, j + 1))
                            soldout_cnt += 1
                            continue
                        
                        product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root')))[0].get_attribute('innerHTML')
                        if pre_product_main == product_main:
                            time.sleep(0.5)
                            product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root')))[0].get_attribute('innerHTML')
                        
                        try:
                            limit = product_main.split(' 개 사용 가능')[0].split('</div><div><span class="">')[1].split(' 개')[0].split(' lots')[0]
                        except:
                            try:
                                limit = product_main.split(' 개 사용 가능')[0].split('<div><span class="">')[1].split(' 개')[0]
                            except:
                                try:
                                    limit = product_main.split('개만 남았습니다')[0].split('quantity--limit--jIdRcwT">')[1]
                                except:
                                    try:
                                        limit = product_main.split('lots 사용 가능')[0].split('quantity--limit--jIdRcwT">')[1]
                                    except:
                                        try:
                                            limit = product_main.split('고객 당 최대 ')[1].split('</div')[0]
                                        except:
                                            limit = ''
                                    
                        if '0' == limit:
                            self.text.run('{}페이지 {}-{}-{}이 품절되었습니다.'.format(self.i + 1, self.j + 1, i + 1, j + 1))
                            del option2_list[j - del_idx_opt2]
                            del_idx_opt2 += 1
                            soldout_cnt += 1
                            continue

                        price = ''
                        price_ori = ''

                        price_temp1 = product_main.split(self.price_tag)[1].split('US $')[1].split('--VKKip5c')[1:]
                        price_temp2 = product_main.split(self.price_tag)[1].split('US $')[1].split('--Vcv75ku')[1:]
                        for jj in range(len(price_temp1)):
                            price += price_temp1[jj].split('">')[1].split('</')[0]
                        for jj in range(len(price_temp2)):
                            price += price_temp2[jj].split('">')[1].split('</')[0]

                        price = price.split('<span')[0].split('<div ')[0].split('</div')[0].replace(',', '')
                        try:
                            price_ori = self.product_main.split(self.price_tag_ori)[1].split('US $')[1].split('</span')[0].replace(',', '')
                        except:
                            pass
                        if ' - ' in price:
                            print()

                        if self.discount_flag == True:
                            prices.append(float(price.replace(',','')))
                        else:
                            if price_ori != '':
                                prices.append(float(price_ori.replace(',','')))
                            else:
                                prices.append(float(price.replace(',','')))

                        option1_total.append(option1_list[i - del_idx_opt1].split(';')[0] + ' + ' + option2_list[j - del_idx_opt2].split(';')[0] + '/' + str(prices[j - del_idx_opt2]))
                        if j != 0 and pre_price != price and pre_price != '':
                            self.text.run('옵션2에 따라 가격 변동이 있는 상품입니다. 다음 아이템으로 넘어갑니다.')
                            self.no_crawl = True
                            option1_total = []
                            option1_list = []
                            option2_list = []
                            prices = []

                            return option1_total, option1_list, option2_list, prices
                                            
                        pre_product_main = product_main
                        pre_price = price
                else:
                    product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root')))[0].get_attribute('innerHTML')
                    if pre_product_main == product_main:
                        time.sleep(0.5)
                        product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root')))[0].get_attribute('innerHTML')
                    
                    try:
                        limit = product_main.split(' 개 사용 가능')[0].split('</div><div><span class="">')[1].split(' 개')[0].split(' lots')[0]
                    except:
                        try:
                            limit = product_main.split(' 개 사용 가능')[0].split('<div><span class="">')[1].split(' 개')[0]
                        except:
                            try:
                                limit = product_main.split('개만 남았습니다')[0].split('quantity--limit--jIdRcwT">')[1]
                            except:
                                try:
                                    limit = product_main.split('lots 사용 가능')[0].split('quantity--limit--jIdRcwT">')[1]
                                except:
                                    try:
                                        limit = product_main.split('고객 당 최대 ')[1].split('</div')[0]
                                    except:
                                        limit = ''
                    if '0' == limit:
                        self.text.run('{}페이지 {}-{}이 품절되었습니다.'.format(self.i + 1, self.j + 1, i + 1))
                        del option1_list[i - del_idx_opt1]
                        del_idx_opt1 += 1
                        soldout_cnt += 1
                        continue

                    price = ''
                    price_ori = ''

                    try:
                        price_temp1 = product_main.split(self.price_tag)[1].split('US $')[1].split('--VKKip5c')[1:]
                        price_temp2 = product_main.split(self.price_tag)[1].split('US $')[1].split('--Vcv75ku')[1:]
                        for jj in range(len(price_temp1)):
                            price += price_temp1[jj].split('">')[1].split('</')[0]
                        for jj in range(len(price_temp2)):
                            price += price_temp2[jj].split('">')[1].split('</')[0]
                        price = price.split('<span')[0].split('<div ')[0].split('</div')[0].replace(',', '')
                    except:
                        price_temp = product_main.split('es--wrap--erdmPRe notranslate')[1]
                        price_temp1 = price_temp.split('--VKKip5c')[1:]
                        price_temp2 = price_temp.split('US $')[1].split('--Vcv75ku')[1:]
                        for jj in range(len(price_temp1)):
                            price += price_temp1[jj].split('">')[1].split('</')[0]
                        for jj in range(len(price_temp2)):
                            price += price_temp2[jj].split('">')[1].split('</')[0]
                        price = price.split('<span')[0].split('<div ')[0].split('</div')[0].replace(',', '')
                    try:
                        price_ori = self.product_main.split(self.price_tag_ori)[1].split('US $')[1].split('</span')[0].replace(',', '')
                    except:
                        pass
                    
                    if ' - ' in price:
                        print()

                    if self.discount_flag == True:
                        prices.append(float(price.replace(',','')))
                    else:
                        if price_ori != '':
                            prices.append(float(price_ori.replace(',','')))
                        else:
                            prices.append(float(price.replace(',','')))

                    option1_total.append(option1_list[i - del_idx_opt1].split(';')[0] + '/' + str(prices[i - del_idx_opt1]))
            except:
                self.text.run('{}페이지 {}-{}이 품절되었습니다.'.format(self.i + 1, self.j + 1, i + 1))
                del option1_list[i - del_idx_opt1]
                del_idx_opt1 += 1
                soldout_cnt += 1
                continue

        if len(prices) != 0 and len(prices) > 1:
            max_price = abs(max(prices) - min(prices)) / min(prices) * 100                
            if max_price >= 300.0:
                self.text.run('{}페이지 {}번째 아이템의 옵션가격이 본품 금액의 300% 이상입니다. 다음 아이템으로 넘어갑니다'.format(self.i + 1, self.j + 1))
                option1_list = []
                option1_total = []
                prices = []
                self.no_crawl = True

            elif min(prices) <= self.price / 2:
                self.text.run('{}페이지 {}번째 아이템의 옵션가격이 본품 금액의 -50% 이하입니다. 다음 아이템으로 넘어갑니다'.format(self.i + 1, self.j + 1))
                option1_list = []
                option1_total = []
                prices = []
                self.no_crawl = True
        
        if loop_len_opt1 != 0 and loop_len_opt2 != 0 and (soldout_cnt == loop_len_opt1 * loop_len_opt2):
            self.no_crawl = True
            option1_list = []
            option1_total = []
            option2_list = []
            prices = []

        return option1_total, option1_list, option2_list, prices

    def GetDetailImages(self):
        detail_imgs = []
        try:
            img_temp = self.driver.find_element(By.CSS_SELECTOR, '#product-description').get_attribute('innerHTML').split('src=')[1:]
        except:
            try:
                self.driver.execute_script("window.scrollTo(0, 0)")
                time.sleep(1)
                click_detail = self.driver.find_element(By.CSS_SELECTOR, '#product-detail > div.titleBar--titleBarFloor--2w5VptQ.undefined > div > div')
                self.ac.move_to_element(click_detail).pause(1).click().perform()
                time.sleep(1)
                self.ScrollPageDown()
                img_temp = self.driver.find_element(By.CSS_SELECTOR, '#product-description').get_attribute('innerHTML').split('src=')[1:]
            except:
                return detail_imgs
    
        for i in range(len(img_temp)):
            if '.jpg' in img_temp[i]:
                if 'https://' not in img_temp[i] and 'http://' not in img_temp[i]:
                    detail_imgs.append('https://' + img_temp[i].split('" ')[0].replace('"', '').split('jpg')[0].replace('//ae', 'ae') + 'jpg')
                else:
                    detail_imgs.append(img_temp[i].split('" ')[0].replace('"', '').split('jpg')[0] + 'jpg')
            elif '.png' in img_temp[i]:
                if 'https://' not in img_temp[i] and 'http://' not in img_temp[i]:
                    detail_imgs.append('https://' + img_temp[i].split('" ')[0].replace('"', '').split('png')[0].replace('//ae', 'ae') + 'png')
                else:
                    detail_imgs.append(img_temp[i].split('" ')[0].replace('"', '').split('png')[0] + 'png')

        return detail_imgs

    def ClickSearchButton(self):
        last_tab = self.driver.window_handles[-1]
        self.driver.switch_to.window(window_name=last_tab)
        time.sleep(self.process_delay)

        original_item_text = ''
        self.driver.find_element(By.CSS_SELECTOR, '#search-words').clear()
        search_key = self.driver.find_element(By.CSS_SELECTOR, '#search-words')
        if self.item_text == '':
            self.item_text = self.item_name.text()
        original_item_text = self.item_text

        if self.translate_item_name == True:
            self.item_text = self.TranslateGoogle(self.item_text, 'zh-cn')
        self.ac.send_keys_to_element(search_key, self.item_text).pause(1).send_keys(Keys.ENTER).perform()

        self.text.run('상품명 : {} 검색에 성공했습니다.'.format(original_item_text))
        time.sleep(self.process_delay)

    def CleanText(self, inputString):
        text_rmv = re.sub('[-=+,#/\?:^.@*\"※~ㆍ!』‘|\(\)\[\]`\'…》\”\“\’·]', ' ', inputString)
        return text_rmv

    def SaveFile(self, postfix = ''):
        ret = Result.PASS
        file_folder = '{}\\Desktop\\알리익스프레스_결과물'.format(self.windows_user_name)
        filename = '{}\\{}'.format(file_folder, self.item_text + '_AliExpress_ItemName_results{}.xlsx'.format(postfix))
        try:
            if not os.path.isdir(file_folder):
                os.mkdir(file_folder)
        except OSError:
            self.text.run('파일 폴더를 생성하는데 실패했습니다.')
            return Result.FAIL

        self.wb.save(filename)
        #self.tb_temp.to_excel(filename, index=False)
        return ret

    def TranslateGoogle(self, text, option):
        try:
            return self.translator.translate(text, dest=option).text
        except:
            return self.translator.translate(text, dest=option).text

    def TranslateChinese(self, text):
        client_id = "Uvq1xEXtYvQQs5zR00p2"
        client_pw = "0j597g2wUR"

        headers = {
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
            'X-Naver-Client-Id': 'Uvq1xEXtYvQQs5zR00p2',
            'X-Naver-Client-Secret': '0j597g2wUR',
        }

        data = {
            'text' : text,
            'source' : 'ko',
            'target' : 'zh-CN'
        }

        response = requests.post('https://openapi.naver.com/v1/papago/n2mt', headers=headers, data=data)
        rescode = response.status_code

        if(rescode==200):
            send_data = response.json()
            trans_data = (send_data['message']['result']['translatedText'])
            return trans_data
        else:
            self.text.run("Papago API 사용량이 모두 소진되었습니다.(하루 최대 10,000개)")
    
    def GetItemName(self):
        if self.item_name.text() == '':
            try:
                url = self.driver.current_url
                link_name = url.split('wholesale-')[1].split('.html')[0]
            except:
                try:
                    link_name = url.split('SearchText=')[1]
                    if '&ltype=wholesale' in link_name:
                        link_name = link_name.split('&ltype=wholesale')[0]
                except:
                    try:
                        link_name = url.split('.html')[0].split('/')[-1]
                    except:
                        link_name = ''
            self.item_text = parse.unquote(link_name)
        else:
            self.item_text = self.item_name.text()

    def CrawlDataFromFile(self, max_cnt, item_cnt):
        self.no_crawl = False
        self.other_page = False

        # 알리익스프레스 검색 선택링크주소
        last_tab = self.driver.window_handles[-1]
        self.driver.switch_to.window(window_name=last_tab)
        try:
            select_url = self.driver.current_url
        except:
            self.driver.refresh()

        # check if its old format or new format
        if self.new_format == False:
            try:
                WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))
                self.product_main_css = '#root > div > div.product-main'
            except:
                WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root')))
                self.product_main_css = '#root'
                self.new_format = True

        try:
            self.product_main = WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, self.product_main_css)))[0].get_attribute('innerHTML')
        except:
            if (self.extra == 0 or self.extra == 1):
                try:
                    verify_age = WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.pages--title--1LAhwQy')))[0].text
                    if '연령인증' in verify_age:
                        self.text.run('{}번째 상품은 연령인증이 필요한 상품입니다. 다음 아이템으로 넘어갑니다.'.format(item_cnt))
                        self.CloseItemPage()
                        if self.j == 59 and (self.extra == 0 or self.extra == 1):
                            if (self.i + 1) == self.page_max_num:
                                self.final_cnt += 1
                                if (self.extra == 0 or self.extra == 1):
                                    self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                                self.text.run('마지막 아이템입니다.')
                                self.text.run('크롤링이 완료되었습니다.')
                                self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                                # 크롬드라이버 종료
                                self.end_time = self.text.GetTime()
                                diff_time = self.end_time - self.start_time
                                self.text.run('--End work--')
                                self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                                self.restart = True

                                return Result.PASS
                            elif (self.i + 1) == self.max_page:
                                self.final_cnt += 1
                                if (self.extra == 0 or self.extra == 1):
                                    self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                                self.text.run('마지막 아이템입니다.')
                                self.text.run('크롤링이 완료되었습니다.')
                                self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                                # 크롬드라이버 종료
                                self.end_time = self.text.GetTime()
                                diff_time = self.end_time - self.start_time
                                self.text.run('--End work--')
                                self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                                self.restart = True

                                return Result.PASS
                            else:
                                self.ClickNextPage()

                                self.j = 0
                                self.i += 1
                                time.sleep(self.process_delay)
                        else:
                            self.j += 1
                            self.text.run('{}개 중 {}개 수집 완료'.format(max_cnt, self.final_cnt))

                        return Result.FAIL
                except:
                    try:
                        self.product_main = WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.mainWrap--mainWrap--3boV-yO')))[0].get_attribute('innerHTML')
                        self.other_page = True
                    except:
                        self.text.run('이미지 클릭에 실패했습니다.')
                        self.cnt += 1
                        self.CloseItemPage()
                        return Result.FAIL
            else:
                self.driver.find_element(By.CSS_SELECTOR, 'body').send_keys(Keys.END)
                time.sleep(1)
                return Result.PASS

        # check if its not sale
        try:
            is_sale = self.product_main.split('message--wrap--TCbfZuF')[1].split('</div')[0].replace('>', '').replace('"','')
            if '더 이상 사용할 수 없습니다' in is_sale:
                self.text.run('{}번째 상품은 현재 판매되지 않는 상품입니다. 다음 아이템으로 넘어갑니다.'.format(item_cnt))
                self.CloseItemPage()
                if self.j == 59 and (self.extra == 0 or self.extra == 1):
                    if (self.i + 1) == self.page_max_num:
                        self.final_cnt += 1
                        if (self.extra == 0 or self.extra == 1):
                            self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                        self.text.run('마지막 아이템입니다.')
                        self.text.run('크롤링이 완료되었습니다.')
                        self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                        # 크롬드라이버 종료
                        self.end_time = self.text.GetTime()
                        diff_time = self.end_time - self.start_time
                        self.text.run('--End work--')
                        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                        self.restart = True

                        return Result.PASS
                    elif (self.i + 1) == self.max_page:
                        self.final_cnt += 1
                        if (self.extra == 0 or self.extra == 1):
                            self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                        self.text.run('마지막 아이템입니다.')
                        self.text.run('크롤링이 완료되었습니다.')
                        self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                        # 크롬드라이버 종료
                        self.end_time = self.text.GetTime()
                        diff_time = self.end_time - self.start_time
                        self.text.run('--End work--')
                        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                        self.restart = True

                        return Result.PASS
                    else:
                        self.ClickNextPage()
                        self.j = 0
                        self.i += 1
                        time.sleep(self.process_delay)
                else:
                    self.j += 1
                    self.text.run('{}개 중 {}개 수집 완료'.format(max_cnt, self.final_cnt))
                
                return Result.FAIL
        except:
            pass
        
        # Check if it could not delivery to Korea
        try:
            is_delivery = self.product_main.find('이 상품은 고객님의 배송지로 배송이 불가능합니다.')
            if is_delivery != -1:
                self.text.run('{}페이지 {}번째 상품은 현재 판매되지 않는 상품입니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
                self.CloseItemPage()
                if self.j == 59 and (self.extra == 0 or self.extra == 1):
                    if (self.i + 1) == self.page_max_num:
                        self.final_cnt += 1
                        if (self.extra == 0 or self.extra == 1):
                            self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                        self.text.run('마지막 아이템입니다.')
                        self.text.run('크롤링이 완료되었습니다.')
                        self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                        # 크롬드라이버 종료
                        self.end_time = self.text.GetTime()
                        diff_time = self.end_time - self.start_time
                        self.text.run('--End work--')
                        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                        self.restart = True

                        return Result.PASS
                    elif (self.i + 1) == self.max_page:
                        self.final_cnt += 1
                        if (self.extra == 0 or self.extra == 1):
                            self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                        self.text.run('마지막 아이템입니다.')
                        self.text.run('크롤링이 완료되었습니다.')
                        self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                        # 크롬드라이버 종료
                        self.end_time = self.text.GetTime()
                        diff_time = self.end_time - self.start_time
                        self.text.run('--End work--')
                        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                        self.restart = True

                        return Result.PASS
                    else:
                        self.ClickNextPage()

                        self.j = 0
                        self.i += 1
                        time.sleep(self.process_delay)
                else:
                    self.j += 1
                    self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                
                return Result.FAIL
        except:
            pass

        temp = []
        if self.new_format == True:
            temp1 = self.product_main.split('sku-item--image--mXsHo3h')[1:]
            for i in range(len(temp1)):
                if 'img src=' in temp1[i] or 'class="product-quantity' in temp1[i]:
                    temp.append(temp1[i])
        else:
            temp1 = self.product_main.split('title=')[1:]
            for i in range(len(temp1)):
                if 'img src=' in temp1[i] or 'class="product-quantity' in temp1[i]:
                    temp.append(temp1[i])

        if self.skip_option == True:
            if len(temp) > 1:
                self.text.run('{}번째 아이템은 옵션이 있는 상품입니다. 다음 아이템으로 넘어갑니다.'.format(item_cnt))
                self.CloseItemPage()
                
                self.text.run('{}개 중 {}개 수집 완료'.format(max_cnt, self.final_cnt))
                if self.final_cnt == max_cnt or item_cnt == max_cnt:
                    self.final_cnt += 1
                    self.text.run('마지막 아이템입니다.')
                    self.text.run('크롤링이 완료되었습니다.')
                    # 크롬드라이버 종료
                    self.end_time = self.text.GetTime()
                    diff_time = self.end_time - self.start_time
                    self.text.run('--End work--')
                    self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                    self.restart = True

                    return Result.PASS
                else:
                    return Result.FAIL

        time.sleep(1)
        if self.enable_crawl_price_only == False:
            ret = self.ScrollPageDown()
            ret = self.SlideNetworkCheck()
            if self.new_format == True:
                self.driver.execute_script("window.scrollTo(0, 0)")
                time.sleep(0.5)
                try:
                    WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#nav-description > div:nth-child(2) > button')))[0].click()
                except:
                    time.sleep(1)
                    WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#nav-description > div:nth-child(2) > button')))[0].click()
                time.sleep(0.5)
                ret = self.ScrollPageDown()
            if ret == Result.FAIL:
                self.text.run('웹페이지 로딩에 실패했습니다.')
                self.CloseItemPage()
                self.cnt += 1
                return Result.FAIL
        else:
            ret = self.SlideNetworkCheck()

        # 선택제품가격
        ret, self.price, self.price_ori = self.GetPrice()
        if ret != Result.PASS:
            if self.no_crawl == True:
                if ret == -1:
                    self.text.run('{}번째 아이템의 페이지를 찾을 수 없습니다. 다음 아이템으로 넘어갑니다.'.format(item_cnt))
                else:
                    self.text.run('{}번째 아이템의 가격 수집에 실패했습니다. 다음 아이템으로 넘어갑니다.'.format(item_cnt))
            else:
                self.text.run('{}번째 아이템의 할인율이 {}%를 초과합니다. 다음 아이템으로 넘어갑니다.'.format(item_cnt, int(self.dc_per)))
            self.CloseItemPage()
            
            self.text.run('{}개 중 {}개 수집 완료'.format(max_cnt, self.final_cnt))
            if self.final_cnt == max_cnt or item_cnt == max_cnt:
                self.final_cnt += 1
                self.text.run('마지막 아이템입니다.')
                self.text.run('크롤링이 완료되었습니다.')
                # 크롬드라이버 종료
                self.end_time = self.text.GetTime()
                diff_time = self.end_time - self.start_time
                self.text.run('--End work--')
                self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                self.restart = True

                return Result.PASS
            else:
                return Result.FAIL

        if self.enable_crawl_price_only == True:
            self.sheet.append([self.item_text, self.price_ori, self.price, self.review, self.sold_cnt, '','','','', self.video_link, self.delivery_for, self.delivery_fee, 
                               self.search_url, select_url,
                               self.detail_db.iloc[14, item_cnt - 1],
                               self.detail_db.iloc[15, item_cnt - 1],
                               self.detail_db.iloc[16, item_cnt - 1],
                               self.detail_db.iloc[17, item_cnt - 1],
                               self.detail_db.iloc[18, item_cnt - 1],
                               self.detail_db.iloc[19, item_cnt - 1],
                               self.detail_db.iloc[20, item_cnt - 1]],
                               self.detail_db.iloc[21, item_cnt - 1])
            self.SaveFile('_reproduction')

            self.final_cnt += 1
            self.text.run('{}개 중 {}개 수집 완료'.format(max_cnt, self.final_cnt))
            if self.final_cnt == max_cnt or item_cnt == max_cnt:
                self.text.run('마지막 아이템입니다.')
                self.text.run('크롤링이 완료되었습니다.')
                # 크롬드라이버 종료
                self.end_time = self.text.GetTime()
                diff_time = self.end_time - self.start_time
                self.text.run('--End work--')
                self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                self.restart = True

                return Result.PASS
            
            return Result.PASS
        else:
            self.windows_user_name = os.path.expanduser('~')

            # 리뷰 수
            self.review = self.GetReview()

            # 판매 개수
            self.sold_cnt = self.GetSoldCount()

            # 상품제목
            self.title = self.GetTitle()

            # 대표이미지
            self.img_url = self.GetRepresentImage(self.other_page)

            # 동영상 링크
            self.video_link = self.GetVideoLink()

            # 배송비/배송방법
            ret, self.delivery_for, self.delivery_fee = self.GetDeliveryInfo()
            if ret == Result.FAIL:
                self.text.run('{}페이지 {}번째 아이템의 배송정보 획득에 실패했습니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
                self.CloseItemPage()
                if self.j == 59 and (self.extra == 0 or self.extra == 1):
                    if (self.i + 1) == self.page_max_num:
                        self.final_cnt += 1
                        if (self.extra == 0 or self.extra == 1):
                            self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                        self.text.run('마지막 아이템입니다.')
                        self.text.run('크롤링이 완료되었습니다.')
                        self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                        # 크롬드라이버 종료
                        self.end_time = self.text.GetTime()
                        diff_time = self.end_time - self.start_time
                        self.text.run('--End work--')
                        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                        self.restart = True

                        return Result.PASS
                    elif (self.i + 1) == self.max_page:
                        self.final_cnt += 1
                        if (self.extra == 0 or self.extra == 1):
                            self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                        self.text.run('마지막 아이템입니다.')
                        self.text.run('크롤링이 완료되었습니다.')
                        self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                        # 크롬드라이버 종료
                        self.end_time = self.text.GetTime()
                        diff_time = self.end_time - self.start_time
                        self.text.run('--End work--')
                        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                        self.restart = True

                        return Result.PASS
                    else:
                        self.ClickNextPage()
                        self.j = 0
                        self.i += 1
                        time.sleep(self.process_delay)
                else:
                    self.j += 1
                    self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))

                return Result.FAIL

            # 판매자상품코드
            self.sku = self.GetSkuId()
            if self.no_crawl == True:
                self.CloseItemPage()
                if self.j == 59 and (self.extra == 0 or self.extra == 1):
                    if (self.i + 1) == self.page_max_num:
                        self.final_cnt += 1
                        if (self.extra == 0 or self.extra == 1):
                            self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                        self.text.run('마지막 아이템입니다.')
                        self.text.run('크롤링이 완료되었습니다.')
                        self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                        # 크롬드라이버 종료
                        self.end_time = self.text.GetTime()
                        diff_time = self.end_time - self.start_time
                        self.text.run('--End work--')
                        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                        self.restart = True

                        return Result.PASS
                    elif (self.i + 1) == self.max_page:
                        self.final_cnt += 1
                        if (self.extra == 0 or self.extra == 1):
                            self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                        self.text.run('마지막 아이템입니다.')
                        self.text.run('크롤링이 완료되었습니다.')
                        self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                        # 크롬드라이버 종료
                        self.end_time = self.text.GetTime()
                        diff_time = self.end_time - self.start_time
                        self.text.run('--End work--')
                        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                        self.restart = True

                        return Result.PASS
                    else:
                        self.ClickNextPage()
                        self.j = 0
                        self.i += 1
                        time.sleep(self.process_delay)
                else:
                    self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                    self.j += 1
                return Result.FAIL

            # 상세 페이지
            self.detail_imgs = self.GetDetailImages()
            self.detail_imgs = '\n'.join(self.detail_imgs)
            
            option1_list = []
            option1_total = []
            option2_list = []
            prices = []

            # 옵션1
            if self.new_format == True:
                option1_total, option1_list, option2_list, prices = self.GetOption1NewFormat()
            else:
                option1_total, option1_list, option2_list, prices = self.GetOption1()
            if self.no_crawl == True:
                self.CloseItemPage()
                self.text.run('{}개 중 {}개 수집 완료'.format(max_cnt, self.final_cnt))
                if self.final_cnt == max_cnt or item_cnt == max_cnt:
                    self.final_cnt += 1
                    self.text.run('마지막 아이템입니다.')
                    self.text.run('크롤링이 완료되었습니다.')
                    # 크롬드라이버 종료
                    self.end_time = self.text.GetTime()
                    diff_time = self.end_time - self.start_time
                    self.text.run('--End work--')
                    self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                    self.restart = True

                    return Result.PASS
                else:
                    return Result.FAIL

            option1_list = '\n'.join(option1_list)
            option1_total = '\n'.join(option1_total)
            if len(option2_list) > 0:
                option2_list = '\n'.join(option2_list)
            else:
                option2_list = ''
            if self.price == "暂无报价":
                price_final = "暂无报价"
            elif len(prices) > 1:
                price_final = '{}-{}'.format(min(prices), max(prices))
            else:
                price_final = self.price
            self.sheet.append([self.item_text, self.price_ori, self.price, self.review, self.sold_cnt, '','','','', self.video_link, self.delivery_for, self.delivery_fee, self.search_url, 
                    select_url, price_final, self.title, self.img_url, option1_list, option2_list, option1_total, self.detail_imgs, self.sku])
            self.SaveFile('_reproduction')
            self.CloseItemPage()

            if self.final_cnt == max_cnt or item_cnt == max_cnt:
                self.final_cnt += 1
                self.text.run('마지막 아이템입니다.')
                self.text.run('크롤링이 완료되었습니다.')
                self.text.run('{}개 중 {}개 수집 완료'.format(max_cnt, self.final_cnt))
                # 크롬드라이버 종료
                self.end_time = self.text.GetTime()
                diff_time = self.end_time - self.start_time
                self.text.run('--End work--')
                self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                self.restart = True

                return Result.PASS
            else:
                self.text.run('{}번째 아이템 크롤링 중'.format(item_cnt))

            self.final_cnt += 1
            self.text.run('{}개 중 {}개 수집 완료'.format(max_cnt, self.final_cnt))

    def ScrollPageDown(self, is_initial=False):
        try:
            # 페이지 스크롤 최대치로 내리기
            before_h = self.driver.execute_script('return window.scrollY')
            if self.extra == 6 and is_initial == True:
                row_num = int(self.cnt_page * 60 / 6)
                for i in range(row_num):
                    self.driver.find_element(By.CSS_SELECTOR, 'body').send_keys(Keys.END)
                    time.sleep(2)
            else:
                while(True):
                    self.driver.find_element(By.CSS_SELECTOR, 'body').send_keys(Keys.END)
                    time.sleep(1)
                    after_h = self.driver.execute_script('return window.scrollY')

                    if after_h == before_h:
                        break
                    else:
                        before_h = after_h
        except:
            return Result.FAIL
        
        return Result.PASS
    
    def CloseItemPage(self):
        if len(self.driver.window_handles) != 1:
            for n in range(len(self.driver.window_handles) - self.close_page_num):
                last_tab = self.driver.window_handles[-1]
                self.driver.switch_to.window(window_name=last_tab)
                self.driver.close()
            first_tab = self.driver.window_handles[self.close_page_num - 1]
            self.driver.switch_to.window(window_name=first_tab)
            time.sleep(self.process_delay)

    def ClickNextPage(self):
        try:
            #self.driver.find_element_by_xpath('//*[@id="root"]/div/div/div[2]/div/div[2]/div[4]/div[1]/ul/li[9]').click()
            next_btn = WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div.root--container--2gVZ5S0.root--newRoot--2-6FirH.search-root-cls > div > div.rightContent2023--rightContainer--2abV4r5 > div.cards2023--pagination--1-0Grbh > ul > li.comet-pagination-next > button')))[0]
            next_btn.click()
            time.sleep(self.process_delay)
        except:
            try:
                #self.driver.find_element_by_xpath('//*[@id="root"]/div/div/div[2]/div/div[2]/div[4]/div[1]/ul/li[9]').click()
                self.text.run('웹페이지를 새로고침 합니다3.')
                self.driver.refresh()
                time.sleep(5)
                self.ac.move_to_element(self.temp).perform()
                time.sleep(1)
                next_btn = WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div.root--container--2gVZ5S0.root--newRoot--2-6FirH.search-root-cls > div > div.rightContent2023--rightContainer--2abV4r5 > div.cards2023--pagination--1-0Grbh > ul > li.comet-pagination-next > button')))[0].click()
            except:
                try:
                    self.text.run('웹페이지를 새로고침 합니다4.')
                    self.driver.refresh()
                    time.sleep(5)
                    self.ac.move_to_element(self.temp).perform()
                    time.sleep(1)
                    WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="root"]/div[1]/div/div[2]/div[3]/ul/li[9]/button'))).click()
                    time.sleep(self.process_delay)
                except:
                    return Result.PASS

    def SlideNetworkCheck(self):
        path = os.getcwd()
        img_ori = cv2.imread(path + '/driver/scrollbar.png', 0)
        try:
            matching_position = pag.locateCenterOnScreen(path + '/driver/scrollbar.png', confidence=0.6)
        except:
            self.text.run('슬라이드바 이미지 찾기에 실패했습니다.')
            return Result.FAIL
        
        if matching_position == None:
            return Result.UNKNOWN

        if self.debug_mode == True:
            target_x = matching_position.x - 160
        else:
            target_x = matching_position.x - 130

        target_y = matching_position.y + 15

        try:
            pag.moveTo(target_x, target_y, duration=random.uniform(0.20001, 0.87999))
            time.sleep(1)
            pag.moveTo(target_x + 10, target_y - 5)
            time.sleep(1)
            pag.dragTo(target_x + 500.1911, target_y - 5, duration=random.uniform(0.67801, 0.79999), button='left')
            time.sleep(2)
            self.driver.execute_script("window.scrollTo(0, 0)")
            time.sleep(1)
            ret = self.ScrollPageDown()
        except:
            self.text.run('슬라이드바 슬라이딩에 실패했습니다.')
            return Result.FAIL

        try:
            matching_position = pag.locateCenterOnScreen(path + '/driver/scroll_fail.png', confidence=0.6)
        except:
            self.text.run('슬라이드바 fail 이미지 찾기에 실패했습니다.')
            return Result.FAIL
        
        if matching_position == None:
            return Result.PASS
        else:
            return Result.RETRY
        
    # 쓰레드 종료
    def KillThread(self):
        pid = os.getpid()
        os.kill(pid, 2)

    # UI에 텍스트 출력
    @pyqtSlot(str)
    def ConnectTextBrowser(self, print_str):
        self.textBrowser.append(print_str)
        self.textBrowser.repaint()

    @pyqtSlot(int)
    def ConnectMessageBox(self, ret):
        return ret

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MyWindow()
    window.show()
    app.exec_()
