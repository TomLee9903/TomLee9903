# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from itertools import product
import sys
from tkinter import dialog
from typing import Text
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5 import uic
from PyQt5.QtCore import *
from PyQt5.QtCore import pyqtSlot

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
import chromedriver_autoinstaller

import time
import datetime
import os
import pandas as pd
import threading
import shutil
import subprocess
from urllib.request import Request, urlopen
import requests
import re
import tkinter
import googletrans as google
import pyautogui
import openpyxl
from urllib import parse
import numpy as np

# QT designer ui 파일 로드
form_class = uic.loadUiType("./driver/main_ui.ui")[0]

# UI 텍스트 출력 클래스
class TextBrowser(QThread):
    # signal을 MyWindow에 전달할 수 있게 하는 인자
    finished = pyqtSignal(str)
    now_date = ''

    @pyqtSlot(str)
    def run(self, print_str):
        self.make_log(print_str)

    @pyqtSlot(str)
    def make_log(self, print_str):
        self.now_time = datetime.datetime.now()
        self.now_date = self.now_time.strftime('[%Y-%m-%d %H:%M:%S]  ') + print_str
        self.finished.emit(self.now_date)   # signal MyWindow에 전달

    def GetTime(self):
        self.now_time = datetime.datetime.now()
        return self.now_time

# UI 구성 클래스
class MyWindow(QMainWindow, form_class):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.cnt = 0
        self.setWindowIcon(QIcon('./driver/AliImage.png'))    # UI에 Naver icon 설정
        self.run_btn.clicked.connect(self.Run)  # 검색 버튼 누르면 self.Run 함수 실행
        self.process_delay = 1.5
        self.text = TextBrowser()               # UI에 text 출력 위한 객체
        self.translator = google.Translator()
        self.extra = False
        self.skip_option = False
        #self.silent_mode = True
		
        self.text.finished.connect(self.ConnectTextBrowser) # TextBrowser한테서 signal 받으면 ConnectTextBrowser 함수 실행
        self.exit_btn.clicked.connect(self.QuitProgram) # 종료 버튼 클릭하면 프로그램 종료되게끔 설정 & thread 종료
        # self.order_btn.clicked.connect(self.SetArrange)
        # self.accuracy_btn.clicked.connect(self.SetArrange)
        self.no_option.clicked.connect(self.SetOptionCollect)
        self.auto_translate_btn.clicked.connect(self.SetAutoTranslate)
        self.url_btn.clicked.connect(self.OpenUrl)
        self.search_btn.clicked.connect(self.SearchItem)
        self.item_name_radio.clicked.connect(self.SetExtraDataCollection)
        self.category_radio.clicked.connect(self.SetExtraDataCollection)
        self.super_deal_radio.clicked.connect(self.SetExtraDataCollection)
        self.coupon_radio.clicked.connect(self.SetExtraDataCollection)
        self.free_radio.clicked.connect(self.SetExtraDataCollection)
        self.quick_delivery_radio.clicked.connect(self.SetExtraDataCollection)
        #self.silent_mode_btn.clicked.connect(self.SetSilentMode)
		
    # UI 창닫기 버튼 클릭하면 종료 의사 묻는 팝업창 띄우기
    def closeEvent(self, QCloseEvent): 
        ans = QMessageBox.question(self, "종료 확인", "종료하시겠습니까?",
                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)
        if ans == QMessageBox.Yes:
            QCloseEvent.accept()
            self.KillThread()
        else:
            QCloseEvent.ignore()
    
    def SetOptionCollect(self):
        skip_option_collect = self.no_option.isChecked()
        if skip_option_collect == True:
            self.skip_option = True
        elif skip_option_collect == False:
            self.skip_option = False
    
    def SetArrange(self):
        if self.order_btn.isChecked():
            self.arrange = 0
        elif self.accuracy_btn.isChecked():
            self.arrange = 1


    def SetSilentMode(self):
        silent = self.silent_mode_btn.isChecked()
        if silent == True:
            self.silent_mode = True
        elif silent == False:
            self.silent_mode = False
    # 종료 버튼 누르면 실행되는 함수
    def QuitProgram(self):
        QCoreApplication.instance().quit
        self.KillThread()

    # 검색 버튼 누르면 실행되는 Run 함수
    def Run(self):
        self.th = threading.Thread(target=self.StartCrawl)
        self.th.daemon = True
        self.th.start()
    
    def Retry(self):
        self.restart = True
        ret = self.CrawlDataWithItemName()

        return ret

    def SetAutoTranslate(self):
        if self.auto_translate_btn.isChecked():
            self.translate = True
        else:
            self.translate = False

    def SetExtraDataCollection(self):
        if self.item_name_radio.isChecked():
            self.extra = 0
        elif self.category_radio.isChecked():
            self.extra = 1
        elif self.super_deal_radio.isChecked():
            self.extra = 2
        elif self.coupon_radio.isChecked():
            self.extra = 3
        elif self.free_radio.isChecked():
            self.extra = 4
        elif self.quick_delivery_radio.isChecked():
            self.extra = 5

    # 징동닷컴 크롤링 함수
    def StartCrawl(self):
        self.text.run('--Start work--')
        self.text.run('PGM ver : 22092116-Final')
        self.start_time = self.text.GetTime()
        root = tkinter.Tk()
        root.withdraw()
        self.windows_user_name = os.path.expanduser('~')
        self.sku_id = []
        self.final_cnt = 0
        self.restart = False
        self.i = 0
        self.idx = 0
        self.search_url = ""
        self.no_crawl = False
        self.final_cnt = 0
        self.sku_id = []
        self.translate = False
        self.arrange = 0

        if self.page_cnt.text() != "":
            self.cnt_page = int(self.page_cnt.text())
        else:
            self.cnt_page = 1
        self.tb = pd.read_excel('./driver/sheet_reference.xlsx')
        self.columns = list(self.tb.columns)
        self.wb = openpyxl.Workbook()
        self.sheet = self.wb.active
        self.sheet.append(self.columns)

        #self.OpenUrl()
        ret = self.CrawlDataWithItemName()
        
        if ret == 0:
            while True:
                ret = self.Retry()
                if ret == 1:
                    break

    # 징동닷컴 URL 오픈
    @pyqtSlot()
    def OpenUrl(self):
        # try:
        #     shutil.rmtree(r"c:\chrometemp")  #쿠키 / 캐쉬파일 삭제
        # except FileNotFoundError:
        #     pass
        
        try:
            subprocess.Popen(r'C:\Program Files\Google\Chrome\Application\chrome.exe --remote-debugging-port=9222 --user-data-dir="C:\chrometemp"') # 디버거 크롬 구동
        except:
            subprocess.Popen(r'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe --remote-debugging-port=9222 --user-data-dir="C:\chrometemp"') # 디버거 크롬 구동

        self.options = Options()
        # if self.silent_mode == True:
        #     self.options.add_argument('--headless')

        self.options.add_experimental_option("debuggerAddress", "127.0.0.1:9222")
        
        # 크롬 버전을 확인하여 버전이 안맞으면 자동으로 업데이트 하여 설치해주는 옵션       
        chrome_ver = chromedriver_autoinstaller.get_chrome_version().split('.')[0]
        try:
            self.driver = webdriver.Chrome(f'./{chrome_ver}/chromedriver.exe', options=self.options)
        except:
            chromedriver_autoinstaller.install(True)
            self.driver = webdriver.Chrome(f'./{chrome_ver}/chromedriver.exe', options=self.options)
        self.driver.implicitly_wait(10)
        
        # 속도 향상을 위한 옵션 해제
        self.options.add_argument("disable-gpu") 
        self.options.add_argument("disable-infobars")
        self.options.add_argument("--disable-extensions")
        prefs = {'profile.default_content_setting_values': {'cookies' : 2, 'images': 2, 'plugins' : 2, 'popups': 2, 'geolocation': 2, 'notifications' : 2, 'auto_select_certificate': 2, 'fullscreen' : 2, 'mouselock' : 2, 'mixed_script': 2, 'media_stream' : 2, 'media_stream_mic' : 2, 'media_stream_camera': 2, 'protocol_handlers' : 2, 'ppapi_broker' : 2, 'automatic_downloads': 2, 'midi_sysex' : 2, 'push_messaging' : 2, 'ssl_cert_decisions': 2, 'metro_switch_to_desktop' : 2, 'protected_media_identifier': 2, 'app_banner': 2, 'site_engagement' : 2, 'durable_storage' : 2}}   
        self.options.add_experimental_option('prefs', prefs)
        # 크롬 브라우저와 셀레니움을 사용하면서 발생되는 '시스템에 부착된 장치가 작동하지 않습니다.' 라는 크롬 브라우저의 버그를 조치하기 위한 코드. 
        self.options.add_experimental_option("excludeSwitches", ["enable-logging"])

        # 윈도우 사이즈 맥스로 키우기
        self.driver.maximize_window()
        self.driver.get('https://ko.aliexpress.com/')
        time.sleep(1)
        pyautogui.press('f12')
        time.sleep(2)
        pyautogui.press('f12')
        self.text.run('알리익스프레스 URL open 완료')
        self.ac = ActionChains(self.driver)  # 셀레니움 동작을 바인딩 하여 동작 할 수 있게 하는 모듈                    

        time.sleep(self.process_delay)

    def SearchItem(self):
        self.item_text = self.item_name.text()
        self.ClickSearchButton()

    def CrawlDataWithItemName(self):
        if self.restart == False:
            self.j = 0
            self.final_cnt = 0
        else:
            #self.driver.get(self.search_url)
            self.driver.refresh()
            time.sleep(self.process_delay)
        
        if self.restart == False:        
            WebDriverWait(self.driver, 50).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#header > div')))

        if self.item_name.text() == '':
            try:
                url = self.driver.current_url
                link_name = url.split('wholesale-')[1].split('.html')[0]
            except:
                try:
                    link_name = url.split('SearchText=')[1]
                    if '&ltype=wholesale' in link_name:
                        link_name = link_name.split('&ltype=wholesale')[0]
                except:
                    try:
                        link_name = url.split('.html')[0].split('/')[-1]
                    except:
                        link_name = ''
            self.item_text = parse.unquote(link_name)
        else:
            self.item_text = self.item_name.text()

        if self.extra == 0 or self.extra == 1:
            #self.ClickSearchButton()
            time.sleep(2)
            # 바둑판 배열로 정렬
            if self.restart == False:
                try:
                    WebDriverWait(self.driver, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR, '#root > div > div.page-content > div.main-content > div.right-menu > div > div.top-container > div.top-refine > div.sort > div.none-rtl.display-mode > svg:nth-child(2)'))).click()
                except:
                    self.text.run('바둑판 배열 클릭에 실패했습니다.')
                    if len(self.driver.window_handles) != 1:
                        for n in range(len(self.driver.window_handles) - 1):
                            last_tab = self.driver.window_handles[-1]
                            self.driver.switch_to.window(window_name=last_tab)
                            self.driver.close()
                        first_tab = self.driver.window_handles[0]
                        self.driver.switch_to.window(window_name=first_tab)
                        time.sleep(self.process_delay)
                    return 0

                # 메인화면인지 확인
                try:
                    WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, '#root > div.glosearch-wrap > div > div.main-content > div.right-menu > div')))        
                except:
                    self.text.run('바둑판 배열 클릭에 실패했습니다.')
                    if len(self.driver.window_handles) != 1:
                        for n in range(len(self.driver.window_handles) - 1):
                            last_tab = self.driver.window_handles[-1]
                            self.driver.switch_to.window(window_name=last_tab)
                            self.driver.close()
                        first_tab = self.driver.window_handles[0]
                        self.driver.switch_to.window(window_name=first_tab)
                        time.sleep(self.process_delay)
                    return 0

        # 페이지 스크롤 최대치로 내리기            
        before_h = self.driver.execute_script('return window.scrollY')
        page_cnt = 0
        while(True):
            self.driver.find_element_by_css_selector('body').send_keys(Keys.END)
            time.sleep(1)
            after_h = self.driver.execute_script('return window.scrollY') 

            if after_h == before_h or page_cnt == 20:
                break
            else:
                before_h = after_h
            page_cnt += 1
        
        before_h = 0
        after_h = 0
        
        num_temp = 0
        sub_idx = 0
        id_list = []
        if self.extra == 0 or self.extra == 1:
            try:
                temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.page-content > div.main-content > div.right-menu > div > div.JIIxO > div:nth-child(1) > div')))[0]
            except:
                try:
                    temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div > div.main-content > div.right-menu > div > div.JIIxO > a:nth-child(1)')))[0]
                    sub_idx = 1
                except:
                    id_list = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="recyclerview"]')))[0].get_attribute('innerHTML').split('div id="')[1:]
                    for i in range(len(id_list)):
                        id_list[i] = id_list[i].split('" data-spm')[0]
                    num_list = 1
                    row_num = 2
                    sub_idx = 2
                num_temp = 1
        elif self.extra == 2:
            # 슈퍼딜
            try:
                temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="recyclerview"]/div/div[5]/div/div[1]/div/div[1]/img')))[0]
                num_temp = 2
                self.item_text = '슈퍼딜'
            except:
                self.text.run('슈퍼딜 상품이 매진되었습니다.')
                return 1
        elif self.extra == 3:
            # 신규 쿠폰
            text = self.driver.find_element(By.CSS_SELECTOR, '#root > div > div > div:nth-child(2)').get_attribute('innerHTML').split('cursor: pointer;">')
            for i in range(len(text)):
                text[i] = text[i].split('</')[0]
                if '<div' in text[i] or '' == text[i]:
                    continue
                else:
                    self.item_text = text[i]
                    break
            num_temp = 3
        elif self.extra == 4:
            # 꽁돈대첩
            try:
                id_list = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="recyclerview"]')))[0].get_attribute('innerHTML').split('div id="')[1:]
                for i in range(len(id_list)):
                    id_list[i] = id_list[i].split('" data-spm')[0]
                num_temp = 4
                num_list = 1
                row_num = 2
                self.item_text = '꽁돈대첩'
            except:
                self.text.run('지원하지 않는 페이지입니다.')
                return 1
        elif self.extra == 5:
            # 신규 쿠폰
            try:
                id_list = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="recyclerview"]')))[0].get_attribute('innerHTML').split('div id="')[1:]
                for i in range(len(id_list)):
                    id_list[i] = id_list[i].split('" data-spm')[0]
                num_temp = 5
                num_list = 1
                row_num = 2
                self.item_text = '깜짝배송'
            except:
                self.text.run('지원하지 않는 페이지입니다.')
                return 1

        while True:
        #while self.j < 60:
            self.no_crawl = False
            self.search_url = self.driver.current_url
            try:
                #temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="root"]/div/div[1]/div[2]/div[2]/div/div[2]/div[{}]'.format(str(self.j + 1)))))[0]
                if num_temp == 0:
                    if sub_idx == 0:
                        temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.page-content > div.main-content > div.right-menu > div > div.JIIxO > div:nth-child({}) > a > img'.format(self.j+1))))[0]
                    elif sub_idx == 1:
                        temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div > div.main-content > div.right-menu > div > div.JIIxO > a:nth-child({})'.format(self.j+1))))[0]
                    elif sub_idx == 2:
                        if len(id_list) > 0:
                            temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="{}"]/div[{}]/div/div[{}]/a'.format(id_list[-1], row_num, num_list))))[0]
                            num_list += 1
                            if num_list == 6:
                                row_num += 1
                                num_list = 1
                elif num_temp == 1:
                    if len(id_list) > 0:
                        temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="{}"]/div[{}]/div/div[{}]/a'.format(id_list[-1], row_num, num_list))))[0]
                        num_list += 1
                        if num_list == 6:
                            row_num += 1
                            num_list = 1
                    else:
                        temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div > div.main-content > div.right-menu > div > div.JIIxO > a:nth-child({})'.format(self.j+1))))[0]
                        
                elif num_temp == 2:
                    try:
                        temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="recyclerview"]/div/div[5]/div/div[{}]/div/div[1]/img'.format(self.j+1))))[0]
                    except:
                        self.driver.find_element_by_css_selector('body').send_keys(Keys.END)
                        time.sleep(1)
                        temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="recyclerview"]/div/div[5]/div/div[{}]/div/div[1]/img'.format(self.j+1))))[0]
                elif num_temp == 3:
                    if self.item_text == 'US $0.01':
                        try:
                            temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="root"]/div/div/div[3]/div[2]/a[{}]'.format(self.j+1))))[0]
                        except:
                            self.driver.find_element_by_css_selector('body').send_keys(Keys.END)
                            time.sleep(1)
                            temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="root"]/div/div/div[3]/div[2]/a[{}]'.format(self.j+1))))[0]
                    elif self.item_text == 'Coupon':
                        try:
                            temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="root"]/div/div/div[4]/div[4]/div/a[{}]'.format(self.j+1))))[0]
                        except:
                            self.driver.find_element_by_css_selector('body').send_keys(Keys.END)
                            time.sleep(1)
                            temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="root"]/div/div/div[4]/div[4]/div/a[{}]'.format(self.j+1))))[0]
                    elif self.item_text == '단독 특별가':
                        try:
                            temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="root"]/div/div/div[3]/div[4]/div/a[{}]'.format(self.j+1))))[0]
                        except:
                            self.driver.find_element_by_css_selector('body').send_keys(Keys.END)
                            time.sleep(1)
                            temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="root"]/div/div/div[3]/div[4]/div/a[{}]'.format(self.j+1))))[0]
                elif num_temp == 4:
                    try:
                        temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="{}"]/div[{}]/div/div[{}]/a'.format(id_list[-1], row_num, num_list))))[0]
                    except:
                        self.driver.find_element_by_css_selector('body').send_keys(Keys.END)
                        time.sleep(1)
                        temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="{}"]/div[{}]/div/div[{}]/a'.format(id_list[-1], row_num, num_list))))[0]
                    num_list += 1
                    if num_list == 6:
                        row_num += 1
                        num_list = 1
                elif num_temp == 5:
                    try:
                        temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="{}"]/div[{}]/div/div[{}]/a'.format(id_list[-1], row_num, num_list))))[0]
                    except:
                        self.driver.find_element_by_css_selector('body').send_keys(Keys.END)
                        time.sleep(1)
                        temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="{}"]/div[{}]/div/div[{}]/a'.format(id_list[-1], row_num, num_list))))[0]
                    num_list += 1
                    if num_list == 6:
                        row_num += 1
                        num_list = 1

                self.ac.move_to_element(temp).pause(0.5).click().perform()
                time.sleep(1)
            except:
                if self.extra == 0 or self.extra == 1:
                    try:
                        cnt = 0
                        while True:
                            if cnt == 5:
                                self.text.run('{}페이지 {}번째가 마지막 상품입니다.'.format(self.i + 1, self.j))
                                self.text.run('크롤링이 완료되었습니다.')
                                self.j = 0
                                self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                                # 크롬드라이버 종료
                                self.end_time = self.text.GetTime()
                                diff_time = self.end_time - self.start_time
                                self.text.run('--End work--')
                                self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                                self.restart = True

                                return 1

                            self.text.run('웹페이지를 새로고침 합니다.')
                            self.driver.refresh()
                            time.sleep(5)
                            self.driver.execute_script("window.scrollTo(0, 0)")
                            time.sleep(2)

                            # 페이지 스크롤 최대치로 내리기            
                            before_h = self.driver.execute_script('return window.scrollY')
                            page_cnt = 0
                            while(True):
                                self.driver.find_element_by_css_selector('body').send_keys(Keys.END)
                                time.sleep(1)
                                after_h = self.driver.execute_script('return window.scrollY') 

                                if after_h == before_h or page_cnt == 20:
                                    break
                                else:
                                    before_h = after_h
                                page_cnt += 1
                            
                            before_h = 0
                            after_h = 0
                            time.sleep(1)
                            try:
                                if num_temp == 0:
                                    if sub_idx == 0:
                                        temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.page-content > div.main-content > div.right-menu > div > div.JIIxO > div:nth-child({}) > a > img'.format(self.j+1))))[0]
                                    elif sub_idx == 1:
                                        temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div > div.main-content > div.right-menu > div > div.JIIxO > a:nth-child({})'.format(self.j+1))))[0]
                                    elif sub_idx == 2:
                                        if len(id_list) > 0:
                                            temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="{}"]/div[{}]/div/div[{}]/a'.format(id_list[-1], row_num, num_list))))[0]
                                            num_list += 1
                                            if num_list == 6:
                                                row_num += 1
                                                num_list = 1
                                elif num_temp == 1:
                                    if len(id_list) > 0:
                                        temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="{}"]/div[{}]/div/div[{}]/a'.format(id_list[-1], row_num, num_list))))[0]
                                        num_list += 1
                                        if num_list == 6:
                                            row_num += 1
                                            num_list = 1
                                    else:
                                        temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div > div.main-content > div.right-menu > div > div.JIIxO > a:nth-child({})'.format(self.j+1))))[0]
                                        
                                self.ac.move_to_element(temp).pause(0.5).click().perform()
                                time.sleep(1)
                                break
                            except:
                                cnt += 1
                                continue
                    except:
                        self.text.run('{}페이지 {}번째가 마지막 상품입니다.'.format(self.i + 1, self.j))
                        self.text.run('크롤링이 완료되었습니다.')
                        self.j = 0
                        self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                        # 크롬드라이버 종료
                        self.end_time = self.text.GetTime()
                        diff_time = self.end_time - self.start_time
                        self.text.run('--End work--')
                        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                        self.restart = True

                        return 1
                else:
                    self.text.run('{}번째가 마지막 상품입니다.'.format(self.final_cnt))
                    self.text.run('크롤링이 완료되었습니다.')
                    self.j = 0
                    self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                    # 크롬드라이버 종료
                    self.end_time = self.text.GetTime()
                    diff_time = self.end_time - self.start_time
                    self.text.run('--End work--')
                    self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                    self.restart = True

                    return 1
            
            # 알리익스프레스 검색 선택링크주소
            last_tab = self.driver.window_handles[-1]
            self.driver.switch_to.window(window_name=last_tab)
            try:
                select_url = self.driver.current_url
            except:
                self.driver.refresh()

            try:
                WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))
                self.product_main = WebDriverWait(self.driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')
            except:
                if (self.extra == 0 or self.extra == 1):
                    self.text.run('이미지 클릭에 실패했습니다.')
                    if len(self.driver.window_handles) != 1:
                        for n in range(len(self.driver.window_handles) - 1):
                            last_tab = self.driver.window_handles[-1]
                            self.driver.switch_to.window(window_name=last_tab)
                            self.driver.close()
                        first_tab = self.driver.window_handles[0]
                        self.driver.switch_to.window(window_name=first_tab)
                        time.sleep(self.process_delay)
                    return 0
                else:
                    self.driver.find_element_by_css_selector('body').send_keys(Keys.END)
                    time.sleep(1)
                    continue
            
            temp = []
            temp1 = self.product_main.split('title=')[1:]
            for i in range(len(temp1)):
                if 'img src=' in temp1[i] or 'class="product-quantity' in temp1[i]:
                    temp.append(temp1[i])

            if self.skip_option == True:
                if len(temp) > 1:
                    self.text.run('{}페이지 {}번째 아이템은 옵션이 있는 상품입니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
                    if len(self.driver.window_handles) != 1:
                        for n in range(len(self.driver.window_handles) - 1):
                            last_tab = self.driver.window_handles[-1]
                            self.driver.switch_to.window(window_name=last_tab)
                            self.driver.close()
                        first_tab = self.driver.window_handles[0]
                        self.driver.switch_to.window(window_name=first_tab)
                        time.sleep(self.process_delay)
                    if self.j == 59 and (self.extra == 0 or self.extra == 1):
                        try:
                            self.driver.find_element_by_xpath('//*[@id="root"]/div/div/div[2]/div[2]/div/div[3]/div/div[1]/div/button[2]').click()
                        except:
                            self.text.run('{}페이지가 마지막 페이지입니다.'.format(self.i + 1))
                            self.text.run('크롤링이 완료되었습니다.')
                            self.j = 0
                            self.final_cnt += 1
                            self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                            # 크롬드라이버 종료
                            self.end_time = self.text.GetTime()
                            diff_time = self.end_time - self.start_time
                            self.text.run('--End work--')
                            self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                            self.restart = True
                            return 1

                        self.j = 0
                        self.i += 1
                        time.sleep(self.process_delay)
                    else:
                        self.j += 1
                        self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))

                    continue
            time.sleep(1)
            # 페이지 스크롤 최대치로 내리기
            before_h = self.driver.execute_script('return window.scrollY')
            while(True):
                self.driver.find_element_by_css_selector('body').send_keys(Keys.END)
                time.sleep(1)
                after_h = self.driver.execute_script('return window.scrollY') 

                if after_h == before_h:
                    break
                else:
                    before_h = after_h
            
            # 선택제품가격
            self.price = self.GetPrice()
            if self.no_crawl == True:
                self.text.run('{}페이지 {}번째 아이템은 옵션이 있는 상품입니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
                if len(self.driver.window_handles) != 1:
                    for n in range(len(self.driver.window_handles) - 1):
                        last_tab = self.driver.window_handles[-1]
                        self.driver.switch_to.window(window_name=last_tab)
                        self.driver.close()
                    first_tab = self.driver.window_handles[0]
                    self.driver.switch_to.window(window_name=first_tab)
                    time.sleep(self.process_delay)
                if self.j == 59 and (self.extra == 0 or self.extra == 1):
                    try:
                        self.driver.find_element_by_xpath('//*[@id="root"]/div/div/div[2]/div[2]/div/div[3]/div/div[1]/div/button[2]').click()
                    except:
                        self.text.run('{}페이지가 마지막 페이지입니다.'.format(self.i + 1))
                        self.text.run('크롤링이 완료되었습니다.')
                        self.j = 0
                        self.final_cnt += 1
                        self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                        # 크롬드라이버 종료
                        self.end_time = self.text.GetTime()
                        diff_time = self.end_time - self.start_time
                        self.text.run('--End work--')
                        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                        self.restart = True
                        return 1

                    self.j = 0
                    self.i += 1
                    time.sleep(self.process_delay)
                else:
                    self.j += 1
                    self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))

                continue

            # 상품제목
            self.title = self.GetTitle()

            # 대표이미지
            self.img_url = self.GetRepresentImage()

            self.windows_user_name = os.path.expanduser('~')

            # 상세 페이지
            self.detail_imgs = self.GetDetailImages()
            self.detail_imgs = '\n'.join(self.detail_imgs)
            
            option1_list = []
            option1_total = []
            option2_list = []
            prices = []

            # 옵션1
            option1_total, option1_list, option2_list, prices = self.GetOption1()
            if self.no_crawl == True:
                if len(self.driver.window_handles) != 1:
                    for n in range(len(self.driver.window_handles) - 1):
                        last_tab = self.driver.window_handles[-1]
                        self.driver.switch_to.window(window_name=last_tab)
                        self.driver.close()
                    first_tab = self.driver.window_handles[0]
                    self.driver.switch_to.window(window_name=first_tab)
                    time.sleep(self.process_delay)
                if self.j == 59 and (self.extra == 0 or self.extra == 1):
                    try:
                        self.driver.find_element_by_xpath('//*[@id="root"]/div/div/div[2]/div[2]/div/div[3]/div/div[1]/div/button[2]').click()
                    except:
                        self.text.run('{}페이지가 마지막 페이지입니다.'.format(self.i + 1))
                        self.text.run('크롤링이 완료되었습니다.')
                        self.j = 0
                        self.final_cnt += 1
                        self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                        # 크롬드라이버 종료
                        self.end_time = self.text.GetTime()
                        diff_time = self.end_time - self.start_time
                        self.text.run('--End work--')
                        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                        self.restart = True

                        return 1

                    self.j = 0
                    self.i += 1
                    time.sleep(self.process_delay)
                else:
                    self.j += 1
                    self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                continue

            option1_list = '\n'.join(option1_list)
            option1_total = '\n'.join(option1_total)
            if len(option2_list) > 0:
                option2_list = '\n'.join(option2_list)
            else:
                option2_list = ''
            if self.price == "暂无报价":
                price_final = "暂无报价"
            elif len(prices) > 1:
                price_final = '{}-{}'.format(min(prices), max(prices))
            else:
                price_final = self.price
            self.sheet.append([self.item_text,'','','','','','','','','','','',self.search_url, select_url, price_final, self.title, 
                               self.img_url, option1_list, option2_list, option1_total, self.detail_imgs])
            self.SaveFile()

            if len(self.driver.window_handles) != 1:
                for n in range(len(self.driver.window_handles) - 1):
                    last_tab = self.driver.window_handles[-1]
                    self.driver.switch_to.window(window_name=last_tab)
                    self.driver.close()
                    time.sleep(1)

                first_tab = self.driver.window_handles[0]
                self.driver.switch_to.window(window_name=first_tab)

            if self.final_cnt == (self.cnt_page * 60) - 1:
                self.final_cnt += 1
                if (self.extra == 0 or self.extra == 1):
                    self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                self.text.run('마지막 아이템입니다.')
                self.text.run('크롤링이 완료되었습니다.')
                self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                # 크롬드라이버 종료
                self.end_time = self.text.GetTime()
                diff_time = self.end_time - self.start_time
                self.text.run('--End work--')
                self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                self.restart = True

                return 1
            else:
                if (self.extra == 0 or self.extra == 1):
                    self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                if self.j == 59 and (self.extra == 0 or self.extra == 1):
                    try:
                        self.driver.find_element_by_xpath('//*[@id="root"]/div/div/div[2]/div[2]/div/div[3]/div/div[1]/div/button[2]').click()
                    except:
                        self.text.run('{}페이지가 마지막 페이지입니다.'.format(self.i + 1))
                        self.text.run('크롤링이 완료되었습니다.')
                        self.j = 0
                        self.final_cnt += 1
                        self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                        # 크롬드라이버 종료
                        self.end_time = self.text.GetTime()
                        diff_time = self.end_time - self.start_time
                        self.text.run('--End work--')
                        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                        self.restart = True

                        return 1

                    self.j = 0
                    self.i += 1
                    self.final_cnt += 1
                    self.idx += 1
                    time.sleep(self.process_delay)
                    self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
                    continue        

            self.final_cnt += 1
            self.idx += 1
            self.j += 1
            self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt))
    
    def GetPrice(self):
        try:
            price = self.product_main.split('product-price-original')[1].split('US $')[1].split('</')[0].replace('"', '').replace(',','').split(' /')[0]
        except:
            try:
                price = self.product_main.split('uniform-banner-box-discounts')[1].split('US $')[1].split('</')[0].replace('"', '').replace(',','').split(' /')[0]
            except:
                try:
                    price = self.product_main.split('product-price-value')[1].split('US $')[1].split('</')[0].replace('"', '').replace(',','').split(' /')[0]
                except:
                    self.no_crawl = True

        if self.no_crawl == False:
            if '-' in price:
                return float(price.split(' -')[0])
            else:
                return float(price)
        else:
            return ''

    def GetTitle(self):
        title = self.product_main.split('img alt=')[1].split('" ')[0].replace('"', '')
        return title

    def GetRepresentImage(self):
        #img_url = WebDriverWait(self.driver, 1).until(EC.presence_of_element_located((By.CSS_SELECTOR,'#poster'))).get_attribute('src').split('_.webp')[0]
        img_url = self.product_main.split('src=')[2].split('_.webp')[0].split('.jpg')[0].replace('_50x50.jpg','').replace('"', '') + '.jpg'
        if '.png' in img_url:
            img_url = img_url.split('_.webp')[0].replace('"','').replace('_50x50.png','').replace('.png', '') + '.png'
            
        return img_url

    def GetOption1(self):
        option1_total = []
        option1_list = []
        option2_list = []
        option3_list = []
        options = [[], [], []]
        prices = []
        max_price = 0
        temp = []
        tt = []

        prop_temp = self.product_main.split('sku-title')[1:]
        len_prop_temp = int(len(prop_temp) / 2)
        if len_prop_temp > 2:
            self.text.run('이 상품은 옵션 타입이 2개 초과인 상품입니다. 다음 아이템으로 넘어갑니다.')
            self.no_crawl = True
            option1_total = []
            option1_list = []
            option2_list = []
            prices = []

            return option1_total, option1_list, option2_list, prices

        if len(prop_temp) > 0:
            for i in range(len_prop_temp):
                tt = list(prop_temp[i*2+1].split(' title="')[1:])
                if len(tt) != 0 and ('sku-property-text"><span>' in prop_temp[i*2+1] and 'sku-property-image' in prop_temp[i*2+1]):
                    self.text.run('{}페이지 {}번째 아이템은 이미지가 있는 옵션/없는 옵션이 섞인 상품입니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
                    self.no_crawl = True
                    option1_total = []
                    option1_list = []
                    option2_list = []
                    prices = []

                    return option1_total, option1_list, option2_list, prices

                if len(tt) == 0 or (len(tt) != 0 and '" type="button" class=' in tt[0]):
                    tt = list(prop_temp[i*2+1].split('sku-property-text"><span>')[1:])

                for j in range(len(tt)):
                    options[i].append(tt[j].split('</')[0] + ';')

        if len(options) >= 2 and len(options[1]) != 0:
            option2_list = options[1]

        sku = self.product_main.split('ae_object_value')[1].split('" st_')[0].replace('="','')
        if sku in self.sku_id:
            self.text.run('{}페이지 {}번째 아이템은 이미 수집된 상품입니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))

            self.no_crawl = True
            option1_total = []
            option1_list = []
            option2_list = []
            prices = []

            return option1_total, option1_list, option2_list, prices
        else:
            self.sku_id.append(sku)

        if len(options[0]) > 30:
            self.text.run('{}페이지 {}번째 아이템의 옵션 갯수를 30개로 한정합니다.'.format(self.i + 1, self.j + 1))
            option1_total = []
            option1_list = []
            option2_list = []
            prices = []
            self.no_crawl = True

            return option1_total, option1_list, option2_list, prices

        del_idx = 0
        for i in range(len(options[0])):
            if '" type="button"' in options[0][i - del_idx]:
                del options[0][i - del_idx]
                del_idx += 1
        
        del_idx = 0
        if len(options[1]) != 0:
            for i in range(len(options[1])):
                if '" type="button"' in options[1][i - del_idx]:
                    del options[1][i - del_idx]
                    del_idx += 1
                options[1][i - del_idx] = options[1][i - del_idx].split('" alt=')[0].split(';')[0] + ';'

        if self.skip_option == True:
            if len(options[0]) > 1:
                self.text.run('{}페이지 {}번째 아이템은 옵션이 있는 상품입니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
                self.no_crawl = True
                return option1_total, option1_list, option2_list, prices
                
        imgs = self.product_main.split('sku-property-image')[1:]
        for i in range(len(options[0])):
            if len(imgs) != 0 and len(imgs) == len(options[0]):
                temp_split = options[0][i].split('" alt')[0].split('"></span')[0].replace('"','')
                img_split = imgs[i].split('img src=')[1].split('_.webp')[0].replace('"','').replace('_50x50.jpg','')
            else:
                temp_split = options[0][i]
                img_split = self.img_url
            if self.translate == True:
                translated_text = self.TranslateGoogle(temp_split, 'ko')
            else:
                translated_text = temp_split

            option1_list.append(translated_text.split(';')[0] + ';' + img_split.replace('https://', '').replace('http://',''))
        
            if '.png' in option1_list[i]:
                option1_list[i] = option1_list[i].split('_.webp')[0].replace('"','').replace('_50x50.png','').replace('https://', '').replace('http://','').replace('.png', '') + '.png'

        pre_product_main = ''
        pre_price = ''
        del_idx = 0
        for i in range(len(options[0])):
            try:
                self.driver.find_element(By.CSS_SELECTOR, '#root > div > div.product-main > div > div.product-info > div.product-sku > div > div > ul > li:nth-child({})'.format(i+1)).click()
                time.sleep(0.2)

                if len(option2_list) != 0:
                    for j in range(len(option2_list)):
                        try:
                            self.driver.find_element(By.CSS_SELECTOR, '#root > div > div.product-main > div > div.product-info > div.product-sku > div > div:nth-child(2) > ul > li:nth-child({}) > div'.format(j+1)).click()
                            time.sleep(0.2)
                        except:
                            self.text.run('{}페이지 {}-{}이 품절되었습니다.'.format(self.i + 1, self.j + 1, i + 1))
                            continue
                        
                        product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')
                        if pre_product_main == product_main:
                            time.sleep(0.1)
                            product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')

                        try:
                            price = product_main.split('product-price-original')[1].split('US $')[1].split('</span>')[0]
                        except:
                            try:
                                price = product_main.split('uniform-banner-box-discounts')[1].split('US $')[1].split('</span>')[0]
                            except:
                                price = product_main.split('product-price-value')[1].split('US $')[1].split('</span>')[0]
                        if ' - ' in price:
                            try:
                                self.driver.find_element(By.CSS_SELECTOR, '#root > div > div.product-main > div > div.product-info > div.product-sku > div > div > ul > li:nth-child({})'.format(j+1)).click()
                                time.sleep(0.5)
                            except:
                                self.text.run('{}페이지 {}-{}이 품절되었습니다.'.format(self.i + 1, self.j + 1, i + 1))
                                continue
                            try:
                                product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')
                            except:
                                product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')

                            if pre_product_main == product_main:
                                time.sleep(0.5)
                                product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')

                            try:
                                price = product_main.split('product-price-original')[1].split('US $')[1].split('</span>')[0]
                            except:
                                try:
                                    price = product_main.split('uniform-banner-box-discounts')[1].split('US $')[1].split('</span>')[0]
                                except:
                                    price = product_main.split('product-price-value')[1].split('US $')[1].split('</span>')[0]
                                        
                        prices.append(float(price.replace(',','')))
                        option1_total.append(option1_list[i - del_idx].split(';')[0] + ' + ' + option2_list[j - del_idx].split(';')[0] + '/' + price)
                        if j != 0 and pre_price != price:
                            self.text.run('옵션2에 따라 가격 변동이 있는 상품입니다. 다음 아이템으로 넘어갑니다.')
                            self.no_crawl = True
                            option1_total = []
                            option1_list = []
                            option2_list = []
                            prices = []

                            return option1_total, option1_list, option2_list, prices
                                         
                        pre_product_main = product_main
                        pre_price = price
                else:
                    product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')
                    if pre_product_main == product_main:
                        time.sleep(0.2)
                        product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')
                    try:
                        price = product_main.split('product-price-original')[1].split('US $')[1].split('</span>')[0]
                    except:
                        try:
                            price = product_main.split('uniform-banner-box-discounts')[1].split('US $')[1].split('</span>')[0]
                        except:
                            price = product_main.split('product-price-value')[1].split('US $')[1].split('</span>')[0]
                    if ' - ' in price:
                        try:
                            if len(option2_list) != 0:
                                for dd in range(len(option2_list)):
                                    try:
                                        self.driver.find_element(By.CSS_SELECTOR, '#root > div > div.product-main > div > div.product-info > div.product-sku > div > div:nth-child(2) > ul > li:nth-child({}) > div'.format(dd+1)).click()
                                        time.sleep(0.2)
                                        break
                                    except:
                                        self.text.run('{}페이지 {}-{}이 품절되었습니다.'.format(self.i + 1, self.j + 1, i + 1))
                                        continue                            
                        except:
                            self.text.run('{}페이지 {}-{}이 품절되었습니다.'.format(self.i + 1, self.j + 1, i + 1))
                            continue
                        
                        product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')
                        if pre_product_main == product_main:
                            time.sleep(0.2)
                            product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')
                        try:
                            price = product_main.split('product-price-original')[1].split('US $')[1].split('</span>')[0]
                        except:
                            try:
                                price = product_main.split('uniform-banner-box-discounts')[1].split('US $')[1].split('</span>')[0]
                            except:
                                price = product_main.split('product-price-value')[1].split('US $')[1].split('</span>')[0]

                        while True:
                            if ' - ' in price:                                
                                self.driver.find_element(By.CSS_SELECTOR, '#root > div > div.product-main > div > div.product-info > div.product-sku > div > div > ul > li:nth-child({})'.format(i+1)).click()
                                time.sleep(0.2)
                                product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')
                                if pre_product_main == product_main:
                                    time.sleep(0.2)
                                    product_main = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#root > div > div.product-main')))[0].get_attribute('innerHTML')
                                try:
                                    price = product_main.split('product-price-original')[1].split('US $')[1].split('</span>')[0]
                                except:
                                    try:
                                        price = product_main.split('uniform-banner-box-discounts')[1].split('US $')[1].split('</span>')[0]
                                    except:
                                        price = product_main.split('product-price-value')[1].split('US $')[1].split('</span>')[0]
                                if ' - ' not in price:
                                    break
                            else:
                                break

                    prices.append(float(price.replace(',','')))
                    option1_total.append(option1_list[i - del_idx].split(';')[0] + '/' + price)
            except:
                self.text.run('{}페이지 {}-{}이 품절되었습니다.'.format(self.i + 1, self.j + 1, i + 1))
                del option1_list[i - del_idx]
                del_idx += 1
                continue

        if len(prices) != 0 and len(prices) > 1:
            max_price = abs(max(prices) - min(prices)) / min(prices) * 100                
            if max_price >= 300.0:
                self.text.run('{}페이지 {}번째 아이템의 옵션가격이 본품 금액의 300% 이상입니다. 다음 아이템으로 넘어갑니다'.format(self.i + 1, self.j + 1))
                option1_list = []
                option1_total = []
                prices = []
                self.no_crawl = True

            elif min(prices) <= self.price / 2:
                self.text.run('{}페이지 {}번째 아이템의 옵션가격이 본품 금액의 -50% 이하입니다. 다음 아이템으로 넘어갑니다'.format(self.i + 1, self.j + 1))
                option1_list = []
                option1_total = []
                prices = []
                self.no_crawl = True
            
        return option1_total, option1_list, option2_list, prices
    
    def GetDetailImages(self):
        detail_imgs = []
        try:
            img_temp = self.driver.find_element(By.CSS_SELECTOR, '#product-description').get_attribute('innerHTML').split('src=')[1:]
        except:
            return detail_imgs
    
        for i in range(len(img_temp)):
            if '.jpg' in img_temp[i]:
                if 'https://' not in img_temp[i] and 'http://' not in img_temp[i]:
                    detail_imgs.append('https://' + img_temp[i].split('" ')[0].replace('"', '').split('jpg')[0].replace('//ae', 'ae') + 'jpg')
                else:
                    detail_imgs.append(img_temp[i].split('" ')[0].replace('"', '').split('jpg')[0] + 'jpg')
            elif '.png' in img_temp[i]:
                if 'https://' not in img_temp[i] and 'http://' not in img_temp[i]:
                    detail_imgs.append('https://' + img_temp[i].split('" ')[0].replace('"', '').split('png')[0].replace('//ae', 'ae') + 'png')
                else:
                    detail_imgs.append(img_temp[i].split('" ')[0].replace('"', '').split('png')[0] + 'png')

        return detail_imgs

    def ClickSearchButton(self):
        search_key = self.driver.find_element(By.CSS_SELECTOR, '#search-key')
        self.ac.send_keys_to_element(search_key, self.item_text).pause(1).send_keys(Keys.ENTER).perform()
        # try:
        #     self.driver.get('https://ko.aliexpress.com/w/wholesale-{}.html'.format(self.item_text))
        # except:
        #     self.text.run('검색버튼 클릭에 실패했습니다.')
        #     self.restart = True
        #     return 0
        self.text.run('상품명 검색 : {} 에 성공했습니다.'.format(self.item_text))
        time.sleep(self.process_delay)

    def CleanText(self, inputString):
        text_rmv = re.sub('[-=+,#/\?:^.@*\"※~ㆍ!』‘|\(\)\[\]`\'…》\”\“\’·]', ' ', inputString)
        return text_rmv

    def SaveFile(self):
        ret = 1
        file_folder = '{}\\Desktop\\알리익스프레스_결과물'.format(self.windows_user_name)
        filename = '{}\\{}'.format(file_folder, self.item_text + '_AliExpress_ItemName_results.xlsx')
        try:
            if not os.path.isdir(file_folder):
                os.mkdir(file_folder)
        except OSError:
            self.text.run('파일 폴더를 생성하는데 실패했습니다.')
            return 0

        self.wb.save(filename)
        #self.tb_temp.to_excel(filename, index=False)
        return 1

    def TranslateGoogle(self, text, option):
        try:
            return self.translator.translate(text, dest=option).text
        except:
            return self.translator.translate(text, dest=option).text

    def TranslateChinese(self, text):
        client_id = "Uvq1xEXtYvQQs5zR00p2"
        client_pw = "0j597g2wUR"

        headers = {
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
            'X-Naver-Client-Id': 'Uvq1xEXtYvQQs5zR00p2',
            'X-Naver-Client-Secret': '0j597g2wUR',
        }

        data = {
            'text' : text,
            'source' : 'ko',
            'target' : 'zh-CN'
        }

        response = requests.post('https://openapi.naver.com/v1/papago/n2mt', headers=headers, data=data)
        rescode = response.status_code

        if(rescode==200):
            send_data = response.json()
            trans_data = (send_data['message']['result']['translatedText'])
            return trans_data
        else:
            self.text.run("Papago API 사용량이 모두 소진되었습니다.(하루 최대 10,000개)")

    # 쓰레드 종료
    def KillThread(self):
        pid = os.getpid()
        os.kill(pid, 2)

    # UI에 텍스트 출력
    @pyqtSlot(str)
    def ConnectTextBrowser(self, print_str):
        self.textBrowser.append(print_str)
        self.textBrowser.repaint()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MyWindow()
    window.show()
    app.exec_()
