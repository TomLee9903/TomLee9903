# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5 import uic
from PyQt5.QtCore import *
from PyQt5.QtCore import pyqtSlot

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver import ActionChains
import chromedriver_autoinstaller
import sys
import time
import datetime
import os
import pandas as pd
import threading
import tkinter
import pyautogui
import pygetwindow as gw
import pywinauto
import pyperclip
from tkinter.filedialog import askdirectory
from tkinter.filedialog import askopenfilename
import shutil
import natsort

# QT designer ui 파일 로드
form_class = uic.loadUiType("./driver/main_ui.ui")[0]

# UI 텍스트 출력 클래스
class TextBrowser(QThread):
    # signal을 MyWindow에 전달할 수 있게 하는 인자
    finished = pyqtSignal(str)
    now_date = ''

    @pyqtSlot(str)
    def run(self, print_str):
        self.make_log(print_str)

    @pyqtSlot(str)
    def make_log(self, print_str):
        self.now_time = datetime.datetime.now()
        self.now_date = self.now_time.strftime('[%Y-%m-%d %H:%M:%S]  ') + print_str
        self.finished.emit(self.now_date)   # signal MyWindow에 전달

    def GetTime(self):
        self.now_time = datetime.datetime.now()
        return self.now_time

# UI 구성 클래스
class MyWindow(QMainWindow, form_class):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.setWindowIcon(QIcon('./driver/MainImage.png'))    # UI에 구글 번역 icon 설정
        self.run_btn.clicked.connect(self.Run)  # 검색 버튼 누르면 self.Run 함수 실행
        self.process_delay = 1.5
        self.text = TextBrowser()               # UI에 text 출력 위한 객체
        self.windows_user_name = os.path.expanduser('~')
        self.refresh = False

        self.text.finished.connect(self.ConnectTextBrowser) # TextBrowser한테서 signal 받으면 ConnectTextBrowser 함수 실행
        self.exit_btn.clicked.connect(self.QuitProgram) # 종료 버튼 클릭하면 프로그램 종료되게끔 설정 & thread 종료
        self.file_divide_btn.clicked.connect(self.DivideFile)

        # self.setAcceptDrops(True)
        # self.acceptDrops()

    # UI 창닫기 버튼 클릭하면 종료 의사 묻는 팝업창 띄우기
    def closeEvent(self, QCloseEvent): 
        ans = QMessageBox.question(self, "종료 확인", "종료하시겠습니까?",
                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)
        if ans == QMessageBox.Yes:
            QCloseEvent.accept()
            self.KillThread()
        else:
            QCloseEvent.ignore()
    
    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls():
            event.accept()
        else:
            event.ignore()
 
    def dropEvent(self, event):
        files = [u.toLocalFile() for u in event.mimeData().urls()]
        self.filename = files[0]
        self.df = pd.read_excel(self.filename)
        self.df.fillna('', inplace=True)
        self.text.run('파일 이름 : {}'.format(self.filename.split('/')[-1].replace('.xlsx','')))

    def DivideFile(self):
        self.root = tkinter.Tk()

        self.filename = askopenfilename(parent=self.root, filetypes=[('수집데이터 엑셀', '.*')], initialdir=os.getcwd, title='분할을 원하시는 파일을 선택해주세요')
        self.text.run('파일 경로 : {}'.format(self.filename))

        try:
            self.data_cnt = int(self.data_cnt_input.text())
        except:
            self.data_cnt = 100

        df = pd.read_excel(self.filename, index_col=False, header=None)
        file_name = self.filename.split('/')[-1].split('.')[0]
        folder_path = '/'.join(self.filename.split('.')[0].split('/')[0:-1]) + '/{}_divided'.format(file_name)
        cnt = 7
        len_df = int((len(df[2].dropna()) + 2) / self.data_cnt)
        remain_df = int((len(df[2].dropna()) + 2) % self.data_cnt)
        new_df = []
        no_divide = False

        try:
            if not os.path.isdir(folder_path):
                os.mkdir(folder_path)
        except OSError: 
            self.text.run('파일 폴더를 생성하는데 실패했습니다.')
            return 0

        for i in range(len_df):
            for j in range(self.data_cnt + 7):
                if j < 7:
                    new_df.append(list(df.iloc[j]))
                else:
                    if pd.isna(df.iloc[cnt][2]):
                        no_divide = True
                        break
                    new_df.append(list(df.iloc[cnt]))
                    cnt += 1
            final_df = pd.DataFrame(new_df)
            final_df.to_excel(folder_path + '/{}_{}.xlsx'.format(file_name, i+1), index=False, header=None, sheet_name='일반상품')
            self.text.run('{}번째 파일 분할 성공!'.format(i+1))
            new_df = []
        
        if no_divide == False:
            for i in range(remain_df):
                if i < 7:
                    new_df.append(list(df.iloc[i]))
                else:
                    if pd.isna(df.iloc[cnt][2]):
                        no_divide = True
                        break
                    new_df.append(list(df.iloc[cnt]))
                    cnt += 1

            final_df = pd.DataFrame(new_df)
            final_df.to_excel(folder_path + '/{}_{}.xlsx'.format(file_name, len_df+1), index=False, header=None, sheet_name='일반상품')
            self.text.run('{}번째 파일 분할 성공!'.format(len_df+1))
            new_df = []

    # 종료 버튼 누르면 실행되는 함수
    def QuitProgram(self):
        QCoreApplication.instance().quit
        self.KillThread()

    # 검색 버튼 누르면 실행되는 Run 함수
    def Run(self):
        self.th = threading.Thread(target=self.StartUpload)
        self.th.daemon = True
        self.th.start()

    # 파파고 URL 오픈
    @pyqtSlot()
    def OpenUrl(self):
        self.options = Options()

        #self.options.add_experimental_option("debuggerAddress", "127.0.0.1:9222")
        # 크롬 버전을 확인하여 버전이 안맞으면 자동으로 업데이트 하여 설치해주는 옵션       
        chrome_ver = chromedriver_autoinstaller.get_chrome_version().split('.')[0]
        try:
            self.driver = webdriver.Chrome(f'./{chrome_ver}/chromedriver.exe', options=self.options)
        except:
            chromedriver_autoinstaller.install(True)
            self.driver = webdriver.Chrome(f'./{chrome_ver}/chromedriver.exe', options=self.options)
        self.driver.implicitly_wait(10)
        
        # 속도 향상을 위한 옵션 해제
        self.options.add_argument("disable-gpu") 
        self.options.add_argument("disable-infobars")
        self.options.add_argument("--disable-extensions")
        prefs = {'profile.default_content_setting_values': {'cookies' : 2, 'images': 2, 'plugins' : 2, 'popups': 2, 'geolocation': 2, 'notifications' : 2, 'auto_select_certificate': 2, 'fullscreen' : 2, 'mouselock' : 2, 'mixed_script': 2, 'media_stream' : 2, 'media_stream_mic' : 2, 'media_stream_camera': 2, 'protocol_handlers' : 2, 'ppapi_broker' : 2, 'automatic_downloads': 2, 'midi_sysex' : 2, 'push_messaging' : 2, 'ssl_cert_decisions': 2, 'metro_switch_to_desktop' : 2, 'protected_media_identifier': 2, 'app_banner': 2, 'site_engagement' : 2, 'durable_storage' : 2}}   
        self.options.add_experimental_option('prefs', prefs)
        # 크롬 브라우저와 셀레니움을 사용하면서 발생되는 '시스템에 부착된 장치가 작동하지 않습니다.' 라는 크롬 브라우저의 버그를 조치하기 위한 코드. 
        self.options.add_experimental_option("excludeSwitches", ["enable-logging"])

        # 윈도우 사이즈 맥스로 키우기
        self.driver.maximize_window()
        self.driver.get('https://www.esmplus.com/Member/SignIn/LogOn?ReturnValue=-7')
        self.text.run('ESM Plus URL open 완료')

        time.sleep(self.process_delay)

    @pyqtSlot()
    # 징동닷컴 크롤링 함수
    def StartUpload(self):
        self.text.run('--Start work--')
        self.text.run('PGM ver : 22102305')
        self.start_time = self.text.GetTime()
        self.i = 0
        self.j = 0
        self.root = tkinter.Tk()

        self.folder_name = askdirectory(parent=self.root, title="업로드할 파일 폴더를 선택해주세요.")
        #self.folder_name = askopenfilename(parent=self.root, filetypes=[('수집데이터 엑셀', '.*')], initialdir=os.getcwd, title='업로드 할 파일을 선택해주세요')
        self.upload_list = natsort.natsorted(os.listdir(self.folder_name))
        del_idx = 0
        for i in range(len(self.upload_list)):
            if '.xlsx' not in self.upload_list[i - del_idx]:
                del self.upload_list[i - del_idx]
                del_idx += 1

        self.OpenUrl()
        time.sleep(2)
        ac = ActionChains(self.driver)
        # MaterFile에서 ID/PW, 업로드 리스트 parse
        self.id_pw_df = pd.read_excel('MasterFile.xlsx', sheet_name='ID_PW', dtype={'ESM 코드':str, 'A 코드':str, 'G 코드':str, '출하지 코드':str, '배송비템플릿코드':str,
                                                                                    '반품/교환주소 코드':str, 'A 발송정책':str, 'G 발송정책':str, '상품고시정보템플릿코드':str})

        for i in range(len(self.id_pw_df['ID'])):
            if i > len(self.upload_list) - 1:
                self.text.run('업로드 할 파일이 없습니다. 업로드를 종료합니다.')
                self.text.run('마지막 ID : {}'.format(self.id_pw_df['ID'].iloc[i-1]))
                return 0

            # log-in
            self.id_box = self.driver.find_element(By.CSS_SELECTOR, "#Id")
            self.pw_box = self.driver.find_element(By.CSS_SELECTOR, "#Password")
            self.login_button = self.driver.find_element(By.CSS_SELECTOR, '#btnLogOn')
            ac.send_keys_to_element(self.id_box, self.id_pw_df['ID'].iloc[i]).send_keys_to_element(self.pw_box, self.id_pw_df['PW'].iloc[i]).click(self.login_button).pause(2).perform()
            time.sleep(5)
            
            # 팝업창 닫기
            if len(self.driver.window_handles) != 1:
                for n in range(len(self.driver.window_handles) - 1):
                    last_tab = self.driver.window_handles[-1]
                    self.driver.switch_to.window(window_name=last_tab)
                    self.driver.close()
                    time.sleep(1)
                first_tab = self.driver.window_handles[0]
                self.driver.switch_to.window(window_name=first_tab)
                time.sleep(self.process_delay)
                
            self.driver.find_element(By.CSS_SELECTOR, '#TDM001').click()
            time.sleep(1)
            self.driver.find_element(By.CSS_SELECTOR, '#TDM416').click()
            time.sleep(3)

            #for j in range(len(self.upload_list)):
            df = pd.read_excel(self.folder_name + '/' + self.upload_list[i], index_col=False, header=None)
            len_df = int((len(df[2].dropna()) + 2)) - 7
            for n in range(len_df):
                df.iloc[n+7][2] = str(self.id_pw_df['A ID'].iloc[i])
                df.iloc[n+7][3] = str(self.id_pw_df['G ID'].iloc[i])
                df.iloc[n+7][9] = str(self.id_pw_df['ESM 코드'].iloc[i])
                df.iloc[n+7][10] = str(self.id_pw_df['A 코드'].iloc[i])
                df.iloc[n+7][11] = str(self.id_pw_df['G 코드'].iloc[i])
                df.iloc[n+7][28] = str(self.id_pw_df['출하지 코드'].iloc[i])
                df.iloc[n+7][29] = str(self.id_pw_df['배송비템플릿코드'].iloc[i])
                df.iloc[n+7][30] = str(self.id_pw_df['반품/교환주소 코드'].iloc[i])
                df.iloc[n+7][31] = str(self.id_pw_df['A 발송정책'].iloc[i])
                df.iloc[n+7][32] = str(self.id_pw_df['G 발송정책'].iloc[i])
                df.iloc[n+7][36] = str(self.id_pw_df['상품고시정보템플릿코드'].iloc[i])

            #filename = self.folder_name.split('/')[-1]
            new_folder = self.folder_name + '/{}'.format(self.id_pw_df['ID'].iloc[i])
            try:
                if not os.path.isdir(new_folder):
                    os.mkdir(new_folder)
            except OSError: 
                self.text.run('파일 폴더를 생성하는데 실패했습니다.')
                return 0

            shutil.move(self.folder_name + '/' + self.upload_list[i], new_folder)
            df.to_excel(new_folder + '/' + self.upload_list[i], index=False, header=None, sheet_name='일반상품')

            # 상품일괄등록2.0 클릭
            self.driver.find_element(By.CSS_SELECTOR, '#TDM396').click()
            time.sleep(1)
            self.driver.find_element(By.CSS_SELECTOR, '#TDM416').click()
            time.sleep(3)
            
            # 업로드파일선택 버튼 클릭
            try:
                file_select = pyautogui.locateCenterOnScreen('./driver/file_select.PNG', confidence=0.7)
                win = gw.getWindowsWithTitle('Chrome')[0]
                if win.isActive == False:
                    pywinauto.application.Application().connect(handle=win._hWnd).top_window().set_focus()
                win.activate() #윈도우 활성화
                time.sleep(self.process_delay)
                pyautogui.click(win.left + file_select.x, win.top + file_select.y) # 해당 윈도우의 path 클릭
                time.sleep(self.process_delay)
            except:
                self.text.run('업로드파일선택 버튼 클릭에 실패했습니다.')
                return 0
            
            # 폴더 경로 입력
            try:
                folder_path = pyautogui.locateCenterOnScreen('./driver/folder_path.PNG', confidence=0.7)
                time.sleep(1)
                pyautogui.click(win.left + folder_path.x, win.top + folder_path.y) # 해당 윈도우의 path 클릭
                time.sleep(self.process_delay)
                pyperclip.copy(new_folder)
                pyautogui.hotkey('ctrl', 'v')
                time.sleep(self.process_delay)
                pyautogui.press('enter')
                time.sleep(self.process_delay)
            except:
                self.text.run('폴더 경로 입력에 실패했습니다.')
                return 0

            # 파일 이름 입력
            try:
                file_path = pyautogui.locateCenterOnScreen('./driver/file_path.PNG', confidence=0.7)
                time.sleep(1)
                pyautogui.click(win.left + file_path.x, win.top + file_path.y) # 해당 윈도우의 path 클릭
                time.sleep(self.process_delay)
                pyperclip.copy(self.upload_list[i])
                pyautogui.hotkey('ctrl', 'v')
                time.sleep(self.process_delay)
                pyautogui.press('enter')
            except:
                self.text.run('파일명 입력에 실패했습니다.')
                return 0

            # 업로드 요청 버튼 클릭
            try:
                upload_btn = pyautogui.locateCenterOnScreen('./driver/upload.PNG', confidence=0.7)
                time.sleep(1)
                pyautogui.click(win.left + upload_btn.x, win.top + upload_btn.y) # 해당 윈도우의 path 클릭
                time.sleep(5)
                confirm_btn = pyautogui.locateCenterOnScreen('./driver/confirm.PNG', confidence=0.7)
                time.sleep(1)
                pyautogui.click(win.left + upload_btn.x, win.top + upload_btn.y) # 해당 윈도우의 path 클릭
                time.sleep(self.process_delay)
            except:
                self.text.run('업로드요청 버튼 클릭에 실패했습니다.')
                return 0

            # log-off
            self.driver.find_element(By.CSS_SELECTOR, '#logoff').click()
            time.sleep(self.process_delay)
                
        self.end_time = self.text.GetTime()
        diff_time = self.end_time - self.start_time
        self.text.run('--End work--')
        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
        self.driver.close()

    # 쓰레드 종료
    def KillThread(self):
        pid = os.getpid()
        os.kill(pid, 2)

    # UI에 텍스트 출력
    @pyqtSlot(str)
    def ConnectTextBrowser(self, print_str):
        self.textBrowser.append(print_str)
        self.textBrowser.repaint()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MyWindow()
    window.show()
    app.exec_()
