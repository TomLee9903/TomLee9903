# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
from typing import Text
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5 import uic
from PyQt5.QtCore import *
from PyQt5.QtCore import pyqtSlot

# from selenium import webdriver
# from selenium.webdriver.common.by import By
# import chromedriver_autoinstaller

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
import chromedriver_autoinstaller

import time
import datetime
import os
import pandas as pd
from PyQt5 import QtCore
import threading
import openpyxl
import shutil
import subprocess
import urllib.request
import requests
import re
import tkinter
from tkinter.filedialog import askopenfilename
import pyautogui as pag
import pyperclip
import cv2
import numpy as np
import random
import pywinauto
import pygetwindow as gw
import googletrans as google

# QT designer ui 파일 로드
form_class = uic.loadUiType("./driver/main_ui.ui")[0]

# UI 텍스트 출력 클래스
class TextBrowser(QThread):
    # signal을 MyWindow에 전달할 수 있게 하는 인자
    finished = pyqtSignal(str)
    now_date = ''

    @pyqtSlot(str)
    def run(self, print_str):
        self.make_log(print_str)

    @pyqtSlot(str)
    def make_log(self, print_str):
        self.now_time = datetime.datetime.now()
        self.now_date = self.now_time.strftime('[%Y-%m-%d %H:%M:%S]  ') + print_str
        self.finished.emit(self.now_date)   # signal MyWindow에 전달

    def GetTime(self):
        self.now_time = datetime.datetime.now()
        return self.now_time

# UI 구성 클래스
class MyWindow(QMainWindow, form_class):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.cnt = 0
        self.setWindowIcon(QIcon('./driver/jingdong.jfif'))    # UI에 Naver icon 설정
        self.run_btn.clicked.connect(self.Run)  # 검색 버튼 누르면 self.Run 함수 실행
        self.process_delay = 1.5
        self.text = TextBrowser()               # UI에 text 출력 위한 객체
        self.restart = False
        self.skip_option = False
        self.i = 0
        self.idx = 0
        self.search_type = 1
        self.translated_name = "aa"
        self.login_done = False
        self.search_url = ""
        self.no_crawl = False
        self.final_cnt = 0
        self.re_login = False
        self.only_one = False
        self.auto_login = False
        self.sku_id = []
        self.item_translate = False
        self.option_translate = False
        self.translator = google.Translator()

        self.text.finished.connect(self.ConnectTextBrowser) # TextBrowser한테서 signal 받으면 ConnectTextBrowser 함수 실행
        self.exit_btn.clicked.connect(self.QuitProgram) # 종료 버튼 클릭하면 프로그램 종료되게끔 설정 & thread 종료
        self.no_option.clicked.connect(self.SetOptionCollect)
        #self.retry_btn.clicked.connect(self.Retry)
        self.image_radio.clicked.connect(self.SetSearchType)
        self.item_name_radio.clicked.connect(self.SetSearchType)
        self.auto_login_val.clicked.connect(self.SetAutoLogin)
        self.item_translate_btn.clicked.connect(self.SetItemTranslate)
        self.option_translate_btn.clicked.connect(self.SetOptionTranslate)

    # UI 창닫기 버튼 클릭하면 종료 의사 묻는 팝업창 띄우기
    def closeEvent(self, QCloseEvent): 
        ans = QMessageBox.question(self, "종료 확인", "종료하시겠습니까?",
                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)
        if ans == QMessageBox.Yes:
            QCloseEvent.accept()
            self.KillThread()
        else:
            QCloseEvent.ignore()
    
    def SetOptionCollect(self):
        skip_option_collect = self.no_option.isChecked()
        if skip_option_collect == True:
            self.skip_option = True
        elif skip_option_collect == False:
            self.skip_option = False

    # 종료 버튼 누르면 실행되는 함수
    def QuitProgram(self):
        QCoreApplication.instance().quit
        self.KillThread()

    # 검색 버튼 누르면 실행되는 Run 함수
    def Run(self):
        self.th = threading.Thread(target=self.StartCrawl)
        self.th.daemon = True
        self.th.start()
    
    def Retry(self):
        self.Restart()
        self.restart = True
        while True:
            ret = self.ReLogin()
            if ret == 1:
                self.re_login = True
                break

        if self.search_type == 0:
            #self.th = threading.Thread(target=self.CrawlDataWithImage)
            ret = self.CrawlDataWithImage()
        elif self.search_type == 1:
            #self.th = threading.Thread(target=self.CrawlDataWithItemName)
            ret = self.CrawlDataWithItemName()
        
        return ret

    def SetSearchType(self):
        if self.image_radio.isChecked():
            self.search_type = 0
            self.item_name.setEnabled(False)
            self.page_cnt.setEnabled(False)
            self.translated_name = "aa"

        elif self.item_name_radio.isChecked():
            self.search_type = 1
            self.item_name.setEnabled(True)
            self.page_cnt.setEnabled(True)
    
    def SetAutoLogin(self):
        if self.auto_login_val.isChecked():
            self.auto_login = True
        else:
            self.auto_login = False
    
    def SetItemTranslate(self):
        if self.item_translate_btn.isChecked():
            self.item_translate = True
        else:
            self.item_translate = False
    
    def SetOptionTranslate(self):
        if self.option_translate_btn.isChecked():
            self.option_translate = True
        else:
            self.option_translate = False

    # 징동닷컴 크롤링 함수
    def StartCrawl(self):
        self.text.run('--Start work--')
        self.text.run('PGM ver : 22080717')
        self.start_time = self.text.GetTime()
        root = tkinter.Tk()
        root.withdraw()
        self.windows_user_name = os.path.expanduser('~')
        self.sku_id = []

        if self.search_type == 0:
            self.filename = askopenfilename(parent=root, filetypes=[('네이버 결과물 파일', '.xlsx')], initialdir=self.windows_user_name, title='네이버 결과물 파일을 선택해주세요')
            self.tb = pd.read_excel(self.filename)
            self.columns = self.tb.columns
            self.tb_temp = pd.read_excel(self.filename)
        elif self.search_type == 1:
            if self.page_cnt.text() != "":
                self.cnt_page = int(self.page_cnt.text())
            else:
                self.cnt_page = 1
            self.tb = pd.read_excel('./driver/sheet_reference.xlsx')
            self.columns = list(self.tb.columns)
            self.tb_temp = [[""] * 22 for i in range(self.cnt_page * 60)]
            self.tb_temp = pd.DataFrame(self.tb_temp)
            self.tb_temp.columns = self.columns
            
        if self.restart == False:
            self.OpenUrl()
        else:
            ret = self.Restart()
        
        while True:
            ret = self.Login()
            if ret == 1:
                break
            else:
                self.restart = True

        if self.search_type == 0:
            ret = self.CrawlDataWithImage()
        elif self.search_type == 1:
            ret = self.CrawlDataWithItemName()
        
        if ret == 0:
            while True:
                ret = self.Retry()
                if ret == 1:
                    break

    # 징동닷컴 URL 오픈
    @pyqtSlot()
    def OpenUrl(self):
        try:
            shutil.rmtree(r"c:\chrometemp")  #쿠키 / 캐쉬파일 삭제
        except FileNotFoundError:
            pass
        
        try:
            subprocess.Popen(r'C:\Program Files\Google\Chrome\Application\chrome.exe --remote-debugging-port=9222 --user-data-dir="C:\chrometemp"') # 디버거 크롬 구동
        except:
            subprocess.Popen(r'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe --remote-debugging-port=9222 --user-data-dir="C:\chrometemp"') # 디버거 크롬 구동

        self.options = Options()
        self.options.add_experimental_option("debuggerAddress", "127.0.0.1:9222")
        # 크롬 버전을 확인하여 버전이 안맞으면 자동으로 업데이트 하여 설치해주는 옵션       
        chrome_ver = chromedriver_autoinstaller.get_chrome_version().split('.')[0]
        try:
            self.driver = webdriver.Chrome(f'./{chrome_ver}/chromedriver.exe', options=self.options)
        except:
            chromedriver_autoinstaller.install(True)
            self.driver = webdriver.Chrome(f'./{chrome_ver}/chromedriver.exe', options=self.options)
        self.driver.implicitly_wait(10)
        
        # 속도 향상을 위한 옵션 해제
        self.options.add_argument("disable-gpu") 
        self.options.add_argument("disable-infobars")
        self.options.add_argument("--disable-extensions")
        prefs = {'profile.default_content_setting_values': {'cookies' : 2, 'images': 2, 'plugins' : 2, 'popups': 2, 'geolocation': 2, 'notifications' : 2, 'auto_select_certificate': 2, 'fullscreen' : 2, 'mouselock' : 2, 'mixed_script': 2, 'media_stream' : 2, 'media_stream_mic' : 2, 'media_stream_camera': 2, 'protocol_handlers' : 2, 'ppapi_broker' : 2, 'automatic_downloads': 2, 'midi_sysex' : 2, 'push_messaging' : 2, 'ssl_cert_decisions': 2, 'metro_switch_to_desktop' : 2, 'protected_media_identifier': 2, 'app_banner': 2, 'site_engagement' : 2, 'durable_storage' : 2}}   
        self.options.add_experimental_option('prefs', prefs)
        # 크롬 브라우저와 셀레니움을 사용하면서 발생되는 '시스템에 부착된 장치가 작동하지 않습니다.' 라는 크롬 브라우저의 버그를 조치하기 위한 코드. 
        self.options.add_experimental_option("excludeSwitches", ["enable-logging"])

        # 윈도우 사이즈 맥스로 키우기
        self.driver.maximize_window()
        self.driver.get('https://passport.jd.com/new/login.aspx?ReturnUrl=https%3A%2F%2Fglobal.jd.com%2F')
        self.text.run('징동닷컴 URL open 완료')

        time.sleep(self.process_delay)

    def Login(self):
        ac = ActionChains(self.driver)
        try:
            WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, '#banner-bg')))
        except:
            self.driver.get('https://passport.jd.com/new/login.aspx?ReturnUrl=https%3A%2F%2Fglobal.jd.com%2F')

        current_url = self.driver.current_url
        if current_url == 'https://global.jd.com/' or self.login_done == False:
            self.driver.get('https://passport.jd.com/new/login.aspx?ReturnUrl=https%3A%2F%2Fglobal.jd.com%2F')

        try:
            WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, '#content > div.login-wrap > div.w > div > div.login-tab.login-tab-r > a'))).click()
        except:
            self.text.run('로그인에 실패했습니다.')
            self.login_done = False
            return 0

        time.sleep(self.process_delay)
        id = self.id_info.text()
        pw = self.password_info.text()
        path = os.getcwd()
        drag ={
            'from':{
                'x':1154.1,
                'y':525.1
            },
            'to':{
                'x':1199.9,
                'y':572.9

            }
        }
        loop = 0
        try:
            if self.restart == True:
                try:
                    self.driver.find_element(By.CSS_SELECTOR, '#formlogin > div.item.item-fore1 > span').click()
                except:
                    pass
            self.id_box = self.driver.find_element(By.CSS_SELECTOR, "#loginname");
            self.pw_box = self.driver.find_element(By.CSS_SELECTOR, "#nloginpwd");
            self.login_button = self.driver.find_element(By.CSS_SELECTOR, '#loginsubmit');
            ac.send_keys_to_element(self.id_box, id).send_keys_to_element(self.pw_box, pw).click(self.login_button).pause(2).perform()
            if self.auto_login == True or (self.restart == True and self.login_done == True):
                try:
                    while loop < 100:
                        try:
                            captcha_png = WebDriverWait(self.driver, 1).until(EC.presence_of_element_located((By.CSS_SELECTOR,'#JDJRV-wrap-loginsubmit > div > div > div > div.JDJRV-img-panel.JDJRV-click-bind-suspend > div.JDJRV-img-wrap > div.JDJRV-bigimg > img'))).get_attribute('src')
                        except:
                            WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, '#key')))
                            self.login_done = True
                            return 1

                        t = urllib.request.urlretrieve(captcha_png, path + '/driver/captcha.png')
                        img_ori = cv2.imread(path + '/driver/captcha.png', 0)
        #                img_gray = cv2.cvtColor(img_ori, cv2.COLOR_BGR2GRAY) # 배경이미지를 흑백으로 변환
        #                    puzzle_img = cv2.imread('puzzle.png', cv2.IMREAD_GRAYSCALE)                       
                        th, dst = cv2.threshold(img_ori, 60, 85, cv2.THRESH_BINARY)
                        img_mask = cv2.imread(path + '/driver/masking.png', cv2.IMREAD_GRAYSCALE)
                        _, mask = cv2.threshold(img_mask[:, :], 1, 255, cv2.THRESH_BINARY)
                        mask_inv = cv2.bitwise_not(mask)
                        img_fg = cv2.cvtColor(dst, cv2.COLOR_BGRA2BGR)
                        h, w = img_fg.shape[:2]
                        roi = img_mask[0:10+h, 0:10+w]
                        try:
                            cv2.imwrite('roi.png', roi)
                        except:
                            pass
                        try:
                            blank_locate = pag.locateOnScreen('roi.png', confidence=0.6)
                        except:
                            self.text.run('blank 이미지 찾기에 실패했습니다. 다음 이미지로 넘어갑니다.')
                            continue
                        if blank_locate == None:
                            self.driver.find_element(By.XPATH, '//*[@id="JDJRV-wrap-loginsubmit"]/div/div/div/div[1]/div[1]/div[2]/div').click()
                            time.sleep(2)
                            continue
                        try:
                            slide_locate = pag.locateCenterOnScreen('./driver/slide.png', confidence=0.5)
                        except:
                            self.text.run('slide 이미지 찾기에 실패했습니다. 다음 이미지로 넘어갑니다.')
                            continue
                        if slide_locate == None:
                            self.driver.find_element(By.XPATH, '//*[@id="JDJRV-wrap-loginsubmit"]/div/div/div/div[1]/div[1]/div[2]/div').click()
                            time.sleep(2)
                            continue
                        
                        slide_y = random.uniform(drag['from']['y'], drag['to']['y'])
                        slide_x = 1180
                        #x_delta = abs(blank_locate.left - slide_x)
                        x_delta = abs(blank_locate.left - slide_locate.x)
    #                    x_offset = 1180 - slide_x

                        #pag.moveTo(slide_x, slide_y, duration=random.uniform(0.30001, 0.69999))
                        pag.moveTo(slide_locate.x, slide_locate.y, duration=random.uniform(0.30001, 0.69999))
                        pag.dragTo(blank_locate.left + (blank_locate.width / 2) + 11.1911, slide_locate.y, duration=random.uniform(0.30001, 0.69999), button='left')
                        #pag.dragTo(blank_locate.left + (blank_locate.width / 2), slide_y, duration=random.uniform(0.30001, 0.69999), button='left')
                        time.sleep(2)
                        try:
                            WebDriverWait(self.driver, 3).until(EC.presence_of_element_located((By.CSS_SELECTOR, '#JDJRV-wrap-loginsubmit > div > div > div > div.JDJRV-img-panel.JDJRV-click-bind-suspend > div.JDJRV-img-wrap > div.JDJRV-bigimg > img')))
                            loop += 1
                            if loop == 99:
                                self.text.run('로그인에 실패했습니다.')                            
                                self.login_done = False
                                return 0
                            else:
                                continue                
                        except:
                            break
                except:
                    self.text.run('로그인에 실패했습니다.')
                    self.login_done = False
                    return 0

        except:
            self.text.run('로그인에 실패했습니다.')
            self.login_done = False
            return 0

        self.login_done = True
        return 1

    # 징동닷컴 크롤링 함수
    def CrawlDataWithImage(self):
        self.login_xpath = '//*[@id="banner-bg"]'
        self.ac = ActionChains(self.driver)  # 셀레니움 동작을 바인딩 하여 동작 할 수 있게 하는 모듈
        
        # 로그인 됐는지 확인하는 명령
        try:
            WebDriverWait(self.driver, 50).until(EC.presence_of_element_located((By.CSS_SELECTOR, '#key')))
            self.text.run('로그인에 성공했습니다')
        except:
            self.text.run('로그인에 실패했습니다.')
            return 0
        
        if self.restart == True and self.search_url != '':
            self.driver.get(self.search_url)
            time.sleep(self.process_delay)

        else:
            ret = self.ClickSearchButton()
            if ret == 0:
                return 0
            self.idx = 0
            self.final_cnt = 0

        item_len = len(self.tb['이미지이름'])
        self.image_path_tb = list(self.tb['이미지저장경로'])
        self.image_name_tb = list(self.tb['이미지이름'])
        while self.i < item_len:
            ret = self.ClickCameraButton()
            if ret == 0:
                return 0
            self.no_crawl = False

            # 징동닷컴검색결과주소
            if self.i == 0:
                try:
                    WebDriverWait(self.driver, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR, '#photo-search-dropdown > div > div')))
                    self.text.run('징동닷컴에서 해당 아이템을 찾을 수 없습니다. 다음 이미지로 넘어갑니다.')
                    self.i += 1
                    continue
                except:
                    pass

            if (self.i == 0 and self.idx == 0) or self.re_login == True:
                try:
                    qr_img = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#J-global-toolbar > div > div.jdm-toolbar.J-toolbar > div.jdm-toolbar-footer > div.J-trigger.jdm-toolbar-tab.jdm-tbar-tab-qrcode > div')))[0]
                    qr_img.click()
                    time.sleep(1)
                    self.re_login = False
                except:
                    pass

            try:
                WebDriverWait(self.driver, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR, '#plist > ul')))
            except:
                try:
                    self.driver.find_element(By.XPATH, self.login_xpath)
                    self.ReLogin()
                    continue
                except:
                    self.text.run('이미지 검색에 실패했습니다.')
                    return 0
            time.sleep(3)

            # 이미지가 징동닷컴에서 찾을 수 없을 때
            if self.i != 0:
                if self.driver.current_url == self.tb[self.columns[12]][self.i - 1]:
                    self.text.run('징동닷컴에서 해당 아이템을 찾을 수 없습니다. 다음 이미지로 넘어갑니다.')
                    self.i += 1
                    continue
           
            self.search_url = self.driver.current_url
            time.sleep(2)

            # 페이지 스크롤 최대치로 내리기            
            before_h = self.driver.execute_script('return window.scrollY')
            while(True):
                self.driver.find_element_by_css_selector('body').send_keys(Keys.END)
                time.sleep(1)
                after_h = self.driver.execute_script('return window.scrollY') 

                if after_h == before_h:
                    break
                else:
                    before_h = after_h

            img_array = np.fromfile(self.image_path_tb[self.i], np.uint8)
            img_ori = cv2.imdecode(img_array, cv2.IMREAD_COLOR)
            results = []
            for j in range(60):
                temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="plist"]/ul/li[{}]/div/div[1]/a/img'.format(str(j+1)))))[0]
                self.ac.move_to_element(temp).perform()
                try:
                    img_url = temp.get_attribute('src').split('.avif')[0]
                except:
                    pass
                try:
                    opener=urllib.request.build_opener()
                    opener.addheaders=[('User-Agent','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1941.0 Safari/537.36')]
                    urllib.request.install_opener(opener)
                    t = urllib.request.urlretrieve(img_url, 'compare.png')
                except:
                    results.append(0.00)
                    continue
                img_com = cv2.imread('compare.png', cv2.IMREAD_COLOR)
                try:
                    if img_com == None:
                        results.append(0.00)
                        continue
                except:
                    imgs = [img_ori, img_com]
                hists = []
                
                for n, img in enumerate(imgs) :
                    #---① 각 이미지를 HSV로 변환
                    try:
                        hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
                    except:
                        results.append(0.00)
                        continue
                    #---② H,S 채널에 대한 히스토그램 계산
                    try:
                        hist = cv2.calcHist([hsv], [0,1], None, [180,256], [0,180,0, 256])
                    except:
                        results.append(0.00)
                        continue
                    #---③ 0~1로 정규화
                    cv2.normalize(hist, hist, 0, 1, cv2.NORM_MINMAX)
                    hists.append(hist)
                query = hists[0]
                # methods = {'CORREL' :cv2.HISTCMP_CORREL, 'CHISQR':cv2.HISTCMP_CHISQR, 
                #            'INTERSECT':cv2.HISTCMP_INTERSECT, 'BHATTACHARYYA':cv2.HISTCMP_BHATTACHARYYA}

                #---④ 각 메서드에 따라 img1과 각 이미지의 히스토그램 비교
                ret_temp = round(cv2.compareHist(query, hists[1], cv2.HISTCMP_CORREL), 2)
                results.append(ret_temp)
                #ret.append(ret_temp/np.sum(query))
            # 교차분석값이 가장 큰 인덱스 클릭
            self.sub_idx = 0
            while self.sub_idx < 1:
                self.tb_temp['국내쇼핑몰이름'][self.idx] = self.tb['국내쇼핑몰이름'][self.i]
                self.tb_temp['국내쇼핑몰등급'][self.idx] = self.tb['국내쇼핑몰등급'][self.i]
                self.tb_temp['구매건수'][self.idx] = self.tb['구매건수'][self.i]
                self.tb_temp['국내제품링크'][self.idx] = self.tb['국내제품링크'][self.i]
                self.tb_temp['이미지이름'][self.idx] = self.tb['이미지이름'][self.i]
                self.tb_temp['이미지저장경로'][self.idx] = self.tb['이미지저장경로'][self.i]
                self.tb_temp['네이버카테고리'][self.idx] = self.tb['네이버카테고리'][self.i]
                self.tb_temp['국내사이트제목'][self.idx] = self.tb['국내사이트제목'][self.i]
                self.tb_temp['국내사이트태그'][self.idx] = self.tb['국내사이트태그'][self.i]
                self.tb_temp['리뷰수'][self.idx] = self.tb['리뷰수'][self.i]
                self.tb_temp['국내사이트가격'][self.idx] = self.tb['국내사이트가격'][self.i]
                self.tb_temp['국내사이트배송비'][self.idx] = self.tb['국내사이트배송비'][self.i]

                max_val = max(results)
                max_idx = results.index(max_val)
                results[max_idx] = 0.00
                time.sleep(2)
                try:
    #                item_block = WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="plist"]/ul/li[{}]/div/div[4]/a/em'.format(str(max_review_idx)))))
                    item_block = WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="plist"]/ul/li[{}]/div/div[4]/a/em'.format(str(max_idx+1)))))
                    self.ac.move_to_element(item_block).pause(1).perform()
                    item_block.click()
                except:
                    try:
                        item_block = WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="plist"]/ul/li[{}]/div'.format(str(max_idx+1)))))
                        self.ac.move_to_element(item_block).pause(1).perform()
                        item_block.click()
                    except:
                        try:
                            self.driver.find_element(By.XPATH, self.login_xpath)
                            self.ReLogin()
                            continue
                        except:
                            self.text.run('게시물 클릭에 실패했습니다.')
                            if len(self.driver.window_handles) != 1:
                                for n in range(len(self.driver.window_handles) - 1):
                                    last_tab = self.driver.window_handles[-1]
                                    self.driver.switch_to.window(window_name=last_tab)
                                    self.driver.close()
                                first_tab = self.driver.window_handles[0]
                                self.driver.switch_to.window(window_name=first_tab)
                                time.sleep(self.process_delay)
                            self.sub_idx += 1
                            self.idx += 1
                            continue
                
                # 징동닷컴검색선택링크주소
                last_tab = self.driver.window_handles[-1]
                self.driver.switch_to.window(window_name=last_tab)
                try:
                    select_url = self.driver.current_url
                except:
                    self.driver.refresh()
                
                # 선택제품가격
                ret = self.GetPrice()
                if ret == 0:
                    self.ReLogin()
                    continue

                # 상품제목
                ret, title = self.GetTitle()
                if ret == 0:
                    self.ReLogin()
                    continue

                # 대표이미지
                ret, img_url = self.GetRepresentImage()
                if ret == 0:
                    self.ReLogin()
                    continue

                self.windows_user_name = os.path.expanduser('~')
                now_time = datetime.datetime.now()
                today = now_time.strftime('%Y%m%d')  #YYYY-MM-DD
                # img_folder = '{}\\Desktop\\{}_징동닷컴'.format(self.windows_user_name, today)
                # try:
                #     if not os.path.isdir(img_folder):
                #         os.mkdir(img_folder)
                # except OSError:
                #     self.text.run('이미지 폴더를 생성하는데 실패했습니다.')
                #     break

                # image_name = self.CleanText(title)
                # t = urllib.request.urlretrieve(img_url, img_folder + '\\' + image_name.replace(' ','_').replace('【','').replace('\\', '').replace('/','') + '.jpg')
                time.sleep(2)
                before_h = self.driver.execute_script('return window.scrollY')
                while(True):
                    self.driver.find_element_by_css_selector('body').send_keys(Keys.END)
                    time.sleep(1)
                    after_h = self.driver.execute_script('return window.scrollY') 

                    if after_h == before_h:
                        break
                    else:
                        before_h = after_h

                # 상세 페이지
                ret, detail_imgs = self.GetDetailImages()
                if ret == 0:
                    self.ReLogin()
                    continue

                if len(detail_imgs) == 0:
                    self.text.run('{}-{}번째 상품의 상세페이지 가져오기를 실패했습니다. 다음 상품으로 넘어갑니다.'.format(self.i+1, self.sub_idx+1))
                    if len(self.driver.window_handles) != 1:
                        for n in range(len(self.driver.window_handles) - 1):
                            last_tab = self.driver.window_handles[-1]
                            self.driver.switch_to.window(window_name=last_tab)
                            self.driver.close()
                        first_tab = self.driver.window_handles[0]
                        self.driver.switch_to.window(window_name=first_tab)
                        time.sleep(self.process_delay)
                    self.sub_idx += 1
                    continue
                else:
                    detail_imgs = '\n'.join(detail_imgs)
                
                option1_list = []
                option1_total = []
                prices = []
                if self.skip_option == False:
                    # 옵션1
                    self.only_one = False
                    self.no_crawl = False

                    try:
                        option1_total, option1_list, prices = self.GetOption1()
                        if self.no_crawl == True:
                            time.sleep(2)
                            if len(self.driver.window_handles) != 1:
                                for n in range(len(self.driver.window_handles) - 1):
                                    last_tab = self.driver.window_handles[-1]
                                    self.driver.switch_to.window(window_name=last_tab)
                                    self.driver.close()
                                first_tab = self.driver.window_handles[0]
                                self.driver.switch_to.window(window_name=first_tab)
                                time.sleep(self.process_delay)
                            self.sub_idx += 1
                            continue

                        option1_list = '\n'.join(option1_list)
                        option1_total = '\n'.join(option1_total)
                        self.tb_temp[self.columns[17]][self.idx] = option1_list
                        self.tb_temp[self.columns[19]][self.idx] = option1_total
                    except:
                        if self.only_one == True:
                            pass
                        else:
                            try:
                                self.driver.find_element(By.XPATH, self.login_xpath)
                                self.ReLogin()
                                continue
                            except:
                                self.text.run('옵션1 이미지를 가져오는데 실패했습니다.')
                                current_url = self.driver.current_url
                                if current_url != select_url:
                                    self.sub_idx += 1
                                    continue
                                else:
                                    pass
                    
                self.tb_temp[self.columns[12]][self.idx] = self.search_url
                self.tb_temp[self.columns[13]][self.idx] = select_url
                if self.price == "暂无报价":
                    self.tb_temp[self.columns[14]][self.idx] = "暂无报价"
                elif len(prices) != 0:
                    self.tb_temp[self.columns[14]][self.idx] = '{}-{}'.format(min(prices), max(prices))
                else:
                    self.tb_temp[self.columns[14]][self.idx] = float(self.price)
                self.tb_temp[self.columns[15]][self.idx] = title
                self.tb_temp[self.columns[16]][self.idx] = img_url
                self.tb_temp[self.columns[20]][self.idx] = detail_imgs

                new_filename = self.filename.split('_results')[0] + '_JD_image_results.xlsx'
                self.tb_temp.to_excel(new_filename, index=False)
                if len(self.driver.window_handles) != 1:
                    for n in range(len(self.driver.window_handles) - 1):
                        last_tab = self.driver.window_handles[-1]
                        self.driver.switch_to.window(window_name=last_tab)
                        self.driver.close()
                        time.sleep(1)
                first_tab = self.driver.window_handles[0]
                self.driver.switch_to.window(window_name=first_tab)
                time.sleep(self.process_delay)

                if self.i == item_len - 1:
                    self.text.run('{}-{}번째 아이템 크롤링 중'.format(self.i + 1, self.sub_idx + 1))
                    self.text.run('마지막 아이템입니다.')
                    self.text.run('크롤링이 완료되었습니다.')
                    self.text.run('{}개 중 {}개 수집 완료'.format(str(item_len * 5), str(self.final_cnt)))
                    break
                else:
                    self.text.run('{}-{}번째 아이템 크롤링 중'.format(self.i + 1, self.sub_idx + 1))
                self.idx += 1
                self.final_cnt += 1
                self.sub_idx += 1
            self.i += 1
            
        # 크롬드라이버 종료
        self.end_time = self.text.GetTime()
        diff_time = self.end_time - self.start_time
        self.text.run('--End work--')
        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
        self.restart = True
        return 1
    
    def CrawlDataWithItemName(self):
        self.login_xpath = '//*[@id="banner-bg"]'
        self.ac = ActionChains(self.driver)  # 셀레니움 동작을 바인딩 하여 동작 할 수 있게 하는 모듈
        
        # 로그인 됐는지 확인하는 명령
        try:
            WebDriverWait(self.driver, 50).until(EC.presence_of_element_located((By.CSS_SELECTOR, '#key')))
            self.text.run('로그인에 성공했습니다')
        except:
            self.text.run('로그인에 실패했습니다.')
            return 0
        
        if self.restart == True and self.search_url != '':
            self.driver.get(self.search_url)
            time.sleep(self.process_delay)

        else:
            if self.item_translate == True:
                self.translated_name = self.TranslateChinese(self.item_name.text())
            else:
                self.translated_name = self.item_name.text()
            self.ClickSearchButton()
            self.j = 0
            self.final_cnt = 0

        # 댓글 많은 순으로 정렬
        #WebDriverWait(self.driver, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR, '#J_filter > div.f-line.top > div.f-sort > a:nth-child(3)'))).click()
        
        time.sleep(5)
        # 페이지 스크롤 최대치로 내리기            
        before_h = self.driver.execute_script('return window.scrollY')
        while(True):
            self.driver.find_element_by_css_selector('body').send_keys(Keys.END)
            time.sleep(1)
            after_h = self.driver.execute_script('return window.scrollY') 

            if after_h == before_h:
                break
            else:
                before_h = after_h
        
        before_h = 0
        after_h = 0
        
        #while self.i < self.cnt_page:
        #while self.j < 60:
        while True:
            self.no_crawl = False
            if (self.i == 0 and self.j == 0):
                try:
                    qr_img = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '#J-global-toolbar > div > div.jdm-toolbar.J-toolbar > div.jdm-toolbar-footer > div.J-trigger.jdm-toolbar-tab.jdm-tbar-tab-qrcode > div')))[0]
                    qr_img.click()
                    time.sleep(1)
                except:
                    pass
            try:
                time.sleep(2)
                temp = WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="J_goodsList"]/ul/li[{}]/div/div[1]/a/img'.format(str(self.j + 1)))))[0]
                self.ac.move_to_element(temp).pause(0.5).click().perform()
                time.sleep(1)
            except:
                try:
                    self.driver.find_element(By.XPATH, self.login_xpath)
                    self.ReLogin()
                    continue
                except:
                    self.text.run('이미지 클릭에 실패했습니다.')
                    return 0
            
            try:
                WebDriverWait(self.driver, 3).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, 'body > div:nth-child(10) > div')))
            except:
                self.text.run('이미지 클릭에 실패했습니다.')
                return 0

            self.search_url = self.driver.current_url
            time.sleep(2)
                    
            # 징동닷컴검색선택링크주소
            last_tab = self.driver.window_handles[-1]
            self.driver.switch_to.window(window_name=last_tab)
            try:
                select_url = self.driver.current_url
            except:
                self.driver.refresh()

            # 페이지 스크롤 최대치로 내리기
            before_h = self.driver.execute_script('return window.scrollY')
            while(True):
                self.driver.find_element_by_css_selector('body').send_keys(Keys.END)
                time.sleep(1)
                after_h = self.driver.execute_script('return window.scrollY') 

                if after_h == before_h:
                    break
                else:
                    before_h = after_h
            
            # 선택제품가격
            ret = self.GetPrice()
            if ret == 0:
                self.ReLogin()
                continue

            # 상품제목
            ret, title = self.GetTitle()
            if ret == 0:
                self.ReLogin()
                continue

            # 대표이미지
            ret, img_url = self.GetRepresentImage()
            if ret == 0:
                self.ReLogin()
                continue

            self.windows_user_name = os.path.expanduser('~')

            # 상세 페이지
            ret, detail_imgs = self.GetDetailImages()
            if ret == 0:
                self.ReLogin()
                continue
            
            if len(detail_imgs) == 0:
                self.text.run('{}페이지 {}번째 상품의 상세페이지 가져오기를 실패했습니다. 다음 상품으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
                if len(self.driver.window_handles) != 1:
                    for n in range(len(self.driver.window_handles) - 1):
                        last_tab = self.driver.window_handles[-1]
                        self.driver.switch_to.window(window_name=last_tab)
                        self.driver.close()
                    first_tab = self.driver.window_handles[0]
                    self.driver.switch_to.window(window_name=first_tab)
                    time.sleep(self.process_delay)
                if self.j == 59:
                    self.driver.find_element_by_xpath('//*[@id="J_bottomPage"]/span[1]/a[9]/em').click()
                    self.j = 0
                    self.i += 1
                    time.sleep(self.process_delay)
                    continue
                else:
                    self.j += 1
                    continue
            else:
                detail_imgs = '\n'.join(detail_imgs)
            
            option1_list = []
            option1_total = []
            prices = []
            if self.skip_option == False:
                # 옵션1
                self.only_one = False

                try:
                    option1_total, option1_list, prices = self.GetOption1()
                    if self.only_one == True:
                        pass
                    if self.no_crawl == True and self.j != 59:
                        time.sleep(2)
                        if len(self.driver.window_handles) != 1:
                            for n in range(len(self.driver.window_handles) - 1):
                                last_tab = self.driver.window_handles[-1]
                                self.driver.switch_to.window(window_name=last_tab)
                                self.driver.close()
                            first_tab = self.driver.window_handles[0]
                            self.driver.switch_to.window(window_name=first_tab)
                            time.sleep(self.process_delay)
                        self.j += 1
                        continue

                    option1_list = '\n'.join(option1_list)
                    option1_total = '\n'.join(option1_total)
                    self.tb_temp[self.columns[17]][self.idx] = option1_list
                    self.tb_temp[self.columns[19]][self.idx] = option1_total
                except:
                    if self.only_one == True:
                        pass
                    else:
                        try:
                            self.driver.find_element(By.XPATH, self.login_xpath)
                            self.ReLogin()
                            continue
                        except:
                            self.text.run('옵션1 이미지를 가져오는데 실패했습니다.')
                            current_url = self.driver.current_url
                            if current_url != select_url:
                                self.j += 1
                                continue
                            else:
                                pass
            
            self.tb_temp[self.columns[0]][self.idx] = self.item_name.text()
            self.tb_temp[self.columns[12]][self.idx] = self.search_url
            self.tb_temp[self.columns[13]][self.idx] = select_url
            if self.price == "暂无报价":
                self.tb_temp[self.columns[14]][self.idx] = "暂无报价"
            elif len(prices) != 0:
                self.tb_temp[self.columns[14]][self.idx] = '{}-{}'.format(min(prices), max(prices))
            else:
                self.tb_temp[self.columns[14]][self.idx] = float(self.price)
            self.tb_temp[self.columns[15]][self.idx] = title + '({})'.format(self.item_name.text())
            self.tb_temp[self.columns[16]][self.idx] = img_url
            self.tb_temp[self.columns[20]][self.idx] = detail_imgs
            
            file_folder = '{}\\Desktop\\징동닷컴_결과물'.format(self.windows_user_name)
            print(file_folder)
            filename = '{}\\{}'.format(file_folder, self.item_name.text() + '_JD_ItemName_results.xlsx')
            try:
                if not os.path.isdir(file_folder):
                    os.mkdir(file_folder)
            except OSError:
                try:
                    file_folder = '{}\\OneDrive\\Desktop\\징동닷컴_결과물'.format(self.windows_user_name)
                    filename = '{}\\{}'.format(file_folder, self.item_name.text() + '_JD_ItemName_results.xlsx')
                    if not os.path.isdir(file_folder):
                        os.mkdir(file_folder)
                except:
                    self.text.run('파일 폴더를 생성하는데 실패했습니다.')
                    print(self.windows_user_name)
                    break
            self.tb_temp.to_excel(filename, index=False)
            
            if len(self.driver.window_handles) != 1:
                for n in range(len(self.driver.window_handles) - 1):
                    last_tab = self.driver.window_handles[-1]
                    self.driver.switch_to.window(window_name=last_tab)
                    self.driver.close()
                    time.sleep(1)

                first_tab = self.driver.window_handles[0]
                self.driver.switch_to.window(window_name=first_tab)
                time.sleep(self.process_delay)

            if self.final_cnt == (self.cnt_page * 60) - 1:
                self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                self.text.run('마지막 아이템입니다.')
                self.text.run('크롤링이 완료되었습니다.')
                self.text.run('{}개 중 {}개 수집 완료'.format(self.cnt_page * 60, self.final_cnt + 1))
                # 크롬드라이버 종료
                self.end_time = self.text.GetTime()
                diff_time = self.end_time - self.start_time
                self.text.run('--End work--')
                self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
                self.restart = True
                return 1
            else:
                self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(self.i + 1, self.j + 1))
                if self.j == 59:
                    self.driver.find_element_by_xpath('//*[@id="J_bottomPage"]/span[1]/a[9]/em').click()
                    self.j = 0
                    self.i += 1
                    time.sleep(self.process_delay)
                    continue

            self.final_cnt += 1
            self.idx += 1
            self.j += 1
    
    def GetPrice(self):
        self.elem_idx = 10
        ret = 1
        try:
            self.price = WebDriverWait(self.driver, 1).until(EC.presence_of_element_located((By.CSS_SELECTOR,'body > div:nth-child({}) > div > div.itemInfo-wrap > div.summary.summary-first > div > div.summary-price.J-summary-price > div.dd > span.p-price'.format(str(self.elem_idx))))).text.replace("￥", "").replace(" ", "")
        except:
            try:
                self.elem_idx += 1
                self.price = WebDriverWait(self.driver, 1).until(EC.presence_of_element_located((By.CSS_SELECTOR,'body > div:nth-child({}) > div > div.itemInfo-wrap > div.summary.summary-first > div > div.summary-price.J-summary-price > div.dd > span.p-price'.format(str(self.elem_idx))))).text.replace("￥", "").replace(" ", "")
            except:
                try:
                    self.elem_idx += 1
                    self.price = WebDriverWait(self.driver, 1).until(EC.presence_of_element_located((By.CSS_SELECTOR,'body > div:nth-child({}) > div > div.itemInfo-wrap > div.summary.summary-first > div > div.summary-price.J-summary-price > div.dd > span.p-price'.format(str(self.elem_idx))))).text.replace("￥", "").replace(" ", "")
                except:
                    try:
                        self.elem_idx = 9
                        self.price = WebDriverWait(self.driver, 1).until(EC.presence_of_element_located((By.CSS_SELECTOR,'body > div:nth-child({}) > div > div.itemInfo-wrap > div.summary.summary-first > div > div.summary-price.J-summary-price > div.dd > span.p-price'.format(str(self.elem_idx))))).text.replace("￥", "").replace(" ", "")
                    except:
                        try:
                            self.driver.find_element(By.XPATH, self.login_xpath)
                            ret = 0
                        except:
                            self.price = 0
        return ret

    def GetTitle(self):
        title = ''
        ret = 1
        try:
            title = WebDriverWait(self.driver, 1).until(EC.presence_of_element_located((By.CSS_SELECTOR,'body > div:nth-child({}) > div > div.itemInfo-wrap > div.sku-name'.format(str(self.elem_idx))))).text
        except:
            try:
                self.elem_idx += 1
                title = WebDriverWait(self.driver, 1).until(EC.presence_of_element_located((By.CSS_SELECTOR,'body > div:nth-child({}}) > div > div.itemInfo-wrap > div.sku-name'.format(str(self.elem_idx))))).text
            except:
                try:
                    self.driver.find_element(By.XPATH, self.login_xpath)
                    ret = 0
                except:
                    title = ''
        
        if self.option_translate == True:
            title = self.TranslateGoogle(title, 'ko')

        return ret, title

    def GetRepresentImage(self):
        try:
            img_url = 'https:' + WebDriverWait(self.driver, 1).until(EC.presence_of_element_located((By.CSS_SELECTOR,'#spec-img'))).get_attribute('jqimg').split('.avif')[0]
            ret = 1
        except:
            try:
                self.driver.find_element(By.XPATH, self.login_xpath)
                ret = 0
            except:
                img_url = ''
                ret = 1
        
        return ret, img_url

    def GetOption1(self):
        option1_total = []
        option1_list = []
        prices = []
        choose_idx = 1
        max_price = 0
        sku_temp = []
        #try:
        pre_check = WebDriverWait(self.driver, 1).until(EC.presence_of_element_located((By.CSS_SELECTOR,'#choose-attrs'))).text
        if pre_check == '':
            if self.search_type == 1:
                self.text.run('{}페이지 {}번째 아이템은 단일 상품입니다.'.format(self.i + 1, self.j + 1))
            else:
                self.text.run('{}-{}번째 아이템은 단일 상품입니다.'.format(self.i+1, self.sub_idx+1))

            sku = WebDriverWait(self.driver, 1).until(EC.presence_of_element_located((By.XPATH,'//*[@id="choose-btns"]'))).get_attribute('innerHTML').split('pid=')[1].split('&')[0]
            self.sku_id.append(sku)
            self.only_one = True

            return option1_total, option1_list, prices

        option1_total = WebDriverWait(self.driver, 1).until(EC.presence_of_element_located((By.CSS_SELECTOR,'#choose-attr-1'))).text.split('\n')[1:]
        sku = WebDriverWait(self.driver, 1).until(EC.presence_of_element_located((By.CSS_SELECTOR,'#choose-attr-1'))).get_attribute('innerHTML').split('data-sku=')[1:]
        for i in range(len(sku)):
            sku_temp.append(sku[i].split(' data-value')[0].replace('"',''))
        if sku_temp[0] in self.sku_id:
            if self.search_type == 1:
                self.text.run('{}페이지 {}번째 아이템은 이미 수집된 상품입니다. 다음 아이템으로 넘어갑니다.'.format(self.i + 1, self.j + 1))
            else:
                self.text.run('{}-{}번째 아이템은 이미 수집된 상품입니다. 다음 아이템으로 넘어갑니다.'.format(self.i+1, self.sub_idx+1))

            self.no_crawl = True
            option1_total = []
            option1_list = []
            prices = []

            return option1_total, option1_list, prices

        price_css = 'body > div:nth-child({}) > div > div.itemInfo-wrap > div.summary.summary-first > div > div.summary-price.J-summary-price > div.dd > span.p-price'.format(str(self.elem_idx))
        time.sleep(1)
        if len(option1_total) > 30:
            if self.search_type == 1:
                self.text.run('{}페이지 {}번째 아이템의 옵션 갯수를 30개로 한정합니다.'.format(self.i + 1, self.j + 1))
            else:
                self.text.run('{}-{}번째 아이템의 옵션 갯수를 30개로 한정합니다.'.format(self.i+1, self.sub_idx+1))
            option1_total = []
            option1_list = []
            prices = []
            self.no_crawl = True

            return option1_total, option1_list, prices

        for n in range(0, len(option1_total)):
            if self.option_translate == True:
                option1_total[n] = self.TranslateGoogle(option1_total[n], 'ko')
            try:
                option = WebDriverWait(self.driver, 5).until(EC.presence_of_element_located((By.XPATH, '//*[@id="choose-attr-{}"]/div[2]/div[{}]'.format(str(choose_idx), str(n+1)))))
                option.click()
            except:
                try:
                    self.driver.find_element(By.XPATH, self.login_xpath)
                    return
                except:
                    choose_idx += 1
                    WebDriverWait(self.driver, 5).until(EC.presence_of_element_located((By.XPATH, '//*[@id="choose-attr-{}"]/div[2]/div[{}]'.format(str(choose_idx), str(n+1))))).click()
            
            img_xpath = '//*[@id="choose-attr-{}"]/div[2]/div[{}]/a/img'.format(str(choose_idx), str(n+1))
            try:
                price_temp = WebDriverWait(self.driver, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR, price_css))).text.replace("￥", "").replace(" ", "")
            except:
                try:
                    price_css = 'body > div:nth-child({}) > div > div.itemInfo-wrap > div.summary.summary-first > div > div.summary-price.J-summary-price > div.dd > span'.format(str(self.elem_idx - 1))
                    price_temp = WebDriverWait(self.driver, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR, price_css))).text.replace("￥", "").replace(" ", "")
                except:
                    try:
                        price_css = 'body > div:nth-child({}) > div > div.itemInfo-wrap > div.summary.summary-first > div > div.summary-price.J-summary-price > div.dd > span'.format(str(self.elem_idx + 1))
                        price_temp = WebDriverWait(self.driver, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR, price_css))).text.replace("￥", "").replace(" ", "")
                    except:
                        pass

            try:
                temp = WebDriverWait(self.driver, 5).until(EC.presence_of_element_located((By.XPATH, img_xpath))).get_attribute('jqimg').split('.avif')[0].replace('//img','https://img')
            except:
                img_xpath = '//*[@id="spec-img"]'
                temp = WebDriverWait(self.driver, 5).until(EC.presence_of_element_located((By.XPATH, img_xpath))).get_attribute('jqimg').split('.avif')[0].replace('//img','https://img')


            prices.append(float(price_temp))
            option1_list.append(option1_total[n] + ';' + temp)
            option1_total[n] += '/' + price_temp
            max_price = abs(max(prices) - min(prices)) / min(prices) * 100
            
            if max_price >= 300.0:
                if self.search_type == 1:
                    self.text.run('{}페이지 {}번째 아이템의 옵션가격이 본품 금액의 300% 이상입니다. 다음 아이템으로 넘어갑니다'.format(self.i + 1, self.j + 1))
                else:
                    self.text.run('{}-{}번째 아이템의 옵션가격이 본품 금액의 300% 이상입니다. 다음 아이템으로 넘어갑니다'.format(self.i+1, self.sub_idx+1))
                option1_list = []
                option1_total = []
                prices = []
                self.no_crawl = True
                break
            elif min(prices) <= float(self.price) / 2:
                if self.search_type == 1:
                    self.text.run('{}페이지 {}번째 아이템의 옵션가격이 본품 금액의 -50% 이하입니다. 다음 아이템으로 넘어갑니다'.format(self.i + 1, self.j + 1))
                else:
                    self.text.run('{}-{}번째 아이템의 옵션가격이 본품 금액의 -50% 이하입니다. 다음 아이템으로 넘어갑니다'.format(self.i+1, self.sub_idx+1))
                option1_list = []
                option1_total = []
                prices = []
                self.no_crawl = True
                break
        
        if self.no_crawl == False:
            for i in range(len(sku)):
                self.sku_id.append(sku_temp[i])

        return option1_total, option1_list, prices
    
    def GetDetailImages(self):
        ret = 1
        
        detail_imgs = []
        is_pass = False
        try:
            img_temp = self.driver.find_element(By.XPATH, '//*[@id="J-detail-content"]').get_attribute('innerHTML').split('src=')[1:]
            if len(img_temp) == 0:
                img_temp = self.driver.find_element(By.XPATH, '//*[@id="J-detail-content"]').get_attribute('innerHTML').split('url(//')[1:]
                for i in range(len(img_temp)):
                    if 'data-big-img' in img_temp[i]:
                        img_temp[i] = img_temp[i].split('data-big-img=')[1]
                    if 'http://' in img_temp[i] or 'https://' in img_temp[i]:
                        if 'blank' not in img_temp[i]:
                            detail_imgs.append(img_temp[i].split(');')[0].replace(" alt=", '').split('ssd-module-wrap')[0].replace(')}', '').split('\n')[0])
                    else:
                        if 'blank' not in img_temp[i]:
                            if '//img' not in img_temp[i]:
                                detail_imgs.append('https://' + img_temp[i].split(');')[0].replace(" alt=", '').split('ssd-module-wrap')[0].replace(')}', '').split('\n')[0])
                            else:
                                detail_imgs.append('https:' + img_temp[i].split(');')[0].replace(" alt=", '').split('ssd-module-wrap')[0].replace(')}', '').split('\n')[0])
            else:
                for i in range(len(img_temp)):
                    if 'data-big-img' in img_temp[i]:
                        img_temp[i] = img_temp[i].split('data-big-img=')[1]
                    if 'http://' in img_temp[i] or 'https://' in img_temp[i]:
                        if 'blank' not in img_temp[i]:
                            detail_imgs.append(img_temp[i].split('">')[0].replace('"','').replace(" alt=", '').split('ssd-module-wrap')[0].replace(')}', '').split('\n')[0])
                    else:
                        if 'blank' not in img_temp[i]:
                            if '//img' not in img_temp[i]:
                                detail_imgs.append('https://' + img_temp[i].split('">')[0].replace('"','').replace(" alt=", '').split('ssd-module-wrap')[0].replace(')}', '').split('\n')[0])
                            else:
                                detail_imgs.append('https:' + img_temp[i].split('">')[0].replace('"','').replace(" alt=", '').split('ssd-module-wrap')[0].replace(')}', '').split('\n')[0])
        except:
            try:
                img_temp = self.driver.find_element(By.XPATH, '//*[@id="J-detail-content"]').get_attribute('innerHTML').split('url(//')[1:]
            except:
                return ret, detail_imgs

            for i in range(len(img_temp)):
                if 'http://' in img_temp[i] or 'https://' in img_temp[i]:
                    if 'blank' not in img_temp[i]:
                        detail_imgs.append(img_temp[i].split(');')[0].split('ssd-module-wrap')[0].replace(')}', '').split('\n')[0])
                else:
                    if 'blank' not in img_temp[i]:
                        if '//img' not in img_temp[i]:
                            detail_imgs.append('https://' + img_temp[i].split(');')[0].split('ssd-module-wrap')[0].replace(')}', '').split('\n')[0])
                        else:
                            detail_imgs.append('https:' + img_temp[i].split(');')[0].split('ssd-module-wrap')[0].replace(')}', '').split('\n')[0])
            
        return ret, detail_imgs

    def ClickSearchButton(self):
        try:
            search_tab = WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, '#key')))
            search_click = WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, '#search-btn')))
            self.ac.move_to_element(search_tab).click().pause(2).send_keys(self.translated_name).pause(2).move_to_element(search_click).click().perform()
        except:
            self.text.run('검색버튼 클릭에 실패했습니다.')
            self.restart = True
            return 0

        time.sleep(self.process_delay)

    def ClickCameraButton(self):
        # 카메라 버튼 클릭
        try:
            WebDriverWait(self.driver, 100).until(EC.presence_of_element_located((By.CSS_SELECTOR, '#search-img-upload'))).click()
        except:
            self.text.run('카메라버튼 클릭에 실패했습니다.')
            self.restart = True
            return 0
        time.sleep(self.process_delay)

        # 이미지 넣어주기
        self.image_path = self.image_path_tb[self.i].split(self.image_name_tb[self.i])[0]
        file_path = pag.locateCenterOnScreen('./driver/filepath.PNG', confidence=0.5)

        win = gw.getWindowsWithTitle('Chrome')[0] # 윈도우 타이틀에 Chrome 이 포함된 모든 윈도우 수집, 리스트로 리턴
        if win.isActive == False:
            pywinauto.application.Application().connect(handle=win._hWnd).top_window().set_focus()
        win.activate() #윈도우 활성화
        time.sleep(self.process_delay)
        pag.click(win.left + file_path.x, win.top + file_path.y) # 해당 윈도우의 path 클릭
        time.sleep(self.process_delay)
        pyperclip.copy(self.image_path)
        pag.hotkey('ctrl', 'v')
        time.sleep(self.process_delay)
        pag.press('enter')

        pag.click(win.left + file_path.x, win.top + file_path.y) # 해당 윈도우의 파일 이름 클릭
        pag.press('del')
        pyperclip.copy(self.image_name_tb[self.i] + '.jpg')
        time.sleep(self.process_delay)
        pag.hotkey('ctrl', 'v')

        time.sleep(self.process_delay)
        #pag.click(win.left + open_btn.x, win.top + open_btn.y) # 해당 윈도우의 열기 클릭
        pag.press('enter')

    def isRepeat(self, previousItemList, itemList) :
    
        #같은 값을 응답받으면 True 리턴
        if previousItemList['shoppingResult']['products'][0]['productName'] == itemList['shoppingResult']['products'][0]['productName']:
            self.text.run('중복된 페이지 크롤링을 시도했습니다. 크롤링을 종료합니다.')
            return True
        #아니면 False 리턴
        return False
        
    def CleanText(self, inputString):
        text_rmv = re.sub('[-=+,#/\?:^.@*\"※~ㆍ!』‘|\(\)\[\]`\'…》\”\“\’·]', ' ', inputString)
        return text_rmv

    # 리뷰 타입 선택
    def SetReviewType(self):
        if self.amt_review.isChecked():
            self.review_type = 0
        elif self.good_review.isChecked():
            self.review_type = 1

    # 크롤링 재시작
    def Restart(self):
        self.driver.get('https://passport.jd.com/new/login.aspx?ReturnUrl=https%3A%2F%2Fglobal.jd.com%2F')
        self.text.run('징동닷컴 URL re-open 완료')
        time.sleep(self.process_delay)

    def ReLogin(self):
        if len(self.driver.window_handles) != 1:
            for n in range(len(self.driver.window_handles) - 1):
                last_tab = self.driver.window_handles[-1]
                self.driver.switch_to.window(window_name=last_tab)
                self.driver.close()
                time.sleep(1)

            first_tab = self.driver.window_handles[0]
            self.driver.switch_to.window(window_name=first_tab)
        else:
            first_tab = self.driver.window_handles[0]
            self.driver.switch_to.window(window_name=first_tab)
        time.sleep(0.5)
        self.restart = True
        ret = self.Login()
        if ret == 1:
            self.text.run('재로그인을 실시했습니다.')
            time.sleep(2)
            self.driver.get(self.search_url)
            time.sleep(self.process_delay)
            self.re_login = True
        
            if self.search_type == 0:
                self.ClickCameraButton()

        return ret
    
    def TranslateGoogle(self, text, option):
        return self.translator.translate(text, dest=option).text

    def TranslateChinese(self, text):
        client_id = "Uvq1xEXtYvQQs5zR00p2"
        client_pw = "0j597g2wUR"

        headers = {
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
            'X-Naver-Client-Id': 'Uvq1xEXtYvQQs5zR00p2',
            'X-Naver-Client-Secret': '0j597g2wUR',
        }

        data = {
            'text' : text,
            'source' : 'ko',
            'target' : 'zh-CN'
        }

        response = requests.post('https://openapi.naver.com/v1/papago/n2mt', headers=headers, data=data)
        rescode = response.status_code

        if(rescode==200):
            send_data = response.json()
            trans_data = (send_data['message']['result']['translatedText'])
            return trans_data
        else:
            self.text.run("Papago API 사용량이 모두 소진되었습니다.(하루 최대 10,000개)")

    # 쓰레드 종료
    def KillThread(self):
        pid = os.getpid()
        os.kill(pid, 2)

    # UI에 텍스트 출력
    @pyqtSlot(str)
    def ConnectTextBrowser(self, print_str):
        self.textBrowser.append(print_str)
        self.textBrowser.repaint()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MyWindow()
    window.show()
    app.exec_()
