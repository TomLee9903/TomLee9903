# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
from typing import Text
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5 import uic
from PyQt5 import QtCore
from PyQt5.QtCore import *
from PyQt5.QtCore import pyqtSlot

from selenium import webdriver
from selenium.webdriver import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import chromedriver_autoinstaller
import time
import datetime
import os
import pandas as pd
from PyQt5 import QtCore, QtGui, QtWidgets
import threading
import openpyxl
import shutil
import subprocess
import urllib.request

# QT designer ui 파일 로드
form_class = uic.loadUiType("./driver/main_ui.ui")[0]

# UI 텍스트 출력 클래스
class TextBrowser(QThread):
    # signal을 MyWindow에 전달할 수 있게 하는 인자
    finished = pyqtSignal(str)
    now_date = ''

    @pyqtSlot(str)
    def run(self, print_str):
        self.make_log(print_str)

    @pyqtSlot(str)
    def make_log(self, print_str):
        self.now_time = datetime.datetime.now()
        self.now_date = self.now_time.strftime('[%Y-%m-%d %H:%M:%S]  ') + print_str
        self.finished.emit(self.now_date)   # signal MyWindow에 전달

    def GetTime(self):
        self.now_time = datetime.datetime.now()
        return self.now_time

# UI 구성 클래스
class MyWindow(QMainWindow, form_class):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.cnt = 0
        self.setWindowIcon(QIcon('./driver/naver-icon-style-1-300x300.png'))    # UI에 Naver icon 설정
        self.run_btn.clicked.connect(self.Run)  # 검색 버튼 누르면 self.Run 함수 실행
        self.process_delay = 3
        self.text = TextBrowser()               # UI에 text 출력 위한 객체
        self.text.finished.connect(self.ConnectTextBrowser) # TextBrowser한테서 signal 받으면 ConnectTextBrowser 함수 실행
        self.exit_btn.clicked.connect(self.QuitProgram) # 종료 버튼 클릭하면 프로그램 종료되게끔 설정 & thread 종료
        self.restart = False
        self.amt_review.clicked.connect(self.SetReviewType) # 리뷰 많은순
        self.good_review.clicked.connect(self.SetReviewType)# 리뷰 좋은순
        self.review_type = 0

    # UI 창닫기 버튼 클릭하면 종료 의사 묻는 팝업창 띄우기
    def closeEvent(self, QCloseEvent): 
        ans = QMessageBox.question(self, "종료 확인", "종료하시겠습니까?",
                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)
        if ans == QMessageBox.Yes:
            QCloseEvent.accept()
            self.KillThread()
        else:
            QCloseEvent.ignore()
    
    # 종료 버튼 누르면 실행되는 함수
    def QuitProgram(self):
        QCoreApplication.instance().quit
        self.KillThread()

    # 검색 버튼 누르면 실행되는 Run 함수
    def Run(self):
        self.th = threading.Thread(target=self.StartCrawl)
        self.th.start()
    
    # 네이버 쇼핑 크롤링 함수
    def StartCrawl(self):
        self.text.run('--Start work--')
        self.start_time = self.text.GetTime()
        
        try:
            self.target_word = self.input_item_name.text()  # 입력한 아이템 이름 
        except:
            self.target_word == ''
            self.text.run('원하시는 아이템 이름을 입력해주세요!')
            return
        try:
            self.count = int(self.input_page_cnt.text())    # 입력한 검색 페이지 수
        except:
            self.count = 1

        if self.restart == False:
            self.OpenUrl()
        else:
            self.Restart()
        self.CrawlData()

    # 네이버쇼핑 URL 오픈
    @pyqtSlot()
    def OpenUrl(self):
        try:
            shutil.rmtree(r"c:\chrometemp")  #쿠키 / 캐쉬파일 삭제
        except FileNotFoundError:
            pass
        
        try:
            subprocess.Popen(r'C:\Program Files\Google\Chrome\Application\chrome.exe --remote-debugging-port=9222 --user-data-dir="C:\chrometemp"') # 디버거 크롬 구동
        except:
            subprocess.Popen(r'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe --remote-debugging-port=9222 --user-data-dir="C:\chrometemp"') # 디버거 크롬 구동

        self.options = webdriver.ChromeOptions()
        self.options.add_experimental_option("debuggerAddress", "127.0.0.1:9222")
        # 크롬 버전을 확인하여 버전이 안맞으면 자동으로 업데이트 하여 설치해주는 옵션
        chrome_ver = chromedriver_autoinstaller.get_chrome_version().split('.')[0]
        try:
            self.driver = webdriver.Chrome(f'./{chrome_ver}/chromedriver.exe', options=self.options)
        except:
            chromedriver_autoinstaller.install(True)
            self.driver = webdriver.Chrome(f'./{chrome_ver}/chromedriver.exe', options=self.options)
        self.driver.implicitly_wait(10)

        # 속도 향상을 위한 옵션 해제
        self.options.add_argument("disable-gpu") 
        self.options.add_argument("disable-infobars")
        self.options.add_argument("--disable-extensions")
        prefs = {'profile.default_content_setting_values': {'cookies' : 2, 'images': 2, 'plugins' : 2, 'popups': 2, 'geolocation': 2, 'notifications' : 2, 'auto_select_certificate': 2, 'fullscreen' : 2, 'mouselock' : 2, 'mixed_script': 2, 'media_stream' : 2, 'media_stream_mic' : 2, 'media_stream_camera': 2, 'protocol_handlers' : 2, 'ppapi_broker' : 2, 'automatic_downloads': 2, 'midi_sysex' : 2, 'push_messaging' : 2, 'ssl_cert_decisions': 2, 'metro_switch_to_desktop' : 2, 'protected_media_identifier': 2, 'app_banner': 2, 'site_engagement' : 2, 'durable_storage' : 2}}   
        self.options.add_experimental_option('prefs', prefs)
        # 크롬 브라우저와 셀레니움을 사용하면서 발생되는 '시스템에 부착된 장치가 작동하지 않습니다.' 라는 크롬 브라우저의 버그를 조치하기 위한 코드. 
        self.options.add_experimental_option("excludeSwitches", ["enable-logging"])

        # 윈도우 사이즈 맥스로 키우기
        self.driver.maximize_window()
        self.driver.get('https://www.naver.com')
        self.text.run('네이버 URL open 완료')

        time.sleep(self.process_delay)

    # 네이버쇼핑 크롤링 함수
    def CrawlData(self):
        ac = ActionChains(self.driver)  # 셀레니움 동작을 바인딩 하여 동작 할 수 있게 하는 모듈
        # 쇼핑 배너 클릭
        if self.restart == False:
            shopping_btn = self.driver.find_element_by_xpath('//*[@id="NM_FAVORITE"]/div[1]/ul[1]/li[5]/a').click()
        try:
            # 쇼핑 페이지로 잘 넘어왔는지 체크하는 코드
            element = WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, '#_verticalGnbModule > div > div > div._gnb_header_shop_Xd6Hq > div > h1 > a')))
        except:
            self.text.run('네이버 쇼핑 URL open에 실패했습니다.')
            self.driver.quit()

        time.sleep(self.process_delay)
        # 검색창
        try:
            search_tab = self.driver.find_element_by_css_selector('#_verticalGnbModule > div > div > div._gnb_header_shop_Xd6Hq > div > div._gnbSearch_search_area_3LAyd > form > fieldset > div > input')
        except:
            self.text.run('검색에 실패했습니다.')
            self.restart = True
            return 0
        # 검색창에 입력받은 아이템 이름 입력 후 엔터
        ac.move_to_element(search_tab).click().pause(2).send_keys(self.target_word).pause(1).send_keys(Keys.ENTER).perform()
        try:
            wait = WebDriverWait(self.driver, 10)
            element = wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id="__next"]/div/div[1]')))
        except:
            self.text.run('검색에 실패했습니다.')
            self.restart = True
            return 0
        
        self.text.run('{} 검색 성공!'.format(self.target_word))
        time.sleep(self.process_delay)

        # 해외직구 클릭
        try:
            self.driver.find_element_by_css_selector('#__next > div > div.style_container__1YjHN > div.style_inner__18zZX > div.style_content_wrap__1PzEo > div.style_content__2T20F > div.seller_filter_area > ul > li:nth-child(6) > a').click()
        except:
            self.text.run('해외직구 탭 클릭에 실패했습니다. 프로그램을 다시 시작해주세요.')
            self.restart = True
            return 0
        time.sleep(self.process_delay)

         # 80개씩 보기
        view_item_tab = self.driver.find_element_by_css_selector('#__next > div > div.style_container__1YjHN > div.style_inner__18zZX > div.style_content_wrap__1PzEo > div.style_content__2T20F > div.seller_filter_area > div.subFilter_sort_area__ZBnvs > div.subFilter_sort_choice__1SFXG > div.subFilter_select_box__1bM64').click()
        WebDriverWait(self.driver, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR, '#__next > div > div.style_container__1YjHN > div.style_inner__18zZX > div.style_content_wrap__1PzEo > div.style_content__2T20F > div.seller_filter_area > div.subFilter_sort_area__ZBnvs > div.subFilter_sort_choice__1SFXG > div.subFilter_select_box__1bM64.open > ul > li:nth-child(4)'))).click()
        time.sleep(2)
        # 금액 설정
        start_price = self.start_price.text()
        end_price = self.end_price.text()
        if start_price != '' and end_price != '':
            time.sleep(3)
            try:
                start_price_tab = self.driver.find_element_by_css_selector('#__next > div > div.style_container__1YjHN > div.style_inner__18zZX > div.filter_finder__1Gtei > div > div.filter_finder_col__3ttPW.filter_finder_price__2UlfJ > div.finder_price_inner > div > span:nth-child(2) > input[type=text]')
                end_price_tab = self.driver.find_element_by_css_selector('#__next > div > div.style_container__1YjHN > div.style_inner__18zZX > div.filter_finder__1Gtei > div > div.filter_finder_col__3ttPW.filter_finder_price__2UlfJ > div.finder_price_inner > div > span:nth-child(4) > input[type=text]')
                search_price_btn = self.driver.find_element_by_css_selector('#__next > div > div.style_container__1YjHN > div.style_inner__18zZX > div.filter_finder__1Gtei > div > div.filter_finder_col__3ttPW.filter_finder_price__2UlfJ > div.finder_price_inner > div > a')
            except:
                try:
                    start_price_tab = self.driver.find_element_by_css_selector('#__next > div > div.style_container__1YjHN > div > div.filter_finder__1Gtei > div > div.filter_finder_col__3ttPW.filter_finder_price__2UlfJ > div.finder_price_inner > div > span:nth-child(2) > input[type=text]')
                    end_price_tab = self.driver.find_element_by_css_selector('#__next > div > div.style_container__1YjHN > div > div.filter_finder__1Gtei > div > div.filter_finder_col__3ttPW.filter_finder_price__2UlfJ > div.finder_price_inner > div > span:nth-child(4) > input[type=text]')
                    search_price_btn = self.driver.find_element_by_css_selector('#__next > div > div.style_container__1YjHN > div > div.filter_finder__1Gtei > div > div.filter_finder_col__3ttPW.filter_finder_price__2UlfJ > div.finder_price_inner > div > a')
                except:
                    self.text.run('금액설정에 실패했습니다.')
                    self.restart = True
                    return 0
                
            # 금액 설정란에 입력받은 금액 입력 후 엔터
            ac.move_to_element(start_price_tab).click().pause(2).send_keys(start_price).pause(2).perform()
            ac.move_to_element(end_price_tab).click().pause(2).send_keys(end_price).pause(2).perform()
            ac.move_to_element(search_price_btn).click().perform()
            time.sleep(self.process_delay)

        # 리뷰 타입 받아서 정렬
        try:
            if self.review_type == 0:
                review_type_selector = '//*[@id="__next"]/div/div[2]/div[2]/div[3]/div[1]/div[2]/div[1]/div[1]/a[4]'
                review_type_str = '리뷰 많은순'
            elif self.review_type == 1:
                review_type_selector = '//*[@id="__next"]/div/div[2]/div[2]/div[3]/div[1]/div[2]/div[1]/div[1]/a[5]'
                review_type_str = '리뷰 좋은순'
            try:
                WebDriverWait(self.driver, 5).until(EC.presence_of_element_located((By.XPATH, review_type_selector))).click()
            except:
                if self.review_type == 0:
                    review_type_selector = '//*[@id="__next"]/div/div[2]/div/div[3]/div[1]/div[1]/div/div[1]/a[4]'
                    review_type_str = '리뷰 많은순'
                elif self.review_type == 1:
                    review_type_selector = '//*[@id="__next"]/div/div[2]/div/div[3]/div[1]/div[1]/div/div[1]/a[5]'
                    review_type_str = '리뷰 좋은순'
                WebDriverWait(self.driver, 5).until(EC.presence_of_element_located((By.XPATH, review_type_selector))).click()
        except:
            self.text.run('{} 클릭에 실패했습니다.'.format(review_type_str))
            self.restart = True
            return 0
        time.sleep(self.process_delay)
        
        # 페이지 끝까지 스크롤
        # 윈도우의 첫 좌표 대비 끝 좌표를 비교하여 같을 때까지 스크롤바를 내리는 로직
        before_h = self.driver.execute_script('return window.scrollY')
        while(True):
            self.driver.find_element_by_css_selector('body').send_keys(Keys.END)
            time.sleep(1)
            after_h = self.driver.execute_script('return window.scrollY')

            if after_h == before_h:
                break
            else:
                before_h = after_h
        # 현재 페이지에 나와 있는 아이템 테이블들의 정보를 받아오는 코드
        items = self.driver.find_elements_by_css_selector('.basicList_info_area__17Xyo')
        list_cnt = len(items)
        # 엑셀 파일에 담을 리스트 초기화
        wb = openpyxl.Workbook()
        sheet = wb.active
        #sheet.append(['상품명', '최저가', '스토어 갯수', '별점', '리뷰 갯수', '등록월', '스토어 링크'])
#        sheet.append(['상품명', '최저가', '별점', '리뷰 갯수', '등록월', '스토어 링크'])    # 스토어 갯수가 없는 경우가 많아 크롤링 속도가 느려지는 경우가 많이 발생
        sheet.append(['국내쇼핑몰이름', '국내쇼핑몰등급', '구매건수', '국내제품링크', '이미지이름', '이미지저장경로', '네이버카테고리', '국내사이트제목', '국내사이트태그',
                      '리뷰수', '국내사이트가격', '국내사이트배송비'])

        for i in range(self.count):
            if i != 0:
                # 페이지 끝까지 스크롤
                before_h = self.driver.execute_script('return window.scrollY')
                while(True):
                    self.driver.find_element_by_css_selector('body').send_keys(Keys.END)
                    time.sleep(1)
                    after_h = self.driver.execute_script('return window.scrollY') 

                    if after_h == before_h:
                        break
                    else:
                        before_h = after_h

                items = self.driver.find_elements_by_css_selector('.basicList_info_area__17Xyo')
            idx = 0
            no_review = False
            # 각 아이템별 데이터 크롤링
            for item in items:
                multi_store = False
                try:
                    is_abroad = WebDriverWait(item, 1).until(EC.presence_of_element_located((By.CSS_SELECTOR, '.ad_label__Ve7Bp'))).text
                except:
                    idx += 1
                    continue
                # 리뷰 갯수
                try:
                    review = WebDriverWait(item, 0.1).until(EC.presence_of_element_located((By.CSS_SELECTOR, '.basicList_num__1yXM9'))).text
                    review_cnt = int(review.replace(',','').replace("리뷰","").replace("별점",""))
                except:
                    review_cnt = 0

                if review_cnt == 0:
                    self.text.run('{}페이지 {}번째 아이템에 리뷰가 없습니다.'.format(i + 1, idx + 1))
                    no_review = True
                    break
                # 아이템명
                try:
                    title = WebDriverWait(item, 0.1).until(EC.presence_of_element_located((By.CSS_SELECTOR, '.basicList_title__3P9Q7'))).text
                except:
                    title = ''
                # 최저가
                try:
                    min_price = WebDriverWait(item, 0.1).until(EC.presence_of_element_located((By.CSS_SELECTOR, '.price_num__2WUXn')))
                    min_price = int(min_price.text.strip('원').replace(',', ''))
                except:
                    min_price = 0

                # 스토어 링크
                store_link = WebDriverWait(item, 0.1).until(EC.presence_of_element_located((By.CSS_SELECTOR, '.basicList_link__1MaTN'))).get_attribute('href')

                # # 등록월일
                # reg_data_xpath = '//*[@id="__next"]/div/div[2]/div[2]/div[3]/div[1]/ul/div/div[{}]/li/div/div[2]/div[5]/span[1]'.format(str(idx + 1))
                # reg_date = WebDriverWait(item, 0.1).until(EC.presence_of_element_located((By.XPATH, reg_data_xpath))).text.split('등록일 ')[1]
                # 국내쇼핑몰 이름
                try:
                    store_name_xpath = '//*[@id="__next"]/div/div[2]/div[2]/div[3]/div[1]/ul/div/div[{}]/li/div/div[3]/div[1]/a[1]'.format(str(idx + 1))
                    store_name = WebDriverWait(item, 0.1).until(EC.presence_of_element_located((By.XPATH, store_name_xpath))).text
                    if '쇼핑몰별 최저가' in store_name:
                        multi_store = True
                        store_list_xpath = '//*[@id="__next"]/div/div[2]/div[2]/div[3]/div[1]/ul/div/div[{}]/li/div/div[3]/ul'.format(str(idx + 1))
                        store_list = WebDriverWait(item, 0.1).until(EC.presence_of_element_located((By.XPATH, store_list_xpath))).text.replace("네이버플러스멤버십","").replace("네이버페이","").split('\n')
                        store_list = ' '.join(store_list).split()
                        store_temp = []
                        for ii in range(int(len(store_list) / 2)):
                            store_temp.append(store_list[(ii * 2)])
                        store_name = ', '.join(store_temp)
                except:
                    try:
                        store_name_xpath = '//*[@id="__next"]/div/div[2]/div/div[3]/div[1]/ul/div/div[{}]/li/div/div[3]/div[1]/a[1]'.format(str(idx + 1))
                        store_name = WebDriverWait(item, 0.1).until(EC.presence_of_element_located((By.XPATH, store_name_xpath))).text
                        if '쇼핑몰별 최저가' in store_name:
                            multi_store = True
                            store_list_xpath = '//*[@id="__next"]/div/div[2]/div/div[3]/div[1]/ul/div/div[{}]/li/div/div[3]/ul'.format(str(idx + 1))
                            store_list = WebDriverWait(item, 0.1).until(EC.presence_of_element_located((By.XPATH, store_list_xpath))).text.replace("네이버플러스멤버십","").replace("네이버페이","").split('\n')
                            store_list = ' '.join(store_list).split()
                            store_temp = []
                            for ii in range(int(len(store_list) / 2)):
                                store_temp.append(store_list[(ii * 2)])
                            store_name = ', '.join(store_temp)
                    except:
                        store_name = ''
                # 카테고리
                try:
                    category = WebDriverWait(item, 0.1).until(EC.presence_of_element_located((By.XPATH, '//*[@id="__next"]/div/div[2]/div[2]/div[2]/div/div[1]/div[2]'))).text.split('\n')
                    category = ', '.join(category)
                except:
                    try:
                        category = WebDriverWait(item, 0.1).until(EC.presence_of_element_located((By.XPATH, '//*[@id="__next"]/div/div[2]/div/div[2]/div[1]/div[1]/div[2]'))).text.split('\n')
                        category = ', '.join(category)
                    except:
                        category = '없음'
                # 구매건수
                try:
                    cell_cnt_xpath = '//*[@id="__next"]/div/div[2]/div[2]/div[3]/div[1]/ul/div/div[{}]/li/div/div[2]/div[5]/a[2]'.format(str(idx + 1))
                    cell_cnt = int(WebDriverWait(item, 0.1).until(EC.presence_of_element_located((By.XPATH, cell_cnt_xpath))).text.replace("구매건수","").replace(",",""))
                except:
                    try:
                        cell_cnt_xpath = '//*[@id="__next"]/div/div[2]/div/div[3]/div[1]/ul/div/div[{}]/li/div/div[2]/div[5]/a[2]'.format(str(idx + 1))
                        cell_cnt = int(WebDriverWait(item, 0.1).until(EC.presence_of_element_located((By.XPATH, cell_cnt_xpath))).text.replace("구매건수","").replace(",",""))
                    except:
                        cell_cnt = 0
                # 태그
                tag = []
                tag_idx = 1
                while True:
                    try:
                        tag_temp = self.driver.find_element_by_xpath('//*[@id="__next"]/div/div[2]/div[2]/div[3]/div[1]/ul/div/div[{}]/li/div/div[2]/div[3]/span[{}]'.format(str(idx + 1), tag_idx)).text
                        tag.append(tag_temp)
                        tag_idx += 1
                    except:
                        try:
                            tag_temp = self.driver.find_element_by_xpath('//*[@id="__next"]/div/div[2]/div/div[3]/div[1]/ul/div/div[{}]/li/div/div[2]/div[3]/span[{}]'.format(str(idx + 1), tag_idx)).text
                            tag.append(tag_temp)
                            tag_idx += 1
                        except:
                            break
                tag = ' > '.join(tag)

                # 이미지 저장
                try:
                    img = self.driver.find_element_by_xpath('//*[@id="__next"]/div/div[2]/div[2]/div[3]/div[1]/ul/div/div[{}]/li/div/div[1]/div/a/img'.format(str(idx + 1)))
                    img_url = img.get_attribute('src')
                except:
                    img = self.driver.find_element_by_xpath('//*[@id="__next"]/div/div[2]/div/div[3]/div[1]/ul/div/div[{}]/li/div/div[1]/div/a/img'.format(str(idx + 1)))
                    img_url = img.get_attribute('src')

                img_folder = './Image'
                img_name = '{}/{}_{}_{}_image'.format(img_folder, i + 1, idx + 1, self.target_word.replace('/',''))
                try:
                    if not os.path.isdir(img_folder):
                        os.mkdir(img_folder)
                except OSError:
                    self.text.run('이미지 폴더를 생성하는데 실패했습니다.')
                    return 0
                t = urllib.request.urlretrieve(img_url, img_name + ".jpg" )

                if multi_store != True:
                    # 국내쇼핑몰 등급
                    try:
                        store_rank_xpath = '//*[@id="__next"]/div/div[2]/div[2]/div[3]/div[1]/ul/div/div[{}]/li/div/div[3]/div[2]/span'.format(str(idx + 1))
                        store_rank = WebDriverWait(item, 0.1).until(EC.presence_of_element_located((By.XPATH, store_rank_xpath))).text
                    except:
                        try:
                            store_rank_xpath = '//*[@id="__next"]/div/div[2]/div/div[3]/div[1]/ul/div/div[{}]/li/div/div[3]/div[2]/span'.format(str(idx + 1))
                            store_rank = WebDriverWait(item, 0.1).until(EC.presence_of_element_located((By.XPATH, store_rank_xpath))).text
                        except:
                            store_rank = '없음'
                    # 배송비
                    try:
                        delivery_fee_xpath = '//*[@id="__next"]/div/div[2]/div[2]/div[3]/div[1]/ul/div/div[{}]/li/div/div[3]/ul/li[2]/em'.format(str(idx + 1))
                        delivery_fee = WebDriverWait(item, 0.1).until(EC.presence_of_element_located((By.XPATH, delivery_fee_xpath))).text.replace("배송비 ","")
                    except:
                        try:
                            delivery_fee_xpath = '//*[@id="__next"]/div/div[2]/div/div[3]/div[1]/ul/div/div[{}]/li/div/div[3]/ul/li[2]/em'.format(str(idx + 1))
                            delivery_fee = WebDriverWait(item, 0.1).until(EC.presence_of_element_located((By.XPATH, delivery_fee_xpath))).text.replace("배송비 ","")
                        except:
                            delivery_fee = '알수없음'
                else:
                    store_rank = '없음'
                    delivery_fee = '알수없음'

                # # 별점
                # try:
                #     review_score = WebDriverWait(item, 0.1).until(EC.presence_of_element_located((By.CSS_SELECTOR, '.basicList_star__3NkBn')))
                #     review_score = review_score.text
                # except:
                #     review_score = 0
                # 스토어 갯수
                # try:
                #     store_cnt = WebDriverWait(item, 0.1).until(EC.presence_of_element_located((By.CSS_SELECTOR, '.basicList_compare__3AjuT')))
                #     store_cnt = int(store_cnt.text.split('판매처 ')[1])
                # except:
                #     store_cnt = 1

                # 크롤링 결과 엑셀로 저장
                current_path = os.getcwd()
                now_time = datetime.datetime.now()
                now_date = now_time.strftime('%Y-%m-%d') + '_'  #YYYY-MM-DD
                #sheet.append([title, min_price, store_cnt, review_score, review_cnt, reg_date, store_link])
                #sheet.append([title, min_price, review_score, review_cnt, reg_date, store_link])
                sheet.append([store_name, store_rank, cell_cnt, store_link, img_name, img_folder, category, title, tag, review_cnt, min_price, delivery_fee])
                wb.save("{}\\".format(current_path) + now_date + self.target_word.replace('/','') + "_results.xlsx")

                self.text.run('{}페이지 {}번째 아이템 크롤링 중'.format(i + 1, idx + 1))

                idx += 1
                
            self.text.run('{}페이지 크롤링 완료!'.format(i + 1))
            if no_review == True:
                break
            if i != self.count - 1:
                # 다음 페이지로 넘기기
                self.driver.find_element_by_css_selector('.pagination_next__1ITTf').click()
                time.sleep(self.process_delay)

        # 크롬드라이버 종료
        self.end_time = self.text.GetTime()
        diff_time = self.end_time - self.start_time
        self.text.run('--End work--')
        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
        self.restart = True
        return 1
    
    # 리뷰 타입 선택
    def SetReviewType(self):
        if self.amt_review.isChecked():
            self.review_type = 0
        elif self.good_review.isChecked():
            self.review_type = 1

    # 크롤링 재시작
    def Restart(self):
        self.driver.get('https://shopping.naver.com/home/p/index.naver')
        self.text.run('네이버 쇼핑 URL re-open 완료')
        time.sleep(self.process_delay)

    # 쓰레드 종료
    def KillThread(self):
        pid = os.getpid()
        os.kill(pid, 2)

    # UI에 텍스트 출력
    @pyqtSlot(str)
    def ConnectTextBrowser(self, print_str):
        self.textBrowser.append(print_str)
        self.textBrowser.repaint()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MyWindow()
    window.show()
    app.exec_()
