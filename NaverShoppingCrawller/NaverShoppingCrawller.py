# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
from typing import Text
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5 import uic
from PyQt5 import QtCore
from PyQt5.QtCore import *
from PyQt5.QtCore import pyqtSlot

from selenium import webdriver
from selenium.webdriver import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import datetime
import os
import re
import pandas as pd
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets

# UI 텍스트 출력 클래스
class TextBrowser(QThread):
    finished = pyqtSignal(str)
    now_date = ''

    @pyqtSlot(str)
    def run(self, print_str):
        self.make_log(print_str)

    @pyqtSlot(str)
    def make_log(self, print_str):
        self.now_time = datetime.datetime.now()
        self.now_date = self.now_time.strftime('[%Y-%m-%d %H:%M:%S]  ') + print_str
        self.finished.emit(self.now_date)

    def GetTime(self):
        self.now_time = datetime.datetime.now()
        return self.now_time

class MyWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.cnt = 0
        self.setWindowIcon(QIcon('./driver/naver-icon-style-1-300x300.png'))
        self.run_btn.clicked.connect(self.Run)
        self.process_delay = 3
        self.text = TextBrowser()
        self.text.finished.connect(self.ConnectTextBrowser)
        self.exit_btn.clicked.connect(QCoreApplication.instance().quit)

    def closeEvent(self, QCloseEvent):
        ans = QMessageBox.question(self, "종료 확인", "종료하시겠습니까?",
                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)
        if ans == QMessageBox.Yes:
            QCloseEvent.accept()
        else:
            QCloseEvent.ignore()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(449, 398)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setObjectName("groupBox")
        self.gridLayout = QtWidgets.QGridLayout(self.groupBox)
        self.gridLayout.setObjectName("gridLayout")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        self.input_item_name = QtWidgets.QLineEdit(self.groupBox)
        self.input_item_name.setObjectName("input_item_name")
        self.gridLayout.addWidget(self.input_item_name, 0, 1, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 0, 1, 1)
        self.input_page_cnt = QtWidgets.QLineEdit(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.input_page_cnt.sizePolicy().hasHeightForWidth())
        self.input_page_cnt.setSizePolicy(sizePolicy)
        self.input_page_cnt.setObjectName("input_page_cnt")
        self.gridLayout.addWidget(self.input_page_cnt, 1, 1, 1, 1)
        self.gridLayout_2.addWidget(self.groupBox, 0, 0, 1, 2)
        self.run_btn = QtWidgets.QPushButton(self.centralwidget)
        self.run_btn.setObjectName("run_btn")
        self.gridLayout_2.addWidget(self.run_btn, 2, 0, 1, 1)
        self.exit_btn = QtWidgets.QPushButton(self.centralwidget)
        self.exit_btn.setObjectName("exit_btn")
        self.gridLayout_2.addWidget(self.exit_btn, 2, 1, 1, 1)
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setObjectName("textBrowser")
        self.gridLayout_2.addWidget(self.textBrowser, 1, 0, 1, 2)
        self.gridLayout_3.addLayout(self.gridLayout_2, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 449, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "NaverShopper"))
        self.groupBox.setTitle(_translate("MainWindow", "검색"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">아이템 이름</p></body></html>"))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">검색 페이지수</p></body></html>"))
        self.run_btn.setText(_translate("MainWindow", "검색"))
        self.exit_btn.setText(_translate("MainWindow", "종료"))

    def Run(self):
        self.text.run('--Start work--')
        self.start_time = self.text.GetTime()
        
        try:
            self.target_word = self.input_item_name.text()
        except:
            self.target_word == ''
            self.text.run('원하시는 아이템 이름을 입력해주세요!')
            return
        try:
            self.count = int(self.input_page_cnt.text())
        except:
            self.count = 1

        self.OpenUrl()
        self.CrawlData()
    
    @pyqtSlot()
    def OpenUrl(self):
        self.options = webdriver.ChromeOptions()
        self.options.add_experimental_option("excludeSwitches", ["enable-logging"])
        self.driver = webdriver.Chrome("./driver/chromedriver.exe", options=self.options);
        self.driver.maximize_window()
        self.driver.get('https://www.naver.com')
        self.text.run('네이버 URL open 완료')

        time.sleep(self.process_delay)

    def CrawlData(self):
        ac = ActionChains(self.driver)
        shopping_btn = self.driver.find_element_by_xpath('//*[@id="NM_FAVORITE"]/div[1]/ul[1]/li[5]/a').click()
        try:
            wait = WebDriverWait(self.driver, 10)
            element = wait.until(EC.presence_of_element_located((By.ID, 'header')))
        except:
            self.text.run('네이버 쇼핑 URL open에 실패했습니다.')
            self.driver.quit()

        time.sleep(self.process_delay)
        search_tab = self.driver.find_element_by_xpath('//*[@id="autocompleteWrapper"]/input[1]')
        ac.move_to_element(search_tab).click().pause(2).send_keys(self.target_word).pause(1).send_keys(Keys.ENTER).perform()
        try:
            wait = WebDriverWait(self.driver, 10)
            element = wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id="__next"]/div/div[1]')))
        except:
            self.text.run('검색에 실패했습니다.')
            self.driver.quit()

        time.sleep(self.process_delay)
         # 80개씩 보기
        view_item_tab = self.driver.find_element_by_css_selector('.subFilter_sort_choice__1SFXG > div:nth-child(3) > a')
        ac.move_to_element(view_item_tab).click().pause(2).perform()
        max_item_list = self.driver.find_element_by_css_selector('.subFilter_select_box__1bM64.open > ul > li:nth-child(4) > a')
        ac.move_to_element(max_item_list).click().pause(2).perform()

        # 페이지 끝까지 스크롤
        before_h = self.driver.execute_script('return window.scrollY')
        while(True):
            self.driver.find_element_by_css_selector('body').send_keys(Keys.END)
            time.sleep(1)
            after_h = self.driver.execute_script('return window.scrollY') 

            if after_h == before_h:
                break
            else:
                before_h = after_h

        items = self.driver.find_elements_by_css_selector('.basicList_info_area__17Xyo')
        list_cnt = len(items)
        final_res = [['', '', '', '', '', '', '']] * (list_cnt * self.count)
        final_res = pd.DataFrame(final_res)
        final_res.columns = ['상품명', '최저가', '스토어 갯수', '별점', '리뷰 갯수', '등록월', '스토어 링크']

        for i in range(self.count):
            if i != 0:
                # 페이지 끝까지 스크롤
                before_h = self.driver.execute_script('return window.scrollY')
                while(True):
                    self.driver.find_element_by_css_selector('body').send_keys(Keys.END)
                    time.sleep(1)
                    after_h = self.driver.execute_script('return window.scrollY') 

                    if after_h == before_h:
                        break
                    else:
                        before_h = after_h

                items = self.driver.find_elements_by_css_selector('.basicList_info_area__17Xyo')
            idx = 0

            for item in items:
                title = item.find_element_by_css_selector('.basicList_title__3P9Q7').text
                try:
                    min_price = int(item.find_element_by_css_selector('.price_num__2WUXn').text.strip('원').replace(',', ''))
                except:
                    min_price = 0
                try:
                    store_cnt = int(item.find_element_by_css_selector('.basicList_compare__3AjuT').text.split('판매처 ')[1])
                except:
                    store_cnt = 1
                store_link = item.find_element_by_css_selector('.basicList_link__1MaTN').get_attribute('href')
                try:
                    review_score = item.find_element_by_css_selector('.basicList_star__3NkBn').text
                except:
                    review_score = 0
                try:
                    review_cnt = int(item.find_element_by_css_selector('.basicList_num__1yXM9').text)
                except:
                    review_cnt = 0

                reg_data_xpath = '//*[@id="__next"]/div/div[2]/div[2]/div[3]/div[1]/ul/div/div[{}]/li/div/div[2]/div[5]/span[1]'.format(str(idx + 1))
                reg_date = item.find_element_by_xpath(reg_data_xpath).text.split('등록일 ')[1]

                final_res.iloc[idx + (i * list_cnt)][0] = title
                final_res.iloc[idx + (i * list_cnt)][1] = min_price
                final_res.iloc[idx + (i * list_cnt)][2] = store_cnt
                final_res.iloc[idx + (i * list_cnt)][3] = review_score
                final_res.iloc[idx + (i * list_cnt)][4] = review_cnt
                final_res.iloc[idx + (i * list_cnt)][5] = reg_date
                final_res.iloc[idx + (i * list_cnt)][6] = store_link

                idx += 1

            self.driver.find_element_by_css_selector('.pagination_next__1ITTf').click()
            time.sleep(self.process_delay)
        
        current_path = os.getcwd()
        now_time = datetime.datetime.now()
        now_date = now_time.strftime('%Y-%m-%d-%H%M') + '_'
        # 결과값 저장
        final_res = final_res.drop_duplicates(['스토어 링크'], keep='last')
        if final_res.iloc[0][0] == '':
            final_res = final_res.drop(final_res.index[0])
        final_res = final_res.sort_values(by='최저가')
        final_res.to_excel("{}\\".format(current_path) + now_date + self.target_word + "_results.xlsx", index=False)
        # 크롬드라이버 종료
        self.end_time = self.text.GetTime()
        diff_time = self.end_time - self.start_time
        self.text.run('--End work--')
        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
        self.driver.quit()

    @pyqtSlot(str)
    def ConnectTextBrowser(self, print_str):
        self.textBrowser.append(print_str)
        self.textBrowser.repaint()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MyWindow()
    window.show()
    app.exec_()
