# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
from tkinter import dialog
from typing import Text
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5 import uic
from PyQt5.QtCore import *
from PyQt5.QtCore import pyqtSlot

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
import chromedriver_autoinstaller
import shutil
import subprocess
import time

import datetime
import os
import pandas as pd
import threading
import tkinter
import googletrans as google
from tkinter.filedialog import askopenfilename
import pyautogui

# QT designer ui 파일 로드
form_class = uic.loadUiType("./driver/main_ui.ui")[0]

# UI 텍스트 출력 클래스
class TextBrowser(QThread):
    # signal을 MyWindow에 전달할 수 있게 하는 인자
    finished = pyqtSignal(str)
    now_date = ''

    @pyqtSlot(str)
    def run(self, print_str):
        self.make_log(print_str)

    @pyqtSlot(str)
    def make_log(self, print_str):
        self.now_time = datetime.datetime.now()
        self.now_date = self.now_time.strftime('[%Y-%m-%d %H:%M:%S]  ') + print_str
        self.finished.emit(self.now_date)   # signal MyWindow에 전달

    def GetTime(self):
        self.now_time = datetime.datetime.now()
        return self.now_time

# UI 구성 클래스
class MyWindow(QMainWindow, form_class):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.setWindowIcon(QIcon('./driver/MainImage.png'))    # UI에 구글 번역 icon 설정
        self.run_btn.clicked.connect(self.Run)  # 검색 버튼 누르면 self.Run 함수 실행
        self.process_delay = 1.5
        self.text = TextBrowser()               # UI에 text 출력 위한 객체
        self.translator = google.Translator()
        self.windows_user_name = os.path.expanduser('~')
        self.translate_target = 1
        self.left_param = 0
        self.right_param = 0
        self.pre_text = ''
        self.current_text = ''
        self.silent_mode = True
        self.refresh = False

        self.text.finished.connect(self.ConnectTextBrowser) # TextBrowser한테서 signal 받으면 ConnectTextBrowser 함수 실행
        self.exit_btn.clicked.connect(self.QuitProgram) # 종료 버튼 클릭하면 프로그램 종료되게끔 설정 & thread 종료
        self.select_file.clicked.connect(self.SetFile)
        self.clear_file.clicked.connect(self.ClearFile)
        self.title_radio.clicked.connect(self.SetTranslateTarget)
        self.option_radio.clicked.connect(self.SetTranslateTarget)
        self.all_radio.clicked.connect(self.SetTranslateTarget)
        self.silent_check.clicked.connect(self.SetSilentMode)
        self.setAcceptDrops(True)
        self.acceptDrops()

    # UI 창닫기 버튼 클릭하면 종료 의사 묻는 팝업창 띄우기
    def closeEvent(self, QCloseEvent): 
        ans = QMessageBox.question(self, "종료 확인", "종료하시겠습니까?",
                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)
        if ans == QMessageBox.Yes:
            QCloseEvent.accept()
            self.KillThread()
        else:
            QCloseEvent.ignore()
    
    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls():
            event.accept()
        else:
            event.ignore()
 
    def dropEvent(self, event):
        files = [u.toLocalFile() for u in event.mimeData().urls()]
        self.filename = files[0]
        self.df = pd.read_excel(self.filename)
        self.df.fillna('', inplace=True)
        self.text.run('파일 이름 : {}'.format(self.filename.split('/')[-1].replace('.xlsx','')))

    def SetFile(self):
        root = tkinter.Tk()
        root.withdraw()
        self.filename = askopenfilename(parent=root, filetypes=[('수집데이터 엑셀', '.xlsx')], initialdir=self.windows_user_name, title='번역을 원하시는 파일을 선택해주세요')
        if self.filename != '':
            self.df = pd.read_excel(self.filename)
            self.df.fillna('', inplace=True)
            self.text.run('파일 이름 : {}'.format(self.filename.split('/')[-1].replace('.xlsx','')))

    def SetTranslateTarget(self):
        if self.title_radio.isChecked():
            self.translate_target = 0
        elif self.option_radio.isChecked():
            self.translate_target = 1
        elif self.all_radio.isChecked():
            self.translate_target = 2
    
    def SetSilentMode(self):
        silent = self.silent_check.isChecked()
        if silent == True:
            self.silent_mode = True
        elif silent == False:
            self.silent_mode = False

    def ClearFile(self):
        self.df = []
        self.text.run('메모리를 클리어했습니다.')

    # 종료 버튼 누르면 실행되는 함수
    def QuitProgram(self):
        QCoreApplication.instance().quit
        self.KillThread()

    # 검색 버튼 누르면 실행되는 Run 함수
    def Run(self):
        self.th = threading.Thread(target=self.StartTranslate)
        self.th.daemon = True
        self.th.start()

    # 파파고 URL 오픈
    @pyqtSlot()
    def OpenUrl(self):
        # try:
        #     shutil.rmtree(r"c:\chrometemp")  #쿠키 / 캐쉬파일 삭제
        # except FileNotFoundError:
        #     pass
        
        # try:
        #     subprocess.Popen(r'C:\Program Files\Google\Chrome\Application\chrome.exe --remote-debugging-port=9222 --user-data-dir="C:\chrometemp"') # 디버거 크롬 구동
        # except:
        #     subprocess.Popen(r'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe --remote-debugging-port=9222 --user-data-dir="C:\chrometemp"') # 디버거 크롬 구동

        self.options = Options()
        if self.silent_mode == True:
            self.options.add_argument('--headless')
        #self.options.add_experimental_option("debuggerAddress", "127.0.0.1:9222")
        # 크롬 버전을 확인하여 버전이 안맞으면 자동으로 업데이트 하여 설치해주는 옵션       
        chrome_ver = chromedriver_autoinstaller.get_chrome_version().split('.')[0]
        try:
            self.driver = webdriver.Chrome(f'./{chrome_ver}/chromedriver.exe', options=self.options)
        except:
            chromedriver_autoinstaller.install(True)
            self.driver = webdriver.Chrome(f'./{chrome_ver}/chromedriver.exe', options=self.options)
        self.driver.implicitly_wait(10)
        
        # 속도 향상을 위한 옵션 해제
        self.options.add_argument("disable-gpu") 
        self.options.add_argument("disable-infobars")
        self.options.add_argument("--disable-extensions")
        prefs = {'profile.default_content_setting_values': {'cookies' : 2, 'images': 2, 'plugins' : 2, 'popups': 2, 'geolocation': 2, 'notifications' : 2, 'auto_select_certificate': 2, 'fullscreen' : 2, 'mouselock' : 2, 'mixed_script': 2, 'media_stream' : 2, 'media_stream_mic' : 2, 'media_stream_camera': 2, 'protocol_handlers' : 2, 'ppapi_broker' : 2, 'automatic_downloads': 2, 'midi_sysex' : 2, 'push_messaging' : 2, 'ssl_cert_decisions': 2, 'metro_switch_to_desktop' : 2, 'protected_media_identifier': 2, 'app_banner': 2, 'site_engagement' : 2, 'durable_storage' : 2}}   
        self.options.add_experimental_option('prefs', prefs)
        # 크롬 브라우저와 셀레니움을 사용하면서 발생되는 '시스템에 부착된 장치가 작동하지 않습니다.' 라는 크롬 브라우저의 버그를 조치하기 위한 코드. 
        self.options.add_experimental_option("excludeSwitches", ["enable-logging"])

        # 윈도우 사이즈 맥스로 키우기
        self.driver.maximize_window()
        self.driver.get('https://papago.naver.com')
        self.text.run('파파고 URL open 완료')

        time.sleep(self.process_delay)

    @pyqtSlot()
    # 징동닷컴 크롤링 함수
    def StartTranslate(self):
        self.text.run('--Start work--')
        self.text.run('PGM ver : 22081303')
        self.start_time = self.text.GetTime()
        filename = self.filename.split('.xlsx')[0]
        self.OpenUrl()
        pyautogui.press('f12')
        time.sleep(2)

        translate_table = ['상품제목', '옵션명', '상품제목 + 옵션명']
        self.left_param = self.left_combo.currentIndex()
        self.right_param = self.right_combo.currentIndex()
        self.driver.find_element(By.CSS_SELECTOR, '#ddSourceLanguage > div.dropdown_top___13QlJ > button:nth-child(2) > span').click()
        time.sleep(2)
        self.driver.find_element(By.CSS_SELECTOR, '#ddSourceLanguage > div.dropdown_menu___XsI_h.active___3VPGL > ul > li:nth-child({})'.format(self.left_param + 1)).click()
        time.sleep(2)
        self.driver.find_element(By.CSS_SELECTOR, '#ddTargetLanguage > div.dropdown_top___13QlJ > button:nth-child(2) > span').click()
        time.sleep(2)
        self.driver.find_element(By.CSS_SELECTOR, '#ddTargetLanguage > div.dropdown_menu___XsI_h.active___3VPGL > ul > li:nth-child({})'.format(self.right_param + 1)).click()
        time.sleep(2)
        
        for i in range(len(self.df['상품제목'])):
            option1_list = []
            option2_list = []
            option1_total = []
            cnt = 0
            try:
                self.left = self.driver.find_element(By.CSS_SELECTOR, 'textarea#txtSource')
                self.right = self.driver.find_element(By.CSS_SELECTOR, 'div#txtTarget')
                self.translate_btn = self.driver.find_element(By.CSS_SELECTOR, '#btnTranslate > span.translate_pc___2dgT8')
            except:
                try:
                    self.RefreshWeb()
                    self.left = self.driver.find_element(By.CSS_SELECTOR, 'textarea#txtSource')
                    self.right = self.driver.find_element(By.CSS_SELECTOR, 'div#txtTarget')
                    self.translate_btn = self.driver.find_element(By.CSS_SELECTOR, '#btnTranslate > span.translate_pc___2dgT8')
                    self.left.clear()
                except:
                    self.text.run('웹페이지에 오류가 발생되었습니다. 프로그램을 재실행 해주시기 바랍니다.')
                    return 0

            if self.translate_target == 0:
                while True:
                    ret, translated_title = self.TranslateTitle(self.df['상품제목'][i])
                    if ret == 0:
                        self.text.run('웹페이지에 오류가 발생되었습니다. 프로그램을 재실행 해주시기 바랍니다.')
                    if '감지된' in self.current_text:
                        self.RefreshWeb()
                    if self.current_text != self.pre_text and self.current_text != '':
                        break
                    cnt += 1
                    if cnt == 3:
                        break
                    else:
                        self.driver.refresh()
                        try:
                            self.left = self.driver.find_element(By.CSS_SELECTOR, 'textarea#txtSource')
                            self.right = self.driver.find_element(By.CSS_SELECTOR, 'div#txtTarget')
                            self.translate_btn = self.driver.find_element(By.CSS_SELECTOR, '#btnTranslate > span.translate_pc___2dgT8')
                        except:
                            try:
                                self.RefreshWeb()
                                self.left = self.driver.find_element(By.CSS_SELECTOR, 'textarea#txtSource')
                                self.right = self.driver.find_element(By.CSS_SELECTOR, 'div#txtTarget')
                                self.translate_btn = self.driver.find_element(By.CSS_SELECTOR, '#btnTranslate > span.translate_pc___2dgT8')
                                self.left.clear()
                            except:
                                self.text.run('웹페이지에 오류가 발생되었습니다. 프로그램을 재실행 해주시기 바랍니다.')
                                return 0
                        time.sleep(1)

                self.df['상품제목'][i] = translated_title
                self.left.clear()
                self.pre_text = self.current_text
                time.sleep(1)

            elif self.translate_target == 1:                
                while True:
                    ret, option1_list, option2_list, option1_total = self.TranslateOption(self.df['옵션1'][i], self.df['옵션2'][i], self.df['옵션_종합'][i])
                    if ret == 0:
                        self.text.run('웹페이지에 오류가 발생되었습니다. 프로그램을 재실행 해주시기 바랍니다.')

                    if '감지된' in self.current_text:
                        self.RefreshWeb()
                    if (self.current_text != self.pre_text and self.current_text != '') or len(option1_list) == 0:
                        break
                    cnt += 1
                    if cnt == 3:
                        break
                    else:
                        self.driver.refresh()
                        try:
                            self.left = self.driver.find_element(By.CSS_SELECTOR, 'textarea#txtSource')
                            self.right = self.driver.find_element(By.CSS_SELECTOR, 'div#txtTarget')
                            self.translate_btn = self.driver.find_element(By.CSS_SELECTOR, '#btnTranslate > span.translate_pc___2dgT8')
                        except:
                            try:
                                self.RefreshWeb()
                                self.left = self.driver.find_element(By.CSS_SELECTOR, 'textarea#txtSource')
                                self.right = self.driver.find_element(By.CSS_SELECTOR, 'div#txtTarget')
                                self.translate_btn = self.driver.find_element(By.CSS_SELECTOR, '#btnTranslate > span.translate_pc___2dgT8')
                                self.left.clear()
                            except:
                                self.text.run('웹페이지에 오류가 발생되었습니다. 프로그램을 재실행 해주시기 바랍니다.')
                                return 0
                        time.sleep(1)

                option1_list = '\n'.join(option1_list)
                option2_list = '\n'.join(option2_list)
                option1_total = '\n'.join(option1_total)

                self.df['옵션1'][i] = option1_list
                self.df['옵션2'][i] = option2_list
                self.df['옵션_종합'][i] = option1_total
                self.left.clear()
                self.pre_text = self.current_text
                time.sleep(0.5)

            else:
                while True:
                    ret, translated_title = self.TranslateTitle(self.df['상품제목'][i])
                    if ret == 0:
                        self.text.run('웹페이지에 오류가 발생되었습니다. 프로그램을 재실행 해주시기 바랍니다.')

                    if '감지된' in self.current_text:
                        self.RefreshWeb()
                    if self.current_text != self.pre_text and self.current_text != '':
                        break
                    cnt += 1
                    if cnt == 3:
                        break
                    else:
                        self.driver.refresh()
                        try:
                            self.left = self.driver.find_element(By.CSS_SELECTOR, 'textarea#txtSource')
                            self.right = self.driver.find_element(By.CSS_SELECTOR, 'div#txtTarget')
                            self.translate_btn = self.driver.find_element(By.CSS_SELECTOR, '#btnTranslate > span.translate_pc___2dgT8')
                        except:
                            try:
                                self.RefreshWeb()
                                self.left = self.driver.find_element(By.CSS_SELECTOR, 'textarea#txtSource')
                                self.right = self.driver.find_element(By.CSS_SELECTOR, 'div#txtTarget')
                                self.translate_btn = self.driver.find_element(By.CSS_SELECTOR, '#btnTranslate > span.translate_pc___2dgT8')
                                self.left.clear()
                            except:
                                self.text.run('웹페이지에 오류가 발생되었습니다. 프로그램을 재실행 해주시기 바랍니다.')
                                return 0
                        time.sleep(1)
                        
                self.pre_text = self.current_text
                self.df['상품제목'][i] = translated_title
                self.left.clear()
                time.sleep(0.5)
                cnt = 0
                while True:
                    ret, option1_list, option2_list, option1_total = self.TranslateOption(self.df['옵션1'][i], self.df['옵션2'][i], self.df['옵션_종합'][i])
                    if ret == 0:
                        self.text.run('웹페이지에 오류가 발생되었습니다. 프로그램을 재실행 해주시기 바랍니다.')

                    if '감지된' in self.current_text:
                        self.RefreshWeb()
                    if (self.current_text != self.pre_text and self.current_text != '') or len(option1_list) == 0:
                        break
                    cnt += 1
                    if cnt == 3:
                        break
                    else:
                        self.driver.refresh()
                        try:
                            self.left = self.driver.find_element(By.CSS_SELECTOR, 'textarea#txtSource')
                            self.right = self.driver.find_element(By.CSS_SELECTOR, 'div#txtTarget')
                            self.translate_btn = self.driver.find_element(By.CSS_SELECTOR, '#btnTranslate > span.translate_pc___2dgT8')
                        except:
                            try:
                                self.RefreshWeb()
                                self.left = self.driver.find_element(By.CSS_SELECTOR, 'textarea#txtSource')
                                self.right = self.driver.find_element(By.CSS_SELECTOR, 'div#txtTarget')
                                self.translate_btn = self.driver.find_element(By.CSS_SELECTOR, '#btnTranslate > span.translate_pc___2dgT8')
                                self.left.clear()
                            except:
                                self.text.run('웹페이지에 오류가 발생되었습니다. 프로그램을 재실행 해주시기 바랍니다.')
                                return 0
                        time.sleep(1)
                        
                self.pre_text = self.current_text
                option1_list = '\n'.join(option1_list)
                option2_list = '\n'.join(option2_list)
                option1_total = '\n'.join(option1_total)

                self.df['옵션1'][i] = option1_list
                self.df['옵션2'][i] = option2_list
                self.df['옵션_종합'][i] = option1_total
                
                self.left.clear()
                time.sleep(0.5)

            self.df.to_excel('{}_translated.xlsx'.format(filename), index=False)

            self.text.run('{}번째 상품 {} 번역 성공!'.format(i + 1, translate_table[self.translate_target]))
            
        self.end_time = self.text.GetTime()
        diff_time = self.end_time - self.start_time
        self.text.run('--End work--')
        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))
        self.driver.close()

    def TranslateGoogle(self, text, option):
        try:
            ret_text = self.translator.translate(text, dest=option).text
        except:
            ret_text = ''
        
        return ret_text

    def TranslateTitle(self, title):
        ret = 1
        try:
            self.left.clear()
            self.left.send_keys(title)
            self.translate_btn.click()
        except:
            ret = 0

        time.sleep(3)
        self.current_text = self.right.text

        return ret, self.right.text

    def TranslateOption(self, option1_list, option2_list, option1_total):
        ret = 1
        try:
            self.left.clear()
        except:
            ret = 0
        option1_list_text = []
        option1_total_text = []
        option2_list_text = []
        option1_list_temp = []
        option2_list_temp = []
        option1_total_temp = []
        temp1_option = []
        temp2_option = []
        temp3_option = []
        temp1_img = []
        temp2_price = []
        
        option1_list_text = option1_list.split('\n')
        option1_total_text = option1_total.split('\n')
        
        for n in range(len(option1_list_text)):
            try:
                temp1_option.append(option1_list_text[n].split(';')[0])
                temp2_option.append(option1_total_text[n].split('/')[0])
                temp1_img.append(option1_list_text[n].split(';')[1])
                temp2_price.append(option1_total_text[n].split('/')[1])
            except:
                pass
        if len(option2_list) != 0:
            option2_list_text = option2_list.split('\n')
            for n in range(len(option2_list_text)):
                temp3_option.append(option2_list_text[n].split(';')[0])

        if temp1_option[0] != '':
            try:
                self.left.send_keys('\n'.join(temp1_option))
                self.translate_btn.click()
            except:
                ret = 0
            time.sleep(3)
            self.current_text = self.right.text
            option1_temp = self.right.text.split('\n')
            if len(option1_temp) == len(temp1_img):
                for j in range(len(option1_temp)):
                    option1_list_temp.append(option1_temp[j] + ';' + temp1_img[j])
                    option1_total_temp.append(option1_temp[j] + '/' + temp2_price[j])

        if len(temp3_option) != 0:
            try:
                self.left.clear()
                self.left.send_keys('\n'.join(temp3_option))
                self.translate_btn.click()
            except:
                ret = 0
            time.sleep(3)
            option2_temp = self.right.text.split('\n')
            if len(option2_temp) == len(temp3_option):
                for j in range(len(option2_list_text)):
                    option2_list_temp.append(option2_temp[j] + ';')

        return ret, option1_list_temp, option2_list_temp, option1_total_temp

    def RefreshWeb(self):
        pyautogui.press('f12')
        time.sleep(1)
        pyautogui.press('f12')
        time.sleep(1)
        self.driver.refresh()
        try:
            self.left = self.driver.find_element(By.CSS_SELECTOR, 'textarea#txtSource')
            self.right = self.driver.find_element(By.CSS_SELECTOR, 'div#txtTarget')
            self.translate_btn = self.driver.find_element(By.CSS_SELECTOR, '#btnTranslate > span.translate_pc___2dgT8')
        except:
            try:
                self.RefreshWeb()
                self.left = self.driver.find_element(By.CSS_SELECTOR, 'textarea#txtSource')
                self.right = self.driver.find_element(By.CSS_SELECTOR, 'div#txtTarget')
                self.translate_btn = self.driver.find_element(By.CSS_SELECTOR, '#btnTranslate > span.translate_pc___2dgT8')
                self.left.clear()
            except:
                self.text.run('웹페이지에 오류가 발생되었습니다. 프로그램을 재실행 해주시기 바랍니다.')
                return 0
        time.sleep(2)

    # 쓰레드 종료
    def KillThread(self):
        pid = os.getpid()
        os.kill(pid, 2)

    # UI에 텍스트 출력
    @pyqtSlot(str)
    def ConnectTextBrowser(self, print_str):
        self.textBrowser.append(print_str)
        self.textBrowser.repaint()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MyWindow()
    window.show()
    app.exec_()
