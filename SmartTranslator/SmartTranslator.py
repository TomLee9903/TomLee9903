# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
from tkinter import dialog
from typing import Text
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5 import uic
from PyQt5.QtCore import *
from PyQt5.QtCore import pyqtSlot

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
import chromedriver_autoinstaller
import shutil
import subprocess
import time

import datetime
import os
import pandas as pd
import threading
import tkinter
import googletrans as google
from tkinter.filedialog import askopenfilename
import pyautogui

# QT designer ui 파일 로드
form_class = uic.loadUiType("./driver/main_ui.ui")[0]

# UI 텍스트 출력 클래스
class TextBrowser(QThread):
    # signal을 MyWindow에 전달할 수 있게 하는 인자
    finished = pyqtSignal(str)
    now_date = ''

    @pyqtSlot(str)
    def run(self, print_str):
        self.make_log(print_str)

    @pyqtSlot(str)
    def make_log(self, print_str):
        self.now_time = datetime.datetime.now()
        self.now_date = self.now_time.strftime('[%Y-%m-%d %H:%M:%S]  ') + print_str
        self.finished.emit(self.now_date)   # signal MyWindow에 전달

    def GetTime(self):
        self.now_time = datetime.datetime.now()
        return self.now_time

# UI 구성 클래스
class MyWindow(QMainWindow, form_class):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.setWindowIcon(QIcon('./driver/MainImage.png'))    # UI에 구글 번역 icon 설정
        self.run_btn.clicked.connect(self.Run)  # 검색 버튼 누르면 self.Run 함수 실행
        self.process_delay = 1.5
        self.text = TextBrowser()               # UI에 text 출력 위한 객체
        self.translator = google.Translator()
        self.windows_user_name = os.path.expanduser('~')

        self.text.finished.connect(self.ConnectTextBrowser) # TextBrowser한테서 signal 받으면 ConnectTextBrowser 함수 실행
        self.exit_btn.clicked.connect(self.QuitProgram) # 종료 버튼 클릭하면 프로그램 종료되게끔 설정 & thread 종료
        self.select_file.clicked.connect(self.SetFile)
        self.clear_file.clicked.connect(self.ClearFile)
        self.setAcceptDrops(True)
        self.acceptDrops()

    # UI 창닫기 버튼 클릭하면 종료 의사 묻는 팝업창 띄우기
    def closeEvent(self, QCloseEvent): 
        ans = QMessageBox.question(self, "종료 확인", "종료하시겠습니까?",
                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)
        if ans == QMessageBox.Yes:
            QCloseEvent.accept()
            self.KillThread()
        else:
            QCloseEvent.ignore()
    
    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls():
            event.accept()
        else:
            event.ignore()
 
    def dropEvent(self, event):
        files = [u.toLocalFile() for u in event.mimeData().urls()]
        self.filename = files[0]
        self.df = pd.read_excel(self.filename)
        self.df.fillna('', inplace=True)
        self.text.run('파일 이름 : {}'.format(self.filename.split('/')[-1].replace('.xlsx','')))

    def SetFile(self):
        root = tkinter.Tk()
        root.withdraw()
        self.filename = askopenfilename(parent=root, filetypes=[('수집데이터 엑셀', '.xlsx')], initialdir=self.windows_user_name, title='번역을 원하시는 파일을 선택해주세요')
        self.df = pd.read_excel(self.filename)
        self.df.fillna('', inplace=True)
        self.text.run('파일 이름 : {}'.format(self.filename.split('/')[-1].replace('.xlsx','')))

    def ClearFile(self):
        self.df = []
        self.text.run('메모리를 클리어했습니다.')

    # 종료 버튼 누르면 실행되는 함수
    def QuitProgram(self):
        QCoreApplication.instance().quit
        self.KillThread()

    # 검색 버튼 누르면 실행되는 Run 함수
    def Run(self):
        self.th = threading.Thread(target=self.StartTranslate)
        self.th.daemon = True
        self.th.start()

    # 파파고 URL 오픈
    @pyqtSlot()
    def OpenUrl(self):
        try:
            shutil.rmtree(r"c:\chrometemp")  #쿠키 / 캐쉬파일 삭제
        except FileNotFoundError:
            pass
        
        try:
            subprocess.Popen(r'C:\Program Files\Google\Chrome\Application\chrome.exe --remote-debugging-port=9222 --user-data-dir="C:\chrometemp"') # 디버거 크롬 구동
        except:
            subprocess.Popen(r'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe --remote-debugging-port=9222 --user-data-dir="C:\chrometemp"') # 디버거 크롬 구동

        self.options = Options()
        self.options.add_experimental_option("debuggerAddress", "127.0.0.1:9222")
        # 크롬 버전을 확인하여 버전이 안맞으면 자동으로 업데이트 하여 설치해주는 옵션       
        chrome_ver = chromedriver_autoinstaller.get_chrome_version().split('.')[0]
        try:
            self.driver = webdriver.Chrome(f'./{chrome_ver}/chromedriver.exe', options=self.options)
        except:
            chromedriver_autoinstaller.install(True)
            self.driver = webdriver.Chrome(f'./{chrome_ver}/chromedriver.exe', options=self.options)
        self.driver.implicitly_wait(10)
        
        # 속도 향상을 위한 옵션 해제
        self.options.add_argument("disable-gpu") 
        self.options.add_argument("disable-infobars")
        self.options.add_argument("--disable-extensions")
        prefs = {'profile.default_content_setting_values': {'cookies' : 2, 'images': 2, 'plugins' : 2, 'popups': 2, 'geolocation': 2, 'notifications' : 2, 'auto_select_certificate': 2, 'fullscreen' : 2, 'mouselock' : 2, 'mixed_script': 2, 'media_stream' : 2, 'media_stream_mic' : 2, 'media_stream_camera': 2, 'protocol_handlers' : 2, 'ppapi_broker' : 2, 'automatic_downloads': 2, 'midi_sysex' : 2, 'push_messaging' : 2, 'ssl_cert_decisions': 2, 'metro_switch_to_desktop' : 2, 'protected_media_identifier': 2, 'app_banner': 2, 'site_engagement' : 2, 'durable_storage' : 2}}   
        self.options.add_experimental_option('prefs', prefs)
        # 크롬 브라우저와 셀레니움을 사용하면서 발생되는 '시스템에 부착된 장치가 작동하지 않습니다.' 라는 크롬 브라우저의 버그를 조치하기 위한 코드. 
        self.options.add_experimental_option("excludeSwitches", ["enable-logging"])

        # 윈도우 사이즈 맥스로 키우기
        self.driver.maximize_window()
        self.driver.get('https://papago.naver.com')
        self.text.run('파파고 URL open 완료')

        time.sleep(self.process_delay)

    @pyqtSlot()
    # 징동닷컴 크롤링 함수
    def StartTranslate(self):
        self.text.run('--Start work--')
        self.text.run('PGM ver : 22080702')
        self.start_time = self.text.GetTime()
        filename = self.filename.split('.xlsx')[0]
        self.OpenUrl()
        pyautogui.press('f12')
        time.sleep(2)
        pyautogui.press('f12')
        
        for i in range(len(self.df['상품제목'])):
            option1_list_text = []
            option1_total_text = []
            option1_list_temp = []
            option1_total_temp = []

            try:
                left = self.driver.find_element(By.CSS_SELECTOR, 'textarea#txtSource')
            except:
                time.sleep(1)
                left = self.driver.find_element(By.CSS_SELECTOR, 'textarea#txtSource')
                right = self.driver.find_element(By.CSS_SELECTOR, 'div#txtTarget')
                translate_btn = self.driver.find_element(By.CSS_SELECTOR, '#btnTranslate > span.translate_pc___2dgT8')

            left.send_keys(self.df['상품제목'][i])
            time.sleep(1)
            try:
                translate_btn = self.driver.find_element(By.CSS_SELECTOR, '#btnTranslate > span.translate_pc___2dgT8')
                translate_btn.click()
            except:
                time.sleep(1)
                translate_btn = self.driver.find_element(By.CSS_SELECTOR, '#btnTranslate > span.translate_pc___2dgT8')
                translate_btn.click()
            time.sleep(3)

            try:
                right = self.driver.find_element(By.CSS_SELECTOR, 'div#txtTarget')
            except:
                time.sleep(1)
                right = self.driver.find_element(By.CSS_SELECTOR, 'div#txtTarget')

            self.df['상품제목'][i] = right.text
            left.clear()
            time.sleep(1)

            option1_list_text = self.df['옵션1'][i].split('\n')
            option1_total_text = self.df['옵션_종합'][i].split('\n')

            for n in range(len(option1_list_text)):
                temp1 = option1_list_text[n].split(';')
                temp2 = option1_total_text[n].split('/')
                if temp1[0] != '':
                    left.send_keys(temp1[0])
                    translate_btn.click()
                    time.sleep(2)
                    option1_list_temp.append(right.text + ';' + temp1[1])
                    option1_total_temp.append(right.text + '/' + temp2[1])
                    left.clear()
                time.sleep(0.5)
                
            option1_list_temp = '\n'.join(option1_list_temp)
            option1_total_temp = '\n'.join(option1_total_temp)

            self.df['옵션1'][i] = option1_list_temp
            self.df['옵션_종합'][i] = option1_total_temp
            self.df.to_excel('{}_translated.xlsx'.format(filename), index=False)

            self.text.run('{}번째 상품 번역 성공!'.format(i + 1))
            
        self.end_time = self.text.GetTime()
        diff_time = self.end_time - self.start_time
        self.text.run('--End work--')
        self.text.run('총 소요시간은 {}초 입니다.'.format(diff_time.seconds))

    def TranslateGoogle(self, text, option):
        try:
            ret_text = self.translator.translate(text, dest=option).text
        except:
            ret_text = ''
        
        return ret_text

    # 쓰레드 종료
    def KillThread(self):
        pid = os.getpid()
        os.kill(pid, 2)

    # UI에 텍스트 출력
    @pyqtSlot(str)
    def ConnectTextBrowser(self, print_str):
        self.textBrowser.append(print_str)
        self.textBrowser.repaint()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MyWindow()
    window.show()
    app.exec_()
